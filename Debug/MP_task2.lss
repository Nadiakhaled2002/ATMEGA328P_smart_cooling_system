
MP_task2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000034d8  0000356c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000034d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800108  00800108  00003574  2**0
                  ALLOC
  3 .stab         00002a18  00000000  00000000  00003574  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d69  00000000  00000000  00005f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00006cf5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00006e55  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00006fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00009029  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000a12a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000b0ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000b22c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000b4ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bd7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a8 e0       	ldi	r26, 0x08	; 8
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
      7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
      7e:	a4 31       	cpi	r26, 0x14	; 20
      80:	b1 07       	cpc	r27, r17
      82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>

00000084 <__do_copy_data>:
      84:	11 e0       	ldi	r17, 0x01	; 1
      86:	a0 e0       	ldi	r26, 0x00	; 0
      88:	b1 e0       	ldi	r27, 0x01	; 1
      8a:	e8 ed       	ldi	r30, 0xD8	; 216
      8c:	f4 e3       	ldi	r31, 0x34	; 52
      8e:	02 c0       	rjmp	.+4      	; 0x94 <.do_copy_data_start>

00000090 <.do_copy_data_loop>:
      90:	05 90       	lpm	r0, Z+
      92:	0d 92       	st	X+, r0

00000094 <.do_copy_data_start>:
      94:	a8 30       	cpi	r26, 0x08	; 8
      96:	b1 07       	cpc	r27, r17
      98:	d9 f7       	brne	.-10     	; 0x90 <.do_copy_data_loop>
      9a:	0e 94 35 18 	call	0x306a	; 0x306a <main>
      9e:	0c 94 6a 1a 	jmp	0x34d4	; 0x34d4 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__fixunssfsi>:
      a6:	ef 92       	push	r14
      a8:	ff 92       	push	r15
      aa:	0f 93       	push	r16
      ac:	1f 93       	push	r17
      ae:	7b 01       	movw	r14, r22
      b0:	8c 01       	movw	r16, r24
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__gesf2>
      be:	88 23       	and	r24, r24
      c0:	8c f0       	brlt	.+34     	; 0xe4 <__fixunssfsi+0x3e>
      c2:	c8 01       	movw	r24, r16
      c4:	b7 01       	movw	r22, r14
      c6:	20 e0       	ldi	r18, 0x00	; 0
      c8:	30 e0       	ldi	r19, 0x00	; 0
      ca:	40 e0       	ldi	r20, 0x00	; 0
      cc:	5f e4       	ldi	r21, 0x4F	; 79
      ce:	0e 94 cb 01 	call	0x396	; 0x396 <__subsf3>
      d2:	0e 94 5f 04 	call	0x8be	; 0x8be <__fixsfsi>
      d6:	9b 01       	movw	r18, r22
      d8:	ac 01       	movw	r20, r24
      da:	20 50       	subi	r18, 0x00	; 0
      dc:	30 40       	sbci	r19, 0x00	; 0
      de:	40 40       	sbci	r20, 0x00	; 0
      e0:	50 48       	sbci	r21, 0x80	; 128
      e2:	06 c0       	rjmp	.+12     	; 0xf0 <__fixunssfsi+0x4a>
      e4:	c8 01       	movw	r24, r16
      e6:	b7 01       	movw	r22, r14
      e8:	0e 94 5f 04 	call	0x8be	; 0x8be <__fixsfsi>
      ec:	9b 01       	movw	r18, r22
      ee:	ac 01       	movw	r20, r24
      f0:	b9 01       	movw	r22, r18
      f2:	ca 01       	movw	r24, r20
      f4:	1f 91       	pop	r17
      f6:	0f 91       	pop	r16
      f8:	ff 90       	pop	r15
      fa:	ef 90       	pop	r14
      fc:	08 95       	ret

000000fe <_fpadd_parts>:
      fe:	a0 e0       	ldi	r26, 0x00	; 0
     100:	b0 e0       	ldi	r27, 0x00	; 0
     102:	e5 e8       	ldi	r30, 0x85	; 133
     104:	f0 e0       	ldi	r31, 0x00	; 0
     106:	0c 94 33 1a 	jmp	0x3466	; 0x3466 <__prologue_saves__>
     10a:	dc 01       	movw	r26, r24
     10c:	2b 01       	movw	r4, r22
     10e:	fa 01       	movw	r30, r20
     110:	9c 91       	ld	r25, X
     112:	92 30       	cpi	r25, 0x02	; 2
     114:	08 f4       	brcc	.+2      	; 0x118 <_fpadd_parts+0x1a>
     116:	39 c1       	rjmp	.+626    	; 0x38a <_fpadd_parts+0x28c>
     118:	eb 01       	movw	r28, r22
     11a:	88 81       	ld	r24, Y
     11c:	82 30       	cpi	r24, 0x02	; 2
     11e:	08 f4       	brcc	.+2      	; 0x122 <_fpadd_parts+0x24>
     120:	33 c1       	rjmp	.+614    	; 0x388 <_fpadd_parts+0x28a>
     122:	94 30       	cpi	r25, 0x04	; 4
     124:	69 f4       	brne	.+26     	; 0x140 <_fpadd_parts+0x42>
     126:	84 30       	cpi	r24, 0x04	; 4
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x2e>
     12a:	2f c1       	rjmp	.+606    	; 0x38a <_fpadd_parts+0x28c>
     12c:	11 96       	adiw	r26, 0x01	; 1
     12e:	9c 91       	ld	r25, X
     130:	11 97       	sbiw	r26, 0x01	; 1
     132:	89 81       	ldd	r24, Y+1	; 0x01
     134:	98 17       	cp	r25, r24
     136:	09 f4       	brne	.+2      	; 0x13a <_fpadd_parts+0x3c>
     138:	28 c1       	rjmp	.+592    	; 0x38a <_fpadd_parts+0x28c>
     13a:	a0 e0       	ldi	r26, 0x00	; 0
     13c:	b1 e0       	ldi	r27, 0x01	; 1
     13e:	25 c1       	rjmp	.+586    	; 0x38a <_fpadd_parts+0x28c>
     140:	84 30       	cpi	r24, 0x04	; 4
     142:	09 f4       	brne	.+2      	; 0x146 <_fpadd_parts+0x48>
     144:	21 c1       	rjmp	.+578    	; 0x388 <_fpadd_parts+0x28a>
     146:	82 30       	cpi	r24, 0x02	; 2
     148:	a9 f4       	brne	.+42     	; 0x174 <_fpadd_parts+0x76>
     14a:	92 30       	cpi	r25, 0x02	; 2
     14c:	09 f0       	breq	.+2      	; 0x150 <_fpadd_parts+0x52>
     14e:	1d c1       	rjmp	.+570    	; 0x38a <_fpadd_parts+0x28c>
     150:	9a 01       	movw	r18, r20
     152:	ad 01       	movw	r20, r26
     154:	88 e0       	ldi	r24, 0x08	; 8
     156:	ea 01       	movw	r28, r20
     158:	09 90       	ld	r0, Y+
     15a:	ae 01       	movw	r20, r28
     15c:	e9 01       	movw	r28, r18
     15e:	09 92       	st	Y+, r0
     160:	9e 01       	movw	r18, r28
     162:	81 50       	subi	r24, 0x01	; 1
     164:	c1 f7       	brne	.-16     	; 0x156 <_fpadd_parts+0x58>
     166:	e2 01       	movw	r28, r4
     168:	89 81       	ldd	r24, Y+1	; 0x01
     16a:	11 96       	adiw	r26, 0x01	; 1
     16c:	9c 91       	ld	r25, X
     16e:	89 23       	and	r24, r25
     170:	81 83       	std	Z+1, r24	; 0x01
     172:	08 c1       	rjmp	.+528    	; 0x384 <_fpadd_parts+0x286>
     174:	92 30       	cpi	r25, 0x02	; 2
     176:	09 f4       	brne	.+2      	; 0x17a <_fpadd_parts+0x7c>
     178:	07 c1       	rjmp	.+526    	; 0x388 <_fpadd_parts+0x28a>
     17a:	12 96       	adiw	r26, 0x02	; 2
     17c:	2d 90       	ld	r2, X+
     17e:	3c 90       	ld	r3, X
     180:	13 97       	sbiw	r26, 0x03	; 3
     182:	eb 01       	movw	r28, r22
     184:	8a 81       	ldd	r24, Y+2	; 0x02
     186:	9b 81       	ldd	r25, Y+3	; 0x03
     188:	14 96       	adiw	r26, 0x04	; 4
     18a:	ad 90       	ld	r10, X+
     18c:	bd 90       	ld	r11, X+
     18e:	cd 90       	ld	r12, X+
     190:	dc 90       	ld	r13, X
     192:	17 97       	sbiw	r26, 0x07	; 7
     194:	ec 80       	ldd	r14, Y+4	; 0x04
     196:	fd 80       	ldd	r15, Y+5	; 0x05
     198:	0e 81       	ldd	r16, Y+6	; 0x06
     19a:	1f 81       	ldd	r17, Y+7	; 0x07
     19c:	91 01       	movw	r18, r2
     19e:	28 1b       	sub	r18, r24
     1a0:	39 0b       	sbc	r19, r25
     1a2:	b9 01       	movw	r22, r18
     1a4:	37 ff       	sbrs	r19, 7
     1a6:	04 c0       	rjmp	.+8      	; 0x1b0 <_fpadd_parts+0xb2>
     1a8:	66 27       	eor	r22, r22
     1aa:	77 27       	eor	r23, r23
     1ac:	62 1b       	sub	r22, r18
     1ae:	73 0b       	sbc	r23, r19
     1b0:	60 32       	cpi	r22, 0x20	; 32
     1b2:	71 05       	cpc	r23, r1
     1b4:	0c f0       	brlt	.+2      	; 0x1b8 <_fpadd_parts+0xba>
     1b6:	61 c0       	rjmp	.+194    	; 0x27a <_fpadd_parts+0x17c>
     1b8:	12 16       	cp	r1, r18
     1ba:	13 06       	cpc	r1, r19
     1bc:	6c f5       	brge	.+90     	; 0x218 <_fpadd_parts+0x11a>
     1be:	37 01       	movw	r6, r14
     1c0:	48 01       	movw	r8, r16
     1c2:	06 2e       	mov	r0, r22
     1c4:	04 c0       	rjmp	.+8      	; 0x1ce <_fpadd_parts+0xd0>
     1c6:	96 94       	lsr	r9
     1c8:	87 94       	ror	r8
     1ca:	77 94       	ror	r7
     1cc:	67 94       	ror	r6
     1ce:	0a 94       	dec	r0
     1d0:	d2 f7       	brpl	.-12     	; 0x1c6 <_fpadd_parts+0xc8>
     1d2:	21 e0       	ldi	r18, 0x01	; 1
     1d4:	30 e0       	ldi	r19, 0x00	; 0
     1d6:	40 e0       	ldi	r20, 0x00	; 0
     1d8:	50 e0       	ldi	r21, 0x00	; 0
     1da:	04 c0       	rjmp	.+8      	; 0x1e4 <_fpadd_parts+0xe6>
     1dc:	22 0f       	add	r18, r18
     1de:	33 1f       	adc	r19, r19
     1e0:	44 1f       	adc	r20, r20
     1e2:	55 1f       	adc	r21, r21
     1e4:	6a 95       	dec	r22
     1e6:	d2 f7       	brpl	.-12     	; 0x1dc <_fpadd_parts+0xde>
     1e8:	21 50       	subi	r18, 0x01	; 1
     1ea:	30 40       	sbci	r19, 0x00	; 0
     1ec:	40 40       	sbci	r20, 0x00	; 0
     1ee:	50 40       	sbci	r21, 0x00	; 0
     1f0:	2e 21       	and	r18, r14
     1f2:	3f 21       	and	r19, r15
     1f4:	40 23       	and	r20, r16
     1f6:	51 23       	and	r21, r17
     1f8:	21 15       	cp	r18, r1
     1fa:	31 05       	cpc	r19, r1
     1fc:	41 05       	cpc	r20, r1
     1fe:	51 05       	cpc	r21, r1
     200:	21 f0       	breq	.+8      	; 0x20a <_fpadd_parts+0x10c>
     202:	21 e0       	ldi	r18, 0x01	; 1
     204:	30 e0       	ldi	r19, 0x00	; 0
     206:	40 e0       	ldi	r20, 0x00	; 0
     208:	50 e0       	ldi	r21, 0x00	; 0
     20a:	79 01       	movw	r14, r18
     20c:	8a 01       	movw	r16, r20
     20e:	e6 28       	or	r14, r6
     210:	f7 28       	or	r15, r7
     212:	08 29       	or	r16, r8
     214:	19 29       	or	r17, r9
     216:	3c c0       	rjmp	.+120    	; 0x290 <_fpadd_parts+0x192>
     218:	23 2b       	or	r18, r19
     21a:	d1 f1       	breq	.+116    	; 0x290 <_fpadd_parts+0x192>
     21c:	26 0e       	add	r2, r22
     21e:	37 1e       	adc	r3, r23
     220:	35 01       	movw	r6, r10
     222:	46 01       	movw	r8, r12
     224:	06 2e       	mov	r0, r22
     226:	04 c0       	rjmp	.+8      	; 0x230 <_fpadd_parts+0x132>
     228:	96 94       	lsr	r9
     22a:	87 94       	ror	r8
     22c:	77 94       	ror	r7
     22e:	67 94       	ror	r6
     230:	0a 94       	dec	r0
     232:	d2 f7       	brpl	.-12     	; 0x228 <_fpadd_parts+0x12a>
     234:	21 e0       	ldi	r18, 0x01	; 1
     236:	30 e0       	ldi	r19, 0x00	; 0
     238:	40 e0       	ldi	r20, 0x00	; 0
     23a:	50 e0       	ldi	r21, 0x00	; 0
     23c:	04 c0       	rjmp	.+8      	; 0x246 <_fpadd_parts+0x148>
     23e:	22 0f       	add	r18, r18
     240:	33 1f       	adc	r19, r19
     242:	44 1f       	adc	r20, r20
     244:	55 1f       	adc	r21, r21
     246:	6a 95       	dec	r22
     248:	d2 f7       	brpl	.-12     	; 0x23e <_fpadd_parts+0x140>
     24a:	21 50       	subi	r18, 0x01	; 1
     24c:	30 40       	sbci	r19, 0x00	; 0
     24e:	40 40       	sbci	r20, 0x00	; 0
     250:	50 40       	sbci	r21, 0x00	; 0
     252:	2a 21       	and	r18, r10
     254:	3b 21       	and	r19, r11
     256:	4c 21       	and	r20, r12
     258:	5d 21       	and	r21, r13
     25a:	21 15       	cp	r18, r1
     25c:	31 05       	cpc	r19, r1
     25e:	41 05       	cpc	r20, r1
     260:	51 05       	cpc	r21, r1
     262:	21 f0       	breq	.+8      	; 0x26c <_fpadd_parts+0x16e>
     264:	21 e0       	ldi	r18, 0x01	; 1
     266:	30 e0       	ldi	r19, 0x00	; 0
     268:	40 e0       	ldi	r20, 0x00	; 0
     26a:	50 e0       	ldi	r21, 0x00	; 0
     26c:	59 01       	movw	r10, r18
     26e:	6a 01       	movw	r12, r20
     270:	a6 28       	or	r10, r6
     272:	b7 28       	or	r11, r7
     274:	c8 28       	or	r12, r8
     276:	d9 28       	or	r13, r9
     278:	0b c0       	rjmp	.+22     	; 0x290 <_fpadd_parts+0x192>
     27a:	82 15       	cp	r24, r2
     27c:	93 05       	cpc	r25, r3
     27e:	2c f0       	brlt	.+10     	; 0x28a <_fpadd_parts+0x18c>
     280:	1c 01       	movw	r2, r24
     282:	aa 24       	eor	r10, r10
     284:	bb 24       	eor	r11, r11
     286:	65 01       	movw	r12, r10
     288:	03 c0       	rjmp	.+6      	; 0x290 <_fpadd_parts+0x192>
     28a:	ee 24       	eor	r14, r14
     28c:	ff 24       	eor	r15, r15
     28e:	87 01       	movw	r16, r14
     290:	11 96       	adiw	r26, 0x01	; 1
     292:	9c 91       	ld	r25, X
     294:	d2 01       	movw	r26, r4
     296:	11 96       	adiw	r26, 0x01	; 1
     298:	8c 91       	ld	r24, X
     29a:	98 17       	cp	r25, r24
     29c:	09 f4       	brne	.+2      	; 0x2a0 <_fpadd_parts+0x1a2>
     29e:	45 c0       	rjmp	.+138    	; 0x32a <_fpadd_parts+0x22c>
     2a0:	99 23       	and	r25, r25
     2a2:	39 f0       	breq	.+14     	; 0x2b2 <_fpadd_parts+0x1b4>
     2a4:	a8 01       	movw	r20, r16
     2a6:	97 01       	movw	r18, r14
     2a8:	2a 19       	sub	r18, r10
     2aa:	3b 09       	sbc	r19, r11
     2ac:	4c 09       	sbc	r20, r12
     2ae:	5d 09       	sbc	r21, r13
     2b0:	06 c0       	rjmp	.+12     	; 0x2be <_fpadd_parts+0x1c0>
     2b2:	a6 01       	movw	r20, r12
     2b4:	95 01       	movw	r18, r10
     2b6:	2e 19       	sub	r18, r14
     2b8:	3f 09       	sbc	r19, r15
     2ba:	40 0b       	sbc	r20, r16
     2bc:	51 0b       	sbc	r21, r17
     2be:	57 fd       	sbrc	r21, 7
     2c0:	08 c0       	rjmp	.+16     	; 0x2d2 <_fpadd_parts+0x1d4>
     2c2:	11 82       	std	Z+1, r1	; 0x01
     2c4:	33 82       	std	Z+3, r3	; 0x03
     2c6:	22 82       	std	Z+2, r2	; 0x02
     2c8:	24 83       	std	Z+4, r18	; 0x04
     2ca:	35 83       	std	Z+5, r19	; 0x05
     2cc:	46 83       	std	Z+6, r20	; 0x06
     2ce:	57 83       	std	Z+7, r21	; 0x07
     2d0:	1d c0       	rjmp	.+58     	; 0x30c <_fpadd_parts+0x20e>
     2d2:	81 e0       	ldi	r24, 0x01	; 1
     2d4:	81 83       	std	Z+1, r24	; 0x01
     2d6:	33 82       	std	Z+3, r3	; 0x03
     2d8:	22 82       	std	Z+2, r2	; 0x02
     2da:	88 27       	eor	r24, r24
     2dc:	99 27       	eor	r25, r25
     2de:	dc 01       	movw	r26, r24
     2e0:	82 1b       	sub	r24, r18
     2e2:	93 0b       	sbc	r25, r19
     2e4:	a4 0b       	sbc	r26, r20
     2e6:	b5 0b       	sbc	r27, r21
     2e8:	84 83       	std	Z+4, r24	; 0x04
     2ea:	95 83       	std	Z+5, r25	; 0x05
     2ec:	a6 83       	std	Z+6, r26	; 0x06
     2ee:	b7 83       	std	Z+7, r27	; 0x07
     2f0:	0d c0       	rjmp	.+26     	; 0x30c <_fpadd_parts+0x20e>
     2f2:	22 0f       	add	r18, r18
     2f4:	33 1f       	adc	r19, r19
     2f6:	44 1f       	adc	r20, r20
     2f8:	55 1f       	adc	r21, r21
     2fa:	24 83       	std	Z+4, r18	; 0x04
     2fc:	35 83       	std	Z+5, r19	; 0x05
     2fe:	46 83       	std	Z+6, r20	; 0x06
     300:	57 83       	std	Z+7, r21	; 0x07
     302:	82 81       	ldd	r24, Z+2	; 0x02
     304:	93 81       	ldd	r25, Z+3	; 0x03
     306:	01 97       	sbiw	r24, 0x01	; 1
     308:	93 83       	std	Z+3, r25	; 0x03
     30a:	82 83       	std	Z+2, r24	; 0x02
     30c:	24 81       	ldd	r18, Z+4	; 0x04
     30e:	35 81       	ldd	r19, Z+5	; 0x05
     310:	46 81       	ldd	r20, Z+6	; 0x06
     312:	57 81       	ldd	r21, Z+7	; 0x07
     314:	da 01       	movw	r26, r20
     316:	c9 01       	movw	r24, r18
     318:	01 97       	sbiw	r24, 0x01	; 1
     31a:	a1 09       	sbc	r26, r1
     31c:	b1 09       	sbc	r27, r1
     31e:	8f 5f       	subi	r24, 0xFF	; 255
     320:	9f 4f       	sbci	r25, 0xFF	; 255
     322:	af 4f       	sbci	r26, 0xFF	; 255
     324:	bf 43       	sbci	r27, 0x3F	; 63
     326:	28 f3       	brcs	.-54     	; 0x2f2 <_fpadd_parts+0x1f4>
     328:	0b c0       	rjmp	.+22     	; 0x340 <_fpadd_parts+0x242>
     32a:	91 83       	std	Z+1, r25	; 0x01
     32c:	33 82       	std	Z+3, r3	; 0x03
     32e:	22 82       	std	Z+2, r2	; 0x02
     330:	ea 0c       	add	r14, r10
     332:	fb 1c       	adc	r15, r11
     334:	0c 1d       	adc	r16, r12
     336:	1d 1d       	adc	r17, r13
     338:	e4 82       	std	Z+4, r14	; 0x04
     33a:	f5 82       	std	Z+5, r15	; 0x05
     33c:	06 83       	std	Z+6, r16	; 0x06
     33e:	17 83       	std	Z+7, r17	; 0x07
     340:	83 e0       	ldi	r24, 0x03	; 3
     342:	80 83       	st	Z, r24
     344:	24 81       	ldd	r18, Z+4	; 0x04
     346:	35 81       	ldd	r19, Z+5	; 0x05
     348:	46 81       	ldd	r20, Z+6	; 0x06
     34a:	57 81       	ldd	r21, Z+7	; 0x07
     34c:	57 ff       	sbrs	r21, 7
     34e:	1a c0       	rjmp	.+52     	; 0x384 <_fpadd_parts+0x286>
     350:	c9 01       	movw	r24, r18
     352:	aa 27       	eor	r26, r26
     354:	97 fd       	sbrc	r25, 7
     356:	a0 95       	com	r26
     358:	ba 2f       	mov	r27, r26
     35a:	81 70       	andi	r24, 0x01	; 1
     35c:	90 70       	andi	r25, 0x00	; 0
     35e:	a0 70       	andi	r26, 0x00	; 0
     360:	b0 70       	andi	r27, 0x00	; 0
     362:	56 95       	lsr	r21
     364:	47 95       	ror	r20
     366:	37 95       	ror	r19
     368:	27 95       	ror	r18
     36a:	82 2b       	or	r24, r18
     36c:	93 2b       	or	r25, r19
     36e:	a4 2b       	or	r26, r20
     370:	b5 2b       	or	r27, r21
     372:	84 83       	std	Z+4, r24	; 0x04
     374:	95 83       	std	Z+5, r25	; 0x05
     376:	a6 83       	std	Z+6, r26	; 0x06
     378:	b7 83       	std	Z+7, r27	; 0x07
     37a:	82 81       	ldd	r24, Z+2	; 0x02
     37c:	93 81       	ldd	r25, Z+3	; 0x03
     37e:	01 96       	adiw	r24, 0x01	; 1
     380:	93 83       	std	Z+3, r25	; 0x03
     382:	82 83       	std	Z+2, r24	; 0x02
     384:	df 01       	movw	r26, r30
     386:	01 c0       	rjmp	.+2      	; 0x38a <_fpadd_parts+0x28c>
     388:	d2 01       	movw	r26, r4
     38a:	cd 01       	movw	r24, r26
     38c:	cd b7       	in	r28, 0x3d	; 61
     38e:	de b7       	in	r29, 0x3e	; 62
     390:	e2 e1       	ldi	r30, 0x12	; 18
     392:	0c 94 4f 1a 	jmp	0x349e	; 0x349e <__epilogue_restores__>

00000396 <__subsf3>:
     396:	a0 e2       	ldi	r26, 0x20	; 32
     398:	b0 e0       	ldi	r27, 0x00	; 0
     39a:	e1 ed       	ldi	r30, 0xD1	; 209
     39c:	f1 e0       	ldi	r31, 0x01	; 1
     39e:	0c 94 3f 1a 	jmp	0x347e	; 0x347e <__prologue_saves__+0x18>
     3a2:	69 83       	std	Y+1, r22	; 0x01
     3a4:	7a 83       	std	Y+2, r23	; 0x02
     3a6:	8b 83       	std	Y+3, r24	; 0x03
     3a8:	9c 83       	std	Y+4, r25	; 0x04
     3aa:	2d 83       	std	Y+5, r18	; 0x05
     3ac:	3e 83       	std	Y+6, r19	; 0x06
     3ae:	4f 83       	std	Y+7, r20	; 0x07
     3b0:	58 87       	std	Y+8, r21	; 0x08
     3b2:	e9 e0       	ldi	r30, 0x09	; 9
     3b4:	ee 2e       	mov	r14, r30
     3b6:	f1 2c       	mov	r15, r1
     3b8:	ec 0e       	add	r14, r28
     3ba:	fd 1e       	adc	r15, r29
     3bc:	ce 01       	movw	r24, r28
     3be:	01 96       	adiw	r24, 0x01	; 1
     3c0:	b7 01       	movw	r22, r14
     3c2:	0e 94 88 05 	call	0xb10	; 0xb10 <__unpack_f>
     3c6:	8e 01       	movw	r16, r28
     3c8:	0f 5e       	subi	r16, 0xEF	; 239
     3ca:	1f 4f       	sbci	r17, 0xFF	; 255
     3cc:	ce 01       	movw	r24, r28
     3ce:	05 96       	adiw	r24, 0x05	; 5
     3d0:	b8 01       	movw	r22, r16
     3d2:	0e 94 88 05 	call	0xb10	; 0xb10 <__unpack_f>
     3d6:	8a 89       	ldd	r24, Y+18	; 0x12
     3d8:	91 e0       	ldi	r25, 0x01	; 1
     3da:	89 27       	eor	r24, r25
     3dc:	8a 8b       	std	Y+18, r24	; 0x12
     3de:	c7 01       	movw	r24, r14
     3e0:	b8 01       	movw	r22, r16
     3e2:	ae 01       	movw	r20, r28
     3e4:	47 5e       	subi	r20, 0xE7	; 231
     3e6:	5f 4f       	sbci	r21, 0xFF	; 255
     3e8:	0e 94 7f 00 	call	0xfe	; 0xfe <_fpadd_parts>
     3ec:	0e 94 b3 04 	call	0x966	; 0x966 <__pack_f>
     3f0:	a0 96       	adiw	r28, 0x20	; 32
     3f2:	e6 e0       	ldi	r30, 0x06	; 6
     3f4:	0c 94 5b 1a 	jmp	0x34b6	; 0x34b6 <__epilogue_restores__+0x18>

000003f8 <__addsf3>:
     3f8:	a0 e2       	ldi	r26, 0x20	; 32
     3fa:	b0 e0       	ldi	r27, 0x00	; 0
     3fc:	e2 e0       	ldi	r30, 0x02	; 2
     3fe:	f2 e0       	ldi	r31, 0x02	; 2
     400:	0c 94 3f 1a 	jmp	0x347e	; 0x347e <__prologue_saves__+0x18>
     404:	69 83       	std	Y+1, r22	; 0x01
     406:	7a 83       	std	Y+2, r23	; 0x02
     408:	8b 83       	std	Y+3, r24	; 0x03
     40a:	9c 83       	std	Y+4, r25	; 0x04
     40c:	2d 83       	std	Y+5, r18	; 0x05
     40e:	3e 83       	std	Y+6, r19	; 0x06
     410:	4f 83       	std	Y+7, r20	; 0x07
     412:	58 87       	std	Y+8, r21	; 0x08
     414:	f9 e0       	ldi	r31, 0x09	; 9
     416:	ef 2e       	mov	r14, r31
     418:	f1 2c       	mov	r15, r1
     41a:	ec 0e       	add	r14, r28
     41c:	fd 1e       	adc	r15, r29
     41e:	ce 01       	movw	r24, r28
     420:	01 96       	adiw	r24, 0x01	; 1
     422:	b7 01       	movw	r22, r14
     424:	0e 94 88 05 	call	0xb10	; 0xb10 <__unpack_f>
     428:	8e 01       	movw	r16, r28
     42a:	0f 5e       	subi	r16, 0xEF	; 239
     42c:	1f 4f       	sbci	r17, 0xFF	; 255
     42e:	ce 01       	movw	r24, r28
     430:	05 96       	adiw	r24, 0x05	; 5
     432:	b8 01       	movw	r22, r16
     434:	0e 94 88 05 	call	0xb10	; 0xb10 <__unpack_f>
     438:	c7 01       	movw	r24, r14
     43a:	b8 01       	movw	r22, r16
     43c:	ae 01       	movw	r20, r28
     43e:	47 5e       	subi	r20, 0xE7	; 231
     440:	5f 4f       	sbci	r21, 0xFF	; 255
     442:	0e 94 7f 00 	call	0xfe	; 0xfe <_fpadd_parts>
     446:	0e 94 b3 04 	call	0x966	; 0x966 <__pack_f>
     44a:	a0 96       	adiw	r28, 0x20	; 32
     44c:	e6 e0       	ldi	r30, 0x06	; 6
     44e:	0c 94 5b 1a 	jmp	0x34b6	; 0x34b6 <__epilogue_restores__+0x18>

00000452 <__mulsf3>:
     452:	a0 e2       	ldi	r26, 0x20	; 32
     454:	b0 e0       	ldi	r27, 0x00	; 0
     456:	ef e2       	ldi	r30, 0x2F	; 47
     458:	f2 e0       	ldi	r31, 0x02	; 2
     45a:	0c 94 33 1a 	jmp	0x3466	; 0x3466 <__prologue_saves__>
     45e:	69 83       	std	Y+1, r22	; 0x01
     460:	7a 83       	std	Y+2, r23	; 0x02
     462:	8b 83       	std	Y+3, r24	; 0x03
     464:	9c 83       	std	Y+4, r25	; 0x04
     466:	2d 83       	std	Y+5, r18	; 0x05
     468:	3e 83       	std	Y+6, r19	; 0x06
     46a:	4f 83       	std	Y+7, r20	; 0x07
     46c:	58 87       	std	Y+8, r21	; 0x08
     46e:	ce 01       	movw	r24, r28
     470:	01 96       	adiw	r24, 0x01	; 1
     472:	be 01       	movw	r22, r28
     474:	67 5f       	subi	r22, 0xF7	; 247
     476:	7f 4f       	sbci	r23, 0xFF	; 255
     478:	0e 94 88 05 	call	0xb10	; 0xb10 <__unpack_f>
     47c:	ce 01       	movw	r24, r28
     47e:	05 96       	adiw	r24, 0x05	; 5
     480:	be 01       	movw	r22, r28
     482:	6f 5e       	subi	r22, 0xEF	; 239
     484:	7f 4f       	sbci	r23, 0xFF	; 255
     486:	0e 94 88 05 	call	0xb10	; 0xb10 <__unpack_f>
     48a:	99 85       	ldd	r25, Y+9	; 0x09
     48c:	92 30       	cpi	r25, 0x02	; 2
     48e:	88 f0       	brcs	.+34     	; 0x4b2 <__mulsf3+0x60>
     490:	89 89       	ldd	r24, Y+17	; 0x11
     492:	82 30       	cpi	r24, 0x02	; 2
     494:	c8 f0       	brcs	.+50     	; 0x4c8 <__mulsf3+0x76>
     496:	94 30       	cpi	r25, 0x04	; 4
     498:	19 f4       	brne	.+6      	; 0x4a0 <__mulsf3+0x4e>
     49a:	82 30       	cpi	r24, 0x02	; 2
     49c:	51 f4       	brne	.+20     	; 0x4b2 <__mulsf3+0x60>
     49e:	04 c0       	rjmp	.+8      	; 0x4a8 <__mulsf3+0x56>
     4a0:	84 30       	cpi	r24, 0x04	; 4
     4a2:	29 f4       	brne	.+10     	; 0x4ae <__mulsf3+0x5c>
     4a4:	92 30       	cpi	r25, 0x02	; 2
     4a6:	81 f4       	brne	.+32     	; 0x4c8 <__mulsf3+0x76>
     4a8:	80 e0       	ldi	r24, 0x00	; 0
     4aa:	91 e0       	ldi	r25, 0x01	; 1
     4ac:	c6 c0       	rjmp	.+396    	; 0x63a <__mulsf3+0x1e8>
     4ae:	92 30       	cpi	r25, 0x02	; 2
     4b0:	49 f4       	brne	.+18     	; 0x4c4 <__mulsf3+0x72>
     4b2:	20 e0       	ldi	r18, 0x00	; 0
     4b4:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b6:	8a 89       	ldd	r24, Y+18	; 0x12
     4b8:	98 13       	cpse	r25, r24
     4ba:	21 e0       	ldi	r18, 0x01	; 1
     4bc:	2a 87       	std	Y+10, r18	; 0x0a
     4be:	ce 01       	movw	r24, r28
     4c0:	09 96       	adiw	r24, 0x09	; 9
     4c2:	bb c0       	rjmp	.+374    	; 0x63a <__mulsf3+0x1e8>
     4c4:	82 30       	cpi	r24, 0x02	; 2
     4c6:	49 f4       	brne	.+18     	; 0x4da <__mulsf3+0x88>
     4c8:	20 e0       	ldi	r18, 0x00	; 0
     4ca:	9a 85       	ldd	r25, Y+10	; 0x0a
     4cc:	8a 89       	ldd	r24, Y+18	; 0x12
     4ce:	98 13       	cpse	r25, r24
     4d0:	21 e0       	ldi	r18, 0x01	; 1
     4d2:	2a 8b       	std	Y+18, r18	; 0x12
     4d4:	ce 01       	movw	r24, r28
     4d6:	41 96       	adiw	r24, 0x11	; 17
     4d8:	b0 c0       	rjmp	.+352    	; 0x63a <__mulsf3+0x1e8>
     4da:	2d 84       	ldd	r2, Y+13	; 0x0d
     4dc:	3e 84       	ldd	r3, Y+14	; 0x0e
     4de:	4f 84       	ldd	r4, Y+15	; 0x0f
     4e0:	58 88       	ldd	r5, Y+16	; 0x10
     4e2:	6d 88       	ldd	r6, Y+21	; 0x15
     4e4:	7e 88       	ldd	r7, Y+22	; 0x16
     4e6:	8f 88       	ldd	r8, Y+23	; 0x17
     4e8:	98 8c       	ldd	r9, Y+24	; 0x18
     4ea:	ee 24       	eor	r14, r14
     4ec:	ff 24       	eor	r15, r15
     4ee:	87 01       	movw	r16, r14
     4f0:	aa 24       	eor	r10, r10
     4f2:	bb 24       	eor	r11, r11
     4f4:	65 01       	movw	r12, r10
     4f6:	40 e0       	ldi	r20, 0x00	; 0
     4f8:	50 e0       	ldi	r21, 0x00	; 0
     4fa:	60 e0       	ldi	r22, 0x00	; 0
     4fc:	70 e0       	ldi	r23, 0x00	; 0
     4fe:	e0 e0       	ldi	r30, 0x00	; 0
     500:	f0 e0       	ldi	r31, 0x00	; 0
     502:	c1 01       	movw	r24, r2
     504:	81 70       	andi	r24, 0x01	; 1
     506:	90 70       	andi	r25, 0x00	; 0
     508:	89 2b       	or	r24, r25
     50a:	e9 f0       	breq	.+58     	; 0x546 <__mulsf3+0xf4>
     50c:	e6 0c       	add	r14, r6
     50e:	f7 1c       	adc	r15, r7
     510:	08 1d       	adc	r16, r8
     512:	19 1d       	adc	r17, r9
     514:	9a 01       	movw	r18, r20
     516:	ab 01       	movw	r20, r22
     518:	2a 0d       	add	r18, r10
     51a:	3b 1d       	adc	r19, r11
     51c:	4c 1d       	adc	r20, r12
     51e:	5d 1d       	adc	r21, r13
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	a0 e0       	ldi	r26, 0x00	; 0
     526:	b0 e0       	ldi	r27, 0x00	; 0
     528:	e6 14       	cp	r14, r6
     52a:	f7 04       	cpc	r15, r7
     52c:	08 05       	cpc	r16, r8
     52e:	19 05       	cpc	r17, r9
     530:	20 f4       	brcc	.+8      	; 0x53a <__mulsf3+0xe8>
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	a0 e0       	ldi	r26, 0x00	; 0
     538:	b0 e0       	ldi	r27, 0x00	; 0
     53a:	ba 01       	movw	r22, r20
     53c:	a9 01       	movw	r20, r18
     53e:	48 0f       	add	r20, r24
     540:	59 1f       	adc	r21, r25
     542:	6a 1f       	adc	r22, r26
     544:	7b 1f       	adc	r23, r27
     546:	aa 0c       	add	r10, r10
     548:	bb 1c       	adc	r11, r11
     54a:	cc 1c       	adc	r12, r12
     54c:	dd 1c       	adc	r13, r13
     54e:	97 fe       	sbrs	r9, 7
     550:	08 c0       	rjmp	.+16     	; 0x562 <__mulsf3+0x110>
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	a0 e0       	ldi	r26, 0x00	; 0
     558:	b0 e0       	ldi	r27, 0x00	; 0
     55a:	a8 2a       	or	r10, r24
     55c:	b9 2a       	or	r11, r25
     55e:	ca 2a       	or	r12, r26
     560:	db 2a       	or	r13, r27
     562:	31 96       	adiw	r30, 0x01	; 1
     564:	e0 32       	cpi	r30, 0x20	; 32
     566:	f1 05       	cpc	r31, r1
     568:	49 f0       	breq	.+18     	; 0x57c <__mulsf3+0x12a>
     56a:	66 0c       	add	r6, r6
     56c:	77 1c       	adc	r7, r7
     56e:	88 1c       	adc	r8, r8
     570:	99 1c       	adc	r9, r9
     572:	56 94       	lsr	r5
     574:	47 94       	ror	r4
     576:	37 94       	ror	r3
     578:	27 94       	ror	r2
     57a:	c3 cf       	rjmp	.-122    	; 0x502 <__mulsf3+0xb0>
     57c:	fa 85       	ldd	r31, Y+10	; 0x0a
     57e:	ea 89       	ldd	r30, Y+18	; 0x12
     580:	2b 89       	ldd	r18, Y+19	; 0x13
     582:	3c 89       	ldd	r19, Y+20	; 0x14
     584:	8b 85       	ldd	r24, Y+11	; 0x0b
     586:	9c 85       	ldd	r25, Y+12	; 0x0c
     588:	28 0f       	add	r18, r24
     58a:	39 1f       	adc	r19, r25
     58c:	2e 5f       	subi	r18, 0xFE	; 254
     58e:	3f 4f       	sbci	r19, 0xFF	; 255
     590:	17 c0       	rjmp	.+46     	; 0x5c0 <__mulsf3+0x16e>
     592:	ca 01       	movw	r24, r20
     594:	81 70       	andi	r24, 0x01	; 1
     596:	90 70       	andi	r25, 0x00	; 0
     598:	89 2b       	or	r24, r25
     59a:	61 f0       	breq	.+24     	; 0x5b4 <__mulsf3+0x162>
     59c:	16 95       	lsr	r17
     59e:	07 95       	ror	r16
     5a0:	f7 94       	ror	r15
     5a2:	e7 94       	ror	r14
     5a4:	80 e0       	ldi	r24, 0x00	; 0
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	a0 e0       	ldi	r26, 0x00	; 0
     5aa:	b0 e8       	ldi	r27, 0x80	; 128
     5ac:	e8 2a       	or	r14, r24
     5ae:	f9 2a       	or	r15, r25
     5b0:	0a 2b       	or	r16, r26
     5b2:	1b 2b       	or	r17, r27
     5b4:	76 95       	lsr	r23
     5b6:	67 95       	ror	r22
     5b8:	57 95       	ror	r21
     5ba:	47 95       	ror	r20
     5bc:	2f 5f       	subi	r18, 0xFF	; 255
     5be:	3f 4f       	sbci	r19, 0xFF	; 255
     5c0:	77 fd       	sbrc	r23, 7
     5c2:	e7 cf       	rjmp	.-50     	; 0x592 <__mulsf3+0x140>
     5c4:	0c c0       	rjmp	.+24     	; 0x5de <__mulsf3+0x18c>
     5c6:	44 0f       	add	r20, r20
     5c8:	55 1f       	adc	r21, r21
     5ca:	66 1f       	adc	r22, r22
     5cc:	77 1f       	adc	r23, r23
     5ce:	17 fd       	sbrc	r17, 7
     5d0:	41 60       	ori	r20, 0x01	; 1
     5d2:	ee 0c       	add	r14, r14
     5d4:	ff 1c       	adc	r15, r15
     5d6:	00 1f       	adc	r16, r16
     5d8:	11 1f       	adc	r17, r17
     5da:	21 50       	subi	r18, 0x01	; 1
     5dc:	30 40       	sbci	r19, 0x00	; 0
     5de:	40 30       	cpi	r20, 0x00	; 0
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	59 07       	cpc	r21, r25
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	69 07       	cpc	r22, r25
     5e8:	90 e4       	ldi	r25, 0x40	; 64
     5ea:	79 07       	cpc	r23, r25
     5ec:	60 f3       	brcs	.-40     	; 0x5c6 <__mulsf3+0x174>
     5ee:	2b 8f       	std	Y+27, r18	; 0x1b
     5f0:	3c 8f       	std	Y+28, r19	; 0x1c
     5f2:	db 01       	movw	r26, r22
     5f4:	ca 01       	movw	r24, r20
     5f6:	8f 77       	andi	r24, 0x7F	; 127
     5f8:	90 70       	andi	r25, 0x00	; 0
     5fa:	a0 70       	andi	r26, 0x00	; 0
     5fc:	b0 70       	andi	r27, 0x00	; 0
     5fe:	80 34       	cpi	r24, 0x40	; 64
     600:	91 05       	cpc	r25, r1
     602:	a1 05       	cpc	r26, r1
     604:	b1 05       	cpc	r27, r1
     606:	61 f4       	brne	.+24     	; 0x620 <__mulsf3+0x1ce>
     608:	47 fd       	sbrc	r20, 7
     60a:	0a c0       	rjmp	.+20     	; 0x620 <__mulsf3+0x1ce>
     60c:	e1 14       	cp	r14, r1
     60e:	f1 04       	cpc	r15, r1
     610:	01 05       	cpc	r16, r1
     612:	11 05       	cpc	r17, r1
     614:	29 f0       	breq	.+10     	; 0x620 <__mulsf3+0x1ce>
     616:	40 5c       	subi	r20, 0xC0	; 192
     618:	5f 4f       	sbci	r21, 0xFF	; 255
     61a:	6f 4f       	sbci	r22, 0xFF	; 255
     61c:	7f 4f       	sbci	r23, 0xFF	; 255
     61e:	40 78       	andi	r20, 0x80	; 128
     620:	1a 8e       	std	Y+26, r1	; 0x1a
     622:	fe 17       	cp	r31, r30
     624:	11 f0       	breq	.+4      	; 0x62a <__mulsf3+0x1d8>
     626:	81 e0       	ldi	r24, 0x01	; 1
     628:	8a 8f       	std	Y+26, r24	; 0x1a
     62a:	4d 8f       	std	Y+29, r20	; 0x1d
     62c:	5e 8f       	std	Y+30, r21	; 0x1e
     62e:	6f 8f       	std	Y+31, r22	; 0x1f
     630:	78 a3       	std	Y+32, r23	; 0x20
     632:	83 e0       	ldi	r24, 0x03	; 3
     634:	89 8f       	std	Y+25, r24	; 0x19
     636:	ce 01       	movw	r24, r28
     638:	49 96       	adiw	r24, 0x19	; 25
     63a:	0e 94 b3 04 	call	0x966	; 0x966 <__pack_f>
     63e:	a0 96       	adiw	r28, 0x20	; 32
     640:	e2 e1       	ldi	r30, 0x12	; 18
     642:	0c 94 4f 1a 	jmp	0x349e	; 0x349e <__epilogue_restores__>

00000646 <__divsf3>:
     646:	a8 e1       	ldi	r26, 0x18	; 24
     648:	b0 e0       	ldi	r27, 0x00	; 0
     64a:	e9 e2       	ldi	r30, 0x29	; 41
     64c:	f3 e0       	ldi	r31, 0x03	; 3
     64e:	0c 94 3b 1a 	jmp	0x3476	; 0x3476 <__prologue_saves__+0x10>
     652:	69 83       	std	Y+1, r22	; 0x01
     654:	7a 83       	std	Y+2, r23	; 0x02
     656:	8b 83       	std	Y+3, r24	; 0x03
     658:	9c 83       	std	Y+4, r25	; 0x04
     65a:	2d 83       	std	Y+5, r18	; 0x05
     65c:	3e 83       	std	Y+6, r19	; 0x06
     65e:	4f 83       	std	Y+7, r20	; 0x07
     660:	58 87       	std	Y+8, r21	; 0x08
     662:	b9 e0       	ldi	r27, 0x09	; 9
     664:	eb 2e       	mov	r14, r27
     666:	f1 2c       	mov	r15, r1
     668:	ec 0e       	add	r14, r28
     66a:	fd 1e       	adc	r15, r29
     66c:	ce 01       	movw	r24, r28
     66e:	01 96       	adiw	r24, 0x01	; 1
     670:	b7 01       	movw	r22, r14
     672:	0e 94 88 05 	call	0xb10	; 0xb10 <__unpack_f>
     676:	8e 01       	movw	r16, r28
     678:	0f 5e       	subi	r16, 0xEF	; 239
     67a:	1f 4f       	sbci	r17, 0xFF	; 255
     67c:	ce 01       	movw	r24, r28
     67e:	05 96       	adiw	r24, 0x05	; 5
     680:	b8 01       	movw	r22, r16
     682:	0e 94 88 05 	call	0xb10	; 0xb10 <__unpack_f>
     686:	29 85       	ldd	r18, Y+9	; 0x09
     688:	22 30       	cpi	r18, 0x02	; 2
     68a:	08 f4       	brcc	.+2      	; 0x68e <__divsf3+0x48>
     68c:	7e c0       	rjmp	.+252    	; 0x78a <__divsf3+0x144>
     68e:	39 89       	ldd	r19, Y+17	; 0x11
     690:	32 30       	cpi	r19, 0x02	; 2
     692:	10 f4       	brcc	.+4      	; 0x698 <__divsf3+0x52>
     694:	b8 01       	movw	r22, r16
     696:	7c c0       	rjmp	.+248    	; 0x790 <__divsf3+0x14a>
     698:	8a 85       	ldd	r24, Y+10	; 0x0a
     69a:	9a 89       	ldd	r25, Y+18	; 0x12
     69c:	89 27       	eor	r24, r25
     69e:	8a 87       	std	Y+10, r24	; 0x0a
     6a0:	24 30       	cpi	r18, 0x04	; 4
     6a2:	11 f0       	breq	.+4      	; 0x6a8 <__divsf3+0x62>
     6a4:	22 30       	cpi	r18, 0x02	; 2
     6a6:	31 f4       	brne	.+12     	; 0x6b4 <__divsf3+0x6e>
     6a8:	23 17       	cp	r18, r19
     6aa:	09 f0       	breq	.+2      	; 0x6ae <__divsf3+0x68>
     6ac:	6e c0       	rjmp	.+220    	; 0x78a <__divsf3+0x144>
     6ae:	60 e0       	ldi	r22, 0x00	; 0
     6b0:	71 e0       	ldi	r23, 0x01	; 1
     6b2:	6e c0       	rjmp	.+220    	; 0x790 <__divsf3+0x14a>
     6b4:	34 30       	cpi	r19, 0x04	; 4
     6b6:	39 f4       	brne	.+14     	; 0x6c6 <__divsf3+0x80>
     6b8:	1d 86       	std	Y+13, r1	; 0x0d
     6ba:	1e 86       	std	Y+14, r1	; 0x0e
     6bc:	1f 86       	std	Y+15, r1	; 0x0f
     6be:	18 8a       	std	Y+16, r1	; 0x10
     6c0:	1c 86       	std	Y+12, r1	; 0x0c
     6c2:	1b 86       	std	Y+11, r1	; 0x0b
     6c4:	04 c0       	rjmp	.+8      	; 0x6ce <__divsf3+0x88>
     6c6:	32 30       	cpi	r19, 0x02	; 2
     6c8:	21 f4       	brne	.+8      	; 0x6d2 <__divsf3+0x8c>
     6ca:	84 e0       	ldi	r24, 0x04	; 4
     6cc:	89 87       	std	Y+9, r24	; 0x09
     6ce:	b7 01       	movw	r22, r14
     6d0:	5f c0       	rjmp	.+190    	; 0x790 <__divsf3+0x14a>
     6d2:	2b 85       	ldd	r18, Y+11	; 0x0b
     6d4:	3c 85       	ldd	r19, Y+12	; 0x0c
     6d6:	8b 89       	ldd	r24, Y+19	; 0x13
     6d8:	9c 89       	ldd	r25, Y+20	; 0x14
     6da:	28 1b       	sub	r18, r24
     6dc:	39 0b       	sbc	r19, r25
     6de:	3c 87       	std	Y+12, r19	; 0x0c
     6e0:	2b 87       	std	Y+11, r18	; 0x0b
     6e2:	ed 84       	ldd	r14, Y+13	; 0x0d
     6e4:	fe 84       	ldd	r15, Y+14	; 0x0e
     6e6:	0f 85       	ldd	r16, Y+15	; 0x0f
     6e8:	18 89       	ldd	r17, Y+16	; 0x10
     6ea:	ad 88       	ldd	r10, Y+21	; 0x15
     6ec:	be 88       	ldd	r11, Y+22	; 0x16
     6ee:	cf 88       	ldd	r12, Y+23	; 0x17
     6f0:	d8 8c       	ldd	r13, Y+24	; 0x18
     6f2:	ea 14       	cp	r14, r10
     6f4:	fb 04       	cpc	r15, r11
     6f6:	0c 05       	cpc	r16, r12
     6f8:	1d 05       	cpc	r17, r13
     6fa:	40 f4       	brcc	.+16     	; 0x70c <__divsf3+0xc6>
     6fc:	ee 0c       	add	r14, r14
     6fe:	ff 1c       	adc	r15, r15
     700:	00 1f       	adc	r16, r16
     702:	11 1f       	adc	r17, r17
     704:	21 50       	subi	r18, 0x01	; 1
     706:	30 40       	sbci	r19, 0x00	; 0
     708:	3c 87       	std	Y+12, r19	; 0x0c
     70a:	2b 87       	std	Y+11, r18	; 0x0b
     70c:	20 e0       	ldi	r18, 0x00	; 0
     70e:	30 e0       	ldi	r19, 0x00	; 0
     710:	40 e0       	ldi	r20, 0x00	; 0
     712:	50 e0       	ldi	r21, 0x00	; 0
     714:	80 e0       	ldi	r24, 0x00	; 0
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	a0 e0       	ldi	r26, 0x00	; 0
     71a:	b0 e4       	ldi	r27, 0x40	; 64
     71c:	60 e0       	ldi	r22, 0x00	; 0
     71e:	70 e0       	ldi	r23, 0x00	; 0
     720:	ea 14       	cp	r14, r10
     722:	fb 04       	cpc	r15, r11
     724:	0c 05       	cpc	r16, r12
     726:	1d 05       	cpc	r17, r13
     728:	40 f0       	brcs	.+16     	; 0x73a <__divsf3+0xf4>
     72a:	28 2b       	or	r18, r24
     72c:	39 2b       	or	r19, r25
     72e:	4a 2b       	or	r20, r26
     730:	5b 2b       	or	r21, r27
     732:	ea 18       	sub	r14, r10
     734:	fb 08       	sbc	r15, r11
     736:	0c 09       	sbc	r16, r12
     738:	1d 09       	sbc	r17, r13
     73a:	b6 95       	lsr	r27
     73c:	a7 95       	ror	r26
     73e:	97 95       	ror	r25
     740:	87 95       	ror	r24
     742:	ee 0c       	add	r14, r14
     744:	ff 1c       	adc	r15, r15
     746:	00 1f       	adc	r16, r16
     748:	11 1f       	adc	r17, r17
     74a:	6f 5f       	subi	r22, 0xFF	; 255
     74c:	7f 4f       	sbci	r23, 0xFF	; 255
     74e:	6f 31       	cpi	r22, 0x1F	; 31
     750:	71 05       	cpc	r23, r1
     752:	31 f7       	brne	.-52     	; 0x720 <__divsf3+0xda>
     754:	da 01       	movw	r26, r20
     756:	c9 01       	movw	r24, r18
     758:	8f 77       	andi	r24, 0x7F	; 127
     75a:	90 70       	andi	r25, 0x00	; 0
     75c:	a0 70       	andi	r26, 0x00	; 0
     75e:	b0 70       	andi	r27, 0x00	; 0
     760:	80 34       	cpi	r24, 0x40	; 64
     762:	91 05       	cpc	r25, r1
     764:	a1 05       	cpc	r26, r1
     766:	b1 05       	cpc	r27, r1
     768:	61 f4       	brne	.+24     	; 0x782 <__divsf3+0x13c>
     76a:	27 fd       	sbrc	r18, 7
     76c:	0a c0       	rjmp	.+20     	; 0x782 <__divsf3+0x13c>
     76e:	e1 14       	cp	r14, r1
     770:	f1 04       	cpc	r15, r1
     772:	01 05       	cpc	r16, r1
     774:	11 05       	cpc	r17, r1
     776:	29 f0       	breq	.+10     	; 0x782 <__divsf3+0x13c>
     778:	20 5c       	subi	r18, 0xC0	; 192
     77a:	3f 4f       	sbci	r19, 0xFF	; 255
     77c:	4f 4f       	sbci	r20, 0xFF	; 255
     77e:	5f 4f       	sbci	r21, 0xFF	; 255
     780:	20 78       	andi	r18, 0x80	; 128
     782:	2d 87       	std	Y+13, r18	; 0x0d
     784:	3e 87       	std	Y+14, r19	; 0x0e
     786:	4f 87       	std	Y+15, r20	; 0x0f
     788:	58 8b       	std	Y+16, r21	; 0x10
     78a:	be 01       	movw	r22, r28
     78c:	67 5f       	subi	r22, 0xF7	; 247
     78e:	7f 4f       	sbci	r23, 0xFF	; 255
     790:	cb 01       	movw	r24, r22
     792:	0e 94 b3 04 	call	0x966	; 0x966 <__pack_f>
     796:	68 96       	adiw	r28, 0x18	; 24
     798:	ea e0       	ldi	r30, 0x0A	; 10
     79a:	0c 94 57 1a 	jmp	0x34ae	; 0x34ae <__epilogue_restores__+0x10>

0000079e <__gtsf2>:
     79e:	a8 e1       	ldi	r26, 0x18	; 24
     7a0:	b0 e0       	ldi	r27, 0x00	; 0
     7a2:	e5 ed       	ldi	r30, 0xD5	; 213
     7a4:	f3 e0       	ldi	r31, 0x03	; 3
     7a6:	0c 94 3f 1a 	jmp	0x347e	; 0x347e <__prologue_saves__+0x18>
     7aa:	69 83       	std	Y+1, r22	; 0x01
     7ac:	7a 83       	std	Y+2, r23	; 0x02
     7ae:	8b 83       	std	Y+3, r24	; 0x03
     7b0:	9c 83       	std	Y+4, r25	; 0x04
     7b2:	2d 83       	std	Y+5, r18	; 0x05
     7b4:	3e 83       	std	Y+6, r19	; 0x06
     7b6:	4f 83       	std	Y+7, r20	; 0x07
     7b8:	58 87       	std	Y+8, r21	; 0x08
     7ba:	89 e0       	ldi	r24, 0x09	; 9
     7bc:	e8 2e       	mov	r14, r24
     7be:	f1 2c       	mov	r15, r1
     7c0:	ec 0e       	add	r14, r28
     7c2:	fd 1e       	adc	r15, r29
     7c4:	ce 01       	movw	r24, r28
     7c6:	01 96       	adiw	r24, 0x01	; 1
     7c8:	b7 01       	movw	r22, r14
     7ca:	0e 94 88 05 	call	0xb10	; 0xb10 <__unpack_f>
     7ce:	8e 01       	movw	r16, r28
     7d0:	0f 5e       	subi	r16, 0xEF	; 239
     7d2:	1f 4f       	sbci	r17, 0xFF	; 255
     7d4:	ce 01       	movw	r24, r28
     7d6:	05 96       	adiw	r24, 0x05	; 5
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 88 05 	call	0xb10	; 0xb10 <__unpack_f>
     7de:	89 85       	ldd	r24, Y+9	; 0x09
     7e0:	82 30       	cpi	r24, 0x02	; 2
     7e2:	40 f0       	brcs	.+16     	; 0x7f4 <__gtsf2+0x56>
     7e4:	89 89       	ldd	r24, Y+17	; 0x11
     7e6:	82 30       	cpi	r24, 0x02	; 2
     7e8:	28 f0       	brcs	.+10     	; 0x7f4 <__gtsf2+0x56>
     7ea:	c7 01       	movw	r24, r14
     7ec:	b8 01       	movw	r22, r16
     7ee:	0e 94 00 06 	call	0xc00	; 0xc00 <__fpcmp_parts_f>
     7f2:	01 c0       	rjmp	.+2      	; 0x7f6 <__gtsf2+0x58>
     7f4:	8f ef       	ldi	r24, 0xFF	; 255
     7f6:	68 96       	adiw	r28, 0x18	; 24
     7f8:	e6 e0       	ldi	r30, 0x06	; 6
     7fa:	0c 94 5b 1a 	jmp	0x34b6	; 0x34b6 <__epilogue_restores__+0x18>

000007fe <__gesf2>:
     7fe:	a8 e1       	ldi	r26, 0x18	; 24
     800:	b0 e0       	ldi	r27, 0x00	; 0
     802:	e5 e0       	ldi	r30, 0x05	; 5
     804:	f4 e0       	ldi	r31, 0x04	; 4
     806:	0c 94 3f 1a 	jmp	0x347e	; 0x347e <__prologue_saves__+0x18>
     80a:	69 83       	std	Y+1, r22	; 0x01
     80c:	7a 83       	std	Y+2, r23	; 0x02
     80e:	8b 83       	std	Y+3, r24	; 0x03
     810:	9c 83       	std	Y+4, r25	; 0x04
     812:	2d 83       	std	Y+5, r18	; 0x05
     814:	3e 83       	std	Y+6, r19	; 0x06
     816:	4f 83       	std	Y+7, r20	; 0x07
     818:	58 87       	std	Y+8, r21	; 0x08
     81a:	89 e0       	ldi	r24, 0x09	; 9
     81c:	e8 2e       	mov	r14, r24
     81e:	f1 2c       	mov	r15, r1
     820:	ec 0e       	add	r14, r28
     822:	fd 1e       	adc	r15, r29
     824:	ce 01       	movw	r24, r28
     826:	01 96       	adiw	r24, 0x01	; 1
     828:	b7 01       	movw	r22, r14
     82a:	0e 94 88 05 	call	0xb10	; 0xb10 <__unpack_f>
     82e:	8e 01       	movw	r16, r28
     830:	0f 5e       	subi	r16, 0xEF	; 239
     832:	1f 4f       	sbci	r17, 0xFF	; 255
     834:	ce 01       	movw	r24, r28
     836:	05 96       	adiw	r24, 0x05	; 5
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 88 05 	call	0xb10	; 0xb10 <__unpack_f>
     83e:	89 85       	ldd	r24, Y+9	; 0x09
     840:	82 30       	cpi	r24, 0x02	; 2
     842:	40 f0       	brcs	.+16     	; 0x854 <__gesf2+0x56>
     844:	89 89       	ldd	r24, Y+17	; 0x11
     846:	82 30       	cpi	r24, 0x02	; 2
     848:	28 f0       	brcs	.+10     	; 0x854 <__gesf2+0x56>
     84a:	c7 01       	movw	r24, r14
     84c:	b8 01       	movw	r22, r16
     84e:	0e 94 00 06 	call	0xc00	; 0xc00 <__fpcmp_parts_f>
     852:	01 c0       	rjmp	.+2      	; 0x856 <__gesf2+0x58>
     854:	8f ef       	ldi	r24, 0xFF	; 255
     856:	68 96       	adiw	r28, 0x18	; 24
     858:	e6 e0       	ldi	r30, 0x06	; 6
     85a:	0c 94 5b 1a 	jmp	0x34b6	; 0x34b6 <__epilogue_restores__+0x18>

0000085e <__ltsf2>:
     85e:	a8 e1       	ldi	r26, 0x18	; 24
     860:	b0 e0       	ldi	r27, 0x00	; 0
     862:	e5 e3       	ldi	r30, 0x35	; 53
     864:	f4 e0       	ldi	r31, 0x04	; 4
     866:	0c 94 3f 1a 	jmp	0x347e	; 0x347e <__prologue_saves__+0x18>
     86a:	69 83       	std	Y+1, r22	; 0x01
     86c:	7a 83       	std	Y+2, r23	; 0x02
     86e:	8b 83       	std	Y+3, r24	; 0x03
     870:	9c 83       	std	Y+4, r25	; 0x04
     872:	2d 83       	std	Y+5, r18	; 0x05
     874:	3e 83       	std	Y+6, r19	; 0x06
     876:	4f 83       	std	Y+7, r20	; 0x07
     878:	58 87       	std	Y+8, r21	; 0x08
     87a:	89 e0       	ldi	r24, 0x09	; 9
     87c:	e8 2e       	mov	r14, r24
     87e:	f1 2c       	mov	r15, r1
     880:	ec 0e       	add	r14, r28
     882:	fd 1e       	adc	r15, r29
     884:	ce 01       	movw	r24, r28
     886:	01 96       	adiw	r24, 0x01	; 1
     888:	b7 01       	movw	r22, r14
     88a:	0e 94 88 05 	call	0xb10	; 0xb10 <__unpack_f>
     88e:	8e 01       	movw	r16, r28
     890:	0f 5e       	subi	r16, 0xEF	; 239
     892:	1f 4f       	sbci	r17, 0xFF	; 255
     894:	ce 01       	movw	r24, r28
     896:	05 96       	adiw	r24, 0x05	; 5
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 88 05 	call	0xb10	; 0xb10 <__unpack_f>
     89e:	89 85       	ldd	r24, Y+9	; 0x09
     8a0:	82 30       	cpi	r24, 0x02	; 2
     8a2:	40 f0       	brcs	.+16     	; 0x8b4 <__ltsf2+0x56>
     8a4:	89 89       	ldd	r24, Y+17	; 0x11
     8a6:	82 30       	cpi	r24, 0x02	; 2
     8a8:	28 f0       	brcs	.+10     	; 0x8b4 <__ltsf2+0x56>
     8aa:	c7 01       	movw	r24, r14
     8ac:	b8 01       	movw	r22, r16
     8ae:	0e 94 00 06 	call	0xc00	; 0xc00 <__fpcmp_parts_f>
     8b2:	01 c0       	rjmp	.+2      	; 0x8b6 <__ltsf2+0x58>
     8b4:	81 e0       	ldi	r24, 0x01	; 1
     8b6:	68 96       	adiw	r28, 0x18	; 24
     8b8:	e6 e0       	ldi	r30, 0x06	; 6
     8ba:	0c 94 5b 1a 	jmp	0x34b6	; 0x34b6 <__epilogue_restores__+0x18>

000008be <__fixsfsi>:
     8be:	ac e0       	ldi	r26, 0x0C	; 12
     8c0:	b0 e0       	ldi	r27, 0x00	; 0
     8c2:	e5 e6       	ldi	r30, 0x65	; 101
     8c4:	f4 e0       	ldi	r31, 0x04	; 4
     8c6:	0c 94 43 1a 	jmp	0x3486	; 0x3486 <__prologue_saves__+0x20>
     8ca:	69 83       	std	Y+1, r22	; 0x01
     8cc:	7a 83       	std	Y+2, r23	; 0x02
     8ce:	8b 83       	std	Y+3, r24	; 0x03
     8d0:	9c 83       	std	Y+4, r25	; 0x04
     8d2:	ce 01       	movw	r24, r28
     8d4:	01 96       	adiw	r24, 0x01	; 1
     8d6:	be 01       	movw	r22, r28
     8d8:	6b 5f       	subi	r22, 0xFB	; 251
     8da:	7f 4f       	sbci	r23, 0xFF	; 255
     8dc:	0e 94 88 05 	call	0xb10	; 0xb10 <__unpack_f>
     8e0:	8d 81       	ldd	r24, Y+5	; 0x05
     8e2:	82 30       	cpi	r24, 0x02	; 2
     8e4:	61 f1       	breq	.+88     	; 0x93e <__stack+0x3f>
     8e6:	82 30       	cpi	r24, 0x02	; 2
     8e8:	50 f1       	brcs	.+84     	; 0x93e <__stack+0x3f>
     8ea:	84 30       	cpi	r24, 0x04	; 4
     8ec:	21 f4       	brne	.+8      	; 0x8f6 <__fixsfsi+0x38>
     8ee:	8e 81       	ldd	r24, Y+6	; 0x06
     8f0:	88 23       	and	r24, r24
     8f2:	51 f1       	breq	.+84     	; 0x948 <__stack+0x49>
     8f4:	2e c0       	rjmp	.+92     	; 0x952 <__stack+0x53>
     8f6:	2f 81       	ldd	r18, Y+7	; 0x07
     8f8:	38 85       	ldd	r19, Y+8	; 0x08
     8fa:	37 fd       	sbrc	r19, 7
     8fc:	20 c0       	rjmp	.+64     	; 0x93e <__stack+0x3f>
     8fe:	6e 81       	ldd	r22, Y+6	; 0x06
     900:	2f 31       	cpi	r18, 0x1F	; 31
     902:	31 05       	cpc	r19, r1
     904:	1c f0       	brlt	.+6      	; 0x90c <__stack+0xd>
     906:	66 23       	and	r22, r22
     908:	f9 f0       	breq	.+62     	; 0x948 <__stack+0x49>
     90a:	23 c0       	rjmp	.+70     	; 0x952 <__stack+0x53>
     90c:	8e e1       	ldi	r24, 0x1E	; 30
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	82 1b       	sub	r24, r18
     912:	93 0b       	sbc	r25, r19
     914:	29 85       	ldd	r18, Y+9	; 0x09
     916:	3a 85       	ldd	r19, Y+10	; 0x0a
     918:	4b 85       	ldd	r20, Y+11	; 0x0b
     91a:	5c 85       	ldd	r21, Y+12	; 0x0c
     91c:	04 c0       	rjmp	.+8      	; 0x926 <__stack+0x27>
     91e:	56 95       	lsr	r21
     920:	47 95       	ror	r20
     922:	37 95       	ror	r19
     924:	27 95       	ror	r18
     926:	8a 95       	dec	r24
     928:	d2 f7       	brpl	.-12     	; 0x91e <__stack+0x1f>
     92a:	66 23       	and	r22, r22
     92c:	b1 f0       	breq	.+44     	; 0x95a <__stack+0x5b>
     92e:	50 95       	com	r21
     930:	40 95       	com	r20
     932:	30 95       	com	r19
     934:	21 95       	neg	r18
     936:	3f 4f       	sbci	r19, 0xFF	; 255
     938:	4f 4f       	sbci	r20, 0xFF	; 255
     93a:	5f 4f       	sbci	r21, 0xFF	; 255
     93c:	0e c0       	rjmp	.+28     	; 0x95a <__stack+0x5b>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e0       	ldi	r21, 0x00	; 0
     946:	09 c0       	rjmp	.+18     	; 0x95a <__stack+0x5b>
     948:	2f ef       	ldi	r18, 0xFF	; 255
     94a:	3f ef       	ldi	r19, 0xFF	; 255
     94c:	4f ef       	ldi	r20, 0xFF	; 255
     94e:	5f e7       	ldi	r21, 0x7F	; 127
     950:	04 c0       	rjmp	.+8      	; 0x95a <__stack+0x5b>
     952:	20 e0       	ldi	r18, 0x00	; 0
     954:	30 e0       	ldi	r19, 0x00	; 0
     956:	40 e0       	ldi	r20, 0x00	; 0
     958:	50 e8       	ldi	r21, 0x80	; 128
     95a:	b9 01       	movw	r22, r18
     95c:	ca 01       	movw	r24, r20
     95e:	2c 96       	adiw	r28, 0x0c	; 12
     960:	e2 e0       	ldi	r30, 0x02	; 2
     962:	0c 94 5f 1a 	jmp	0x34be	; 0x34be <__epilogue_restores__+0x20>

00000966 <__pack_f>:
     966:	df 92       	push	r13
     968:	ef 92       	push	r14
     96a:	ff 92       	push	r15
     96c:	0f 93       	push	r16
     96e:	1f 93       	push	r17
     970:	fc 01       	movw	r30, r24
     972:	e4 80       	ldd	r14, Z+4	; 0x04
     974:	f5 80       	ldd	r15, Z+5	; 0x05
     976:	06 81       	ldd	r16, Z+6	; 0x06
     978:	17 81       	ldd	r17, Z+7	; 0x07
     97a:	d1 80       	ldd	r13, Z+1	; 0x01
     97c:	80 81       	ld	r24, Z
     97e:	82 30       	cpi	r24, 0x02	; 2
     980:	48 f4       	brcc	.+18     	; 0x994 <__pack_f+0x2e>
     982:	80 e0       	ldi	r24, 0x00	; 0
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	a0 e1       	ldi	r26, 0x10	; 16
     988:	b0 e0       	ldi	r27, 0x00	; 0
     98a:	e8 2a       	or	r14, r24
     98c:	f9 2a       	or	r15, r25
     98e:	0a 2b       	or	r16, r26
     990:	1b 2b       	or	r17, r27
     992:	a5 c0       	rjmp	.+330    	; 0xade <__pack_f+0x178>
     994:	84 30       	cpi	r24, 0x04	; 4
     996:	09 f4       	brne	.+2      	; 0x99a <__pack_f+0x34>
     998:	9f c0       	rjmp	.+318    	; 0xad8 <__pack_f+0x172>
     99a:	82 30       	cpi	r24, 0x02	; 2
     99c:	21 f4       	brne	.+8      	; 0x9a6 <__pack_f+0x40>
     99e:	ee 24       	eor	r14, r14
     9a0:	ff 24       	eor	r15, r15
     9a2:	87 01       	movw	r16, r14
     9a4:	05 c0       	rjmp	.+10     	; 0x9b0 <__pack_f+0x4a>
     9a6:	e1 14       	cp	r14, r1
     9a8:	f1 04       	cpc	r15, r1
     9aa:	01 05       	cpc	r16, r1
     9ac:	11 05       	cpc	r17, r1
     9ae:	19 f4       	brne	.+6      	; 0x9b6 <__pack_f+0x50>
     9b0:	e0 e0       	ldi	r30, 0x00	; 0
     9b2:	f0 e0       	ldi	r31, 0x00	; 0
     9b4:	96 c0       	rjmp	.+300    	; 0xae2 <__pack_f+0x17c>
     9b6:	62 81       	ldd	r22, Z+2	; 0x02
     9b8:	73 81       	ldd	r23, Z+3	; 0x03
     9ba:	9f ef       	ldi	r25, 0xFF	; 255
     9bc:	62 38       	cpi	r22, 0x82	; 130
     9be:	79 07       	cpc	r23, r25
     9c0:	0c f0       	brlt	.+2      	; 0x9c4 <__pack_f+0x5e>
     9c2:	5b c0       	rjmp	.+182    	; 0xa7a <__pack_f+0x114>
     9c4:	22 e8       	ldi	r18, 0x82	; 130
     9c6:	3f ef       	ldi	r19, 0xFF	; 255
     9c8:	26 1b       	sub	r18, r22
     9ca:	37 0b       	sbc	r19, r23
     9cc:	2a 31       	cpi	r18, 0x1A	; 26
     9ce:	31 05       	cpc	r19, r1
     9d0:	2c f0       	brlt	.+10     	; 0x9dc <__pack_f+0x76>
     9d2:	20 e0       	ldi	r18, 0x00	; 0
     9d4:	30 e0       	ldi	r19, 0x00	; 0
     9d6:	40 e0       	ldi	r20, 0x00	; 0
     9d8:	50 e0       	ldi	r21, 0x00	; 0
     9da:	2a c0       	rjmp	.+84     	; 0xa30 <__pack_f+0xca>
     9dc:	b8 01       	movw	r22, r16
     9de:	a7 01       	movw	r20, r14
     9e0:	02 2e       	mov	r0, r18
     9e2:	04 c0       	rjmp	.+8      	; 0x9ec <__pack_f+0x86>
     9e4:	76 95       	lsr	r23
     9e6:	67 95       	ror	r22
     9e8:	57 95       	ror	r21
     9ea:	47 95       	ror	r20
     9ec:	0a 94       	dec	r0
     9ee:	d2 f7       	brpl	.-12     	; 0x9e4 <__pack_f+0x7e>
     9f0:	81 e0       	ldi	r24, 0x01	; 1
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	a0 e0       	ldi	r26, 0x00	; 0
     9f6:	b0 e0       	ldi	r27, 0x00	; 0
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__pack_f+0x9c>
     9fa:	88 0f       	add	r24, r24
     9fc:	99 1f       	adc	r25, r25
     9fe:	aa 1f       	adc	r26, r26
     a00:	bb 1f       	adc	r27, r27
     a02:	2a 95       	dec	r18
     a04:	d2 f7       	brpl	.-12     	; 0x9fa <__pack_f+0x94>
     a06:	01 97       	sbiw	r24, 0x01	; 1
     a08:	a1 09       	sbc	r26, r1
     a0a:	b1 09       	sbc	r27, r1
     a0c:	8e 21       	and	r24, r14
     a0e:	9f 21       	and	r25, r15
     a10:	a0 23       	and	r26, r16
     a12:	b1 23       	and	r27, r17
     a14:	00 97       	sbiw	r24, 0x00	; 0
     a16:	a1 05       	cpc	r26, r1
     a18:	b1 05       	cpc	r27, r1
     a1a:	21 f0       	breq	.+8      	; 0xa24 <__pack_f+0xbe>
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	a0 e0       	ldi	r26, 0x00	; 0
     a22:	b0 e0       	ldi	r27, 0x00	; 0
     a24:	9a 01       	movw	r18, r20
     a26:	ab 01       	movw	r20, r22
     a28:	28 2b       	or	r18, r24
     a2a:	39 2b       	or	r19, r25
     a2c:	4a 2b       	or	r20, r26
     a2e:	5b 2b       	or	r21, r27
     a30:	da 01       	movw	r26, r20
     a32:	c9 01       	movw	r24, r18
     a34:	8f 77       	andi	r24, 0x7F	; 127
     a36:	90 70       	andi	r25, 0x00	; 0
     a38:	a0 70       	andi	r26, 0x00	; 0
     a3a:	b0 70       	andi	r27, 0x00	; 0
     a3c:	80 34       	cpi	r24, 0x40	; 64
     a3e:	91 05       	cpc	r25, r1
     a40:	a1 05       	cpc	r26, r1
     a42:	b1 05       	cpc	r27, r1
     a44:	39 f4       	brne	.+14     	; 0xa54 <__pack_f+0xee>
     a46:	27 ff       	sbrs	r18, 7
     a48:	09 c0       	rjmp	.+18     	; 0xa5c <__pack_f+0xf6>
     a4a:	20 5c       	subi	r18, 0xC0	; 192
     a4c:	3f 4f       	sbci	r19, 0xFF	; 255
     a4e:	4f 4f       	sbci	r20, 0xFF	; 255
     a50:	5f 4f       	sbci	r21, 0xFF	; 255
     a52:	04 c0       	rjmp	.+8      	; 0xa5c <__pack_f+0xf6>
     a54:	21 5c       	subi	r18, 0xC1	; 193
     a56:	3f 4f       	sbci	r19, 0xFF	; 255
     a58:	4f 4f       	sbci	r20, 0xFF	; 255
     a5a:	5f 4f       	sbci	r21, 0xFF	; 255
     a5c:	e0 e0       	ldi	r30, 0x00	; 0
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	20 30       	cpi	r18, 0x00	; 0
     a62:	a0 e0       	ldi	r26, 0x00	; 0
     a64:	3a 07       	cpc	r19, r26
     a66:	a0 e0       	ldi	r26, 0x00	; 0
     a68:	4a 07       	cpc	r20, r26
     a6a:	a0 e4       	ldi	r26, 0x40	; 64
     a6c:	5a 07       	cpc	r21, r26
     a6e:	10 f0       	brcs	.+4      	; 0xa74 <__pack_f+0x10e>
     a70:	e1 e0       	ldi	r30, 0x01	; 1
     a72:	f0 e0       	ldi	r31, 0x00	; 0
     a74:	79 01       	movw	r14, r18
     a76:	8a 01       	movw	r16, r20
     a78:	27 c0       	rjmp	.+78     	; 0xac8 <__pack_f+0x162>
     a7a:	60 38       	cpi	r22, 0x80	; 128
     a7c:	71 05       	cpc	r23, r1
     a7e:	64 f5       	brge	.+88     	; 0xad8 <__pack_f+0x172>
     a80:	fb 01       	movw	r30, r22
     a82:	e1 58       	subi	r30, 0x81	; 129
     a84:	ff 4f       	sbci	r31, 0xFF	; 255
     a86:	d8 01       	movw	r26, r16
     a88:	c7 01       	movw	r24, r14
     a8a:	8f 77       	andi	r24, 0x7F	; 127
     a8c:	90 70       	andi	r25, 0x00	; 0
     a8e:	a0 70       	andi	r26, 0x00	; 0
     a90:	b0 70       	andi	r27, 0x00	; 0
     a92:	80 34       	cpi	r24, 0x40	; 64
     a94:	91 05       	cpc	r25, r1
     a96:	a1 05       	cpc	r26, r1
     a98:	b1 05       	cpc	r27, r1
     a9a:	39 f4       	brne	.+14     	; 0xaaa <__pack_f+0x144>
     a9c:	e7 fe       	sbrs	r14, 7
     a9e:	0d c0       	rjmp	.+26     	; 0xaba <__pack_f+0x154>
     aa0:	80 e4       	ldi	r24, 0x40	; 64
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <__pack_f+0x14c>
     aaa:	8f e3       	ldi	r24, 0x3F	; 63
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	a0 e0       	ldi	r26, 0x00	; 0
     ab0:	b0 e0       	ldi	r27, 0x00	; 0
     ab2:	e8 0e       	add	r14, r24
     ab4:	f9 1e       	adc	r15, r25
     ab6:	0a 1f       	adc	r16, r26
     ab8:	1b 1f       	adc	r17, r27
     aba:	17 ff       	sbrs	r17, 7
     abc:	05 c0       	rjmp	.+10     	; 0xac8 <__pack_f+0x162>
     abe:	16 95       	lsr	r17
     ac0:	07 95       	ror	r16
     ac2:	f7 94       	ror	r15
     ac4:	e7 94       	ror	r14
     ac6:	31 96       	adiw	r30, 0x01	; 1
     ac8:	87 e0       	ldi	r24, 0x07	; 7
     aca:	16 95       	lsr	r17
     acc:	07 95       	ror	r16
     ace:	f7 94       	ror	r15
     ad0:	e7 94       	ror	r14
     ad2:	8a 95       	dec	r24
     ad4:	d1 f7       	brne	.-12     	; 0xaca <__pack_f+0x164>
     ad6:	05 c0       	rjmp	.+10     	; 0xae2 <__pack_f+0x17c>
     ad8:	ee 24       	eor	r14, r14
     ada:	ff 24       	eor	r15, r15
     adc:	87 01       	movw	r16, r14
     ade:	ef ef       	ldi	r30, 0xFF	; 255
     ae0:	f0 e0       	ldi	r31, 0x00	; 0
     ae2:	6e 2f       	mov	r22, r30
     ae4:	67 95       	ror	r22
     ae6:	66 27       	eor	r22, r22
     ae8:	67 95       	ror	r22
     aea:	90 2f       	mov	r25, r16
     aec:	9f 77       	andi	r25, 0x7F	; 127
     aee:	d7 94       	ror	r13
     af0:	dd 24       	eor	r13, r13
     af2:	d7 94       	ror	r13
     af4:	8e 2f       	mov	r24, r30
     af6:	86 95       	lsr	r24
     af8:	49 2f       	mov	r20, r25
     afa:	46 2b       	or	r20, r22
     afc:	58 2f       	mov	r21, r24
     afe:	5d 29       	or	r21, r13
     b00:	b7 01       	movw	r22, r14
     b02:	ca 01       	movw	r24, r20
     b04:	1f 91       	pop	r17
     b06:	0f 91       	pop	r16
     b08:	ff 90       	pop	r15
     b0a:	ef 90       	pop	r14
     b0c:	df 90       	pop	r13
     b0e:	08 95       	ret

00000b10 <__unpack_f>:
     b10:	fc 01       	movw	r30, r24
     b12:	db 01       	movw	r26, r22
     b14:	40 81       	ld	r20, Z
     b16:	51 81       	ldd	r21, Z+1	; 0x01
     b18:	22 81       	ldd	r18, Z+2	; 0x02
     b1a:	62 2f       	mov	r22, r18
     b1c:	6f 77       	andi	r22, 0x7F	; 127
     b1e:	70 e0       	ldi	r23, 0x00	; 0
     b20:	22 1f       	adc	r18, r18
     b22:	22 27       	eor	r18, r18
     b24:	22 1f       	adc	r18, r18
     b26:	93 81       	ldd	r25, Z+3	; 0x03
     b28:	89 2f       	mov	r24, r25
     b2a:	88 0f       	add	r24, r24
     b2c:	82 2b       	or	r24, r18
     b2e:	28 2f       	mov	r18, r24
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	99 1f       	adc	r25, r25
     b34:	99 27       	eor	r25, r25
     b36:	99 1f       	adc	r25, r25
     b38:	11 96       	adiw	r26, 0x01	; 1
     b3a:	9c 93       	st	X, r25
     b3c:	11 97       	sbiw	r26, 0x01	; 1
     b3e:	21 15       	cp	r18, r1
     b40:	31 05       	cpc	r19, r1
     b42:	a9 f5       	brne	.+106    	; 0xbae <__unpack_f+0x9e>
     b44:	41 15       	cp	r20, r1
     b46:	51 05       	cpc	r21, r1
     b48:	61 05       	cpc	r22, r1
     b4a:	71 05       	cpc	r23, r1
     b4c:	11 f4       	brne	.+4      	; 0xb52 <__unpack_f+0x42>
     b4e:	82 e0       	ldi	r24, 0x02	; 2
     b50:	37 c0       	rjmp	.+110    	; 0xbc0 <__unpack_f+0xb0>
     b52:	82 e8       	ldi	r24, 0x82	; 130
     b54:	9f ef       	ldi	r25, 0xFF	; 255
     b56:	13 96       	adiw	r26, 0x03	; 3
     b58:	9c 93       	st	X, r25
     b5a:	8e 93       	st	-X, r24
     b5c:	12 97       	sbiw	r26, 0x02	; 2
     b5e:	9a 01       	movw	r18, r20
     b60:	ab 01       	movw	r20, r22
     b62:	67 e0       	ldi	r22, 0x07	; 7
     b64:	22 0f       	add	r18, r18
     b66:	33 1f       	adc	r19, r19
     b68:	44 1f       	adc	r20, r20
     b6a:	55 1f       	adc	r21, r21
     b6c:	6a 95       	dec	r22
     b6e:	d1 f7       	brne	.-12     	; 0xb64 <__unpack_f+0x54>
     b70:	83 e0       	ldi	r24, 0x03	; 3
     b72:	8c 93       	st	X, r24
     b74:	0d c0       	rjmp	.+26     	; 0xb90 <__unpack_f+0x80>
     b76:	22 0f       	add	r18, r18
     b78:	33 1f       	adc	r19, r19
     b7a:	44 1f       	adc	r20, r20
     b7c:	55 1f       	adc	r21, r21
     b7e:	12 96       	adiw	r26, 0x02	; 2
     b80:	8d 91       	ld	r24, X+
     b82:	9c 91       	ld	r25, X
     b84:	13 97       	sbiw	r26, 0x03	; 3
     b86:	01 97       	sbiw	r24, 0x01	; 1
     b88:	13 96       	adiw	r26, 0x03	; 3
     b8a:	9c 93       	st	X, r25
     b8c:	8e 93       	st	-X, r24
     b8e:	12 97       	sbiw	r26, 0x02	; 2
     b90:	20 30       	cpi	r18, 0x00	; 0
     b92:	80 e0       	ldi	r24, 0x00	; 0
     b94:	38 07       	cpc	r19, r24
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	48 07       	cpc	r20, r24
     b9a:	80 e4       	ldi	r24, 0x40	; 64
     b9c:	58 07       	cpc	r21, r24
     b9e:	58 f3       	brcs	.-42     	; 0xb76 <__unpack_f+0x66>
     ba0:	14 96       	adiw	r26, 0x04	; 4
     ba2:	2d 93       	st	X+, r18
     ba4:	3d 93       	st	X+, r19
     ba6:	4d 93       	st	X+, r20
     ba8:	5c 93       	st	X, r21
     baa:	17 97       	sbiw	r26, 0x07	; 7
     bac:	08 95       	ret
     bae:	2f 3f       	cpi	r18, 0xFF	; 255
     bb0:	31 05       	cpc	r19, r1
     bb2:	79 f4       	brne	.+30     	; 0xbd2 <__unpack_f+0xc2>
     bb4:	41 15       	cp	r20, r1
     bb6:	51 05       	cpc	r21, r1
     bb8:	61 05       	cpc	r22, r1
     bba:	71 05       	cpc	r23, r1
     bbc:	19 f4       	brne	.+6      	; 0xbc4 <__unpack_f+0xb4>
     bbe:	84 e0       	ldi	r24, 0x04	; 4
     bc0:	8c 93       	st	X, r24
     bc2:	08 95       	ret
     bc4:	64 ff       	sbrs	r22, 4
     bc6:	03 c0       	rjmp	.+6      	; 0xbce <__unpack_f+0xbe>
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	8c 93       	st	X, r24
     bcc:	12 c0       	rjmp	.+36     	; 0xbf2 <__unpack_f+0xe2>
     bce:	1c 92       	st	X, r1
     bd0:	10 c0       	rjmp	.+32     	; 0xbf2 <__unpack_f+0xe2>
     bd2:	2f 57       	subi	r18, 0x7F	; 127
     bd4:	30 40       	sbci	r19, 0x00	; 0
     bd6:	13 96       	adiw	r26, 0x03	; 3
     bd8:	3c 93       	st	X, r19
     bda:	2e 93       	st	-X, r18
     bdc:	12 97       	sbiw	r26, 0x02	; 2
     bde:	83 e0       	ldi	r24, 0x03	; 3
     be0:	8c 93       	st	X, r24
     be2:	87 e0       	ldi	r24, 0x07	; 7
     be4:	44 0f       	add	r20, r20
     be6:	55 1f       	adc	r21, r21
     be8:	66 1f       	adc	r22, r22
     bea:	77 1f       	adc	r23, r23
     bec:	8a 95       	dec	r24
     bee:	d1 f7       	brne	.-12     	; 0xbe4 <__unpack_f+0xd4>
     bf0:	70 64       	ori	r23, 0x40	; 64
     bf2:	14 96       	adiw	r26, 0x04	; 4
     bf4:	4d 93       	st	X+, r20
     bf6:	5d 93       	st	X+, r21
     bf8:	6d 93       	st	X+, r22
     bfa:	7c 93       	st	X, r23
     bfc:	17 97       	sbiw	r26, 0x07	; 7
     bfe:	08 95       	ret

00000c00 <__fpcmp_parts_f>:
     c00:	1f 93       	push	r17
     c02:	dc 01       	movw	r26, r24
     c04:	fb 01       	movw	r30, r22
     c06:	9c 91       	ld	r25, X
     c08:	92 30       	cpi	r25, 0x02	; 2
     c0a:	08 f4       	brcc	.+2      	; 0xc0e <__fpcmp_parts_f+0xe>
     c0c:	47 c0       	rjmp	.+142    	; 0xc9c <__fpcmp_parts_f+0x9c>
     c0e:	80 81       	ld	r24, Z
     c10:	82 30       	cpi	r24, 0x02	; 2
     c12:	08 f4       	brcc	.+2      	; 0xc16 <__fpcmp_parts_f+0x16>
     c14:	43 c0       	rjmp	.+134    	; 0xc9c <__fpcmp_parts_f+0x9c>
     c16:	94 30       	cpi	r25, 0x04	; 4
     c18:	51 f4       	brne	.+20     	; 0xc2e <__fpcmp_parts_f+0x2e>
     c1a:	11 96       	adiw	r26, 0x01	; 1
     c1c:	1c 91       	ld	r17, X
     c1e:	84 30       	cpi	r24, 0x04	; 4
     c20:	99 f5       	brne	.+102    	; 0xc88 <__fpcmp_parts_f+0x88>
     c22:	81 81       	ldd	r24, Z+1	; 0x01
     c24:	68 2f       	mov	r22, r24
     c26:	70 e0       	ldi	r23, 0x00	; 0
     c28:	61 1b       	sub	r22, r17
     c2a:	71 09       	sbc	r23, r1
     c2c:	3f c0       	rjmp	.+126    	; 0xcac <__fpcmp_parts_f+0xac>
     c2e:	84 30       	cpi	r24, 0x04	; 4
     c30:	21 f0       	breq	.+8      	; 0xc3a <__fpcmp_parts_f+0x3a>
     c32:	92 30       	cpi	r25, 0x02	; 2
     c34:	31 f4       	brne	.+12     	; 0xc42 <__fpcmp_parts_f+0x42>
     c36:	82 30       	cpi	r24, 0x02	; 2
     c38:	b9 f1       	breq	.+110    	; 0xca8 <__fpcmp_parts_f+0xa8>
     c3a:	81 81       	ldd	r24, Z+1	; 0x01
     c3c:	88 23       	and	r24, r24
     c3e:	89 f1       	breq	.+98     	; 0xca2 <__fpcmp_parts_f+0xa2>
     c40:	2d c0       	rjmp	.+90     	; 0xc9c <__fpcmp_parts_f+0x9c>
     c42:	11 96       	adiw	r26, 0x01	; 1
     c44:	1c 91       	ld	r17, X
     c46:	11 97       	sbiw	r26, 0x01	; 1
     c48:	82 30       	cpi	r24, 0x02	; 2
     c4a:	f1 f0       	breq	.+60     	; 0xc88 <__fpcmp_parts_f+0x88>
     c4c:	81 81       	ldd	r24, Z+1	; 0x01
     c4e:	18 17       	cp	r17, r24
     c50:	d9 f4       	brne	.+54     	; 0xc88 <__fpcmp_parts_f+0x88>
     c52:	12 96       	adiw	r26, 0x02	; 2
     c54:	2d 91       	ld	r18, X+
     c56:	3c 91       	ld	r19, X
     c58:	13 97       	sbiw	r26, 0x03	; 3
     c5a:	82 81       	ldd	r24, Z+2	; 0x02
     c5c:	93 81       	ldd	r25, Z+3	; 0x03
     c5e:	82 17       	cp	r24, r18
     c60:	93 07       	cpc	r25, r19
     c62:	94 f0       	brlt	.+36     	; 0xc88 <__fpcmp_parts_f+0x88>
     c64:	28 17       	cp	r18, r24
     c66:	39 07       	cpc	r19, r25
     c68:	bc f0       	brlt	.+46     	; 0xc98 <__fpcmp_parts_f+0x98>
     c6a:	14 96       	adiw	r26, 0x04	; 4
     c6c:	8d 91       	ld	r24, X+
     c6e:	9d 91       	ld	r25, X+
     c70:	0d 90       	ld	r0, X+
     c72:	bc 91       	ld	r27, X
     c74:	a0 2d       	mov	r26, r0
     c76:	24 81       	ldd	r18, Z+4	; 0x04
     c78:	35 81       	ldd	r19, Z+5	; 0x05
     c7a:	46 81       	ldd	r20, Z+6	; 0x06
     c7c:	57 81       	ldd	r21, Z+7	; 0x07
     c7e:	28 17       	cp	r18, r24
     c80:	39 07       	cpc	r19, r25
     c82:	4a 07       	cpc	r20, r26
     c84:	5b 07       	cpc	r21, r27
     c86:	18 f4       	brcc	.+6      	; 0xc8e <__fpcmp_parts_f+0x8e>
     c88:	11 23       	and	r17, r17
     c8a:	41 f0       	breq	.+16     	; 0xc9c <__fpcmp_parts_f+0x9c>
     c8c:	0a c0       	rjmp	.+20     	; 0xca2 <__fpcmp_parts_f+0xa2>
     c8e:	82 17       	cp	r24, r18
     c90:	93 07       	cpc	r25, r19
     c92:	a4 07       	cpc	r26, r20
     c94:	b5 07       	cpc	r27, r21
     c96:	40 f4       	brcc	.+16     	; 0xca8 <__fpcmp_parts_f+0xa8>
     c98:	11 23       	and	r17, r17
     c9a:	19 f0       	breq	.+6      	; 0xca2 <__fpcmp_parts_f+0xa2>
     c9c:	61 e0       	ldi	r22, 0x01	; 1
     c9e:	70 e0       	ldi	r23, 0x00	; 0
     ca0:	05 c0       	rjmp	.+10     	; 0xcac <__fpcmp_parts_f+0xac>
     ca2:	6f ef       	ldi	r22, 0xFF	; 255
     ca4:	7f ef       	ldi	r23, 0xFF	; 255
     ca6:	02 c0       	rjmp	.+4      	; 0xcac <__fpcmp_parts_f+0xac>
     ca8:	60 e0       	ldi	r22, 0x00	; 0
     caa:	70 e0       	ldi	r23, 0x00	; 0
     cac:	cb 01       	movw	r24, r22
     cae:	1f 91       	pop	r17
     cb0:	08 95       	ret

00000cb2 <TMR1_init>:
#include "TIMER1_private.h"



void TMR1_init(void)
{
     cb2:	df 93       	push	r29
     cb4:	cf 93       	push	r28
     cb6:	cd b7       	in	r28, 0x3d	; 61
     cb8:	de b7       	in	r29, 0x3e	; 62
//fast pwm
	 //fast pwm mode
	 SET_BIT(TCCR1A,WGM10);
     cba:	a0 e8       	ldi	r26, 0x80	; 128
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	e0 e8       	ldi	r30, 0x80	; 128
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 81       	ld	r24, Z
     cc4:	81 60       	ori	r24, 0x01	; 1
     cc6:	8c 93       	st	X, r24
	 CLR_BIT(TCCR1A,WGM11);
     cc8:	a0 e8       	ldi	r26, 0x80	; 128
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	e0 e8       	ldi	r30, 0x80	; 128
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	80 81       	ld	r24, Z
     cd2:	8d 7f       	andi	r24, 0xFD	; 253
     cd4:	8c 93       	st	X, r24
	 SET_BIT(TCCR1B,WGM12);
     cd6:	a1 e8       	ldi	r26, 0x81	; 129
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	e1 e8       	ldi	r30, 0x81	; 129
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	80 81       	ld	r24, Z
     ce0:	88 60       	ori	r24, 0x08	; 8
     ce2:	8c 93       	st	X, r24
	 CLR_BIT(TCCR1B,WGM13);
     ce4:	a1 e8       	ldi	r26, 0x81	; 129
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e1 e8       	ldi	r30, 0x81	; 129
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	8f 7e       	andi	r24, 0xEF	; 239
     cf0:	8c 93       	st	X, r24

	 //non inverting PWM
	CLR_BIT(TCCR1A,COM1A0);
     cf2:	a0 e8       	ldi	r26, 0x80	; 128
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	e0 e8       	ldi	r30, 0x80	; 128
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	8f 7b       	andi	r24, 0xBF	; 191
     cfe:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,COM1A1);
     d00:	a0 e8       	ldi	r26, 0x80	; 128
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	e0 e8       	ldi	r30, 0x80	; 128
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	80 81       	ld	r24, Z
     d0a:	80 68       	ori	r24, 0x80	; 128
     d0c:	8c 93       	st	X, r24
}
     d0e:	cf 91       	pop	r28
     d10:	df 91       	pop	r29
     d12:	08 95       	ret

00000d14 <TMR1_start>:
void TMR1_start(void)
{
     d14:	df 93       	push	r29
     d16:	cf 93       	push	r28
     d18:	cd b7       	in	r28, 0x3d	; 61
     d1a:	de b7       	in	r29, 0x3e	; 62
	 SET_BIT(TCCR1B,CS10);
     d1c:	a1 e8       	ldi	r26, 0x81	; 129
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
     d20:	e1 e8       	ldi	r30, 0x81	; 129
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	80 81       	ld	r24, Z
     d26:	81 60       	ori	r24, 0x01	; 1
     d28:	8c 93       	st	X, r24
	 SET_BIT(TCCR1B,CS11);
     d2a:	a1 e8       	ldi	r26, 0x81	; 129
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	e1 e8       	ldi	r30, 0x81	; 129
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	82 60       	ori	r24, 0x02	; 2
     d36:	8c 93       	st	X, r24
     CLR_BIT(TCCR1B,CS12);
     d38:	a1 e8       	ldi	r26, 0x81	; 129
     d3a:	b0 e0       	ldi	r27, 0x00	; 0
     d3c:	e1 e8       	ldi	r30, 0x81	; 129
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	80 81       	ld	r24, Z
     d42:	8b 7f       	andi	r24, 0xFB	; 251
     d44:	8c 93       	st	X, r24
}
     d46:	cf 91       	pop	r28
     d48:	df 91       	pop	r29
     d4a:	08 95       	ret

00000d4c <TMR1_stop>:
void TMR1_stop(void)
{
     d4c:	df 93       	push	r29
     d4e:	cf 93       	push	r28
     d50:	cd b7       	in	r28, 0x3d	; 61
     d52:	de b7       	in	r29, 0x3e	; 62
	 CLR_BIT(TCCR1B,CS10);
     d54:	a1 e8       	ldi	r26, 0x81	; 129
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	e1 e8       	ldi	r30, 0x81	; 129
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	8e 7f       	andi	r24, 0xFE	; 254
     d60:	8c 93       	st	X, r24
	 CLR_BIT(TCCR1B,CS11);
     d62:	a1 e8       	ldi	r26, 0x81	; 129
     d64:	b0 e0       	ldi	r27, 0x00	; 0
     d66:	e1 e8       	ldi	r30, 0x81	; 129
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	80 81       	ld	r24, Z
     d6c:	8d 7f       	andi	r24, 0xFD	; 253
     d6e:	8c 93       	st	X, r24
    CLR_BIT(TCCR1B,CS12);
     d70:	a1 e8       	ldi	r26, 0x81	; 129
     d72:	b0 e0       	ldi	r27, 0x00	; 0
     d74:	e1 e8       	ldi	r30, 0x81	; 129
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	80 81       	ld	r24, Z
     d7a:	8b 7f       	andi	r24, 0xFB	; 251
     d7c:	8c 93       	st	X, r24
}
     d7e:	cf 91       	pop	r28
     d80:	df 91       	pop	r29
     d82:	08 95       	ret

00000d84 <TMR1_setDutyCycle>:


void TMR1_setDutyCycle(u8 dutyCyclye)
{
     d84:	df 93       	push	r29
     d86:	cf 93       	push	r28
     d88:	0f 92       	push	r0
     d8a:	cd b7       	in	r28, 0x3d	; 61
     d8c:	de b7       	in	r29, 0x3e	; 62
     d8e:	89 83       	std	Y+1, r24	; 0x01
	 if(dutyCyclye<=100)
     d90:	89 81       	ldd	r24, Y+1	; 0x01
     d92:	85 36       	cpi	r24, 0x65	; 101
     d94:	c0 f4       	brcc	.+48     	; 0xdc6 <TMR1_setDutyCycle+0x42>
		 {
		 u16OCR01A=((u16)(dutyCyclye*250)/100)-1;
     d96:	e8 e8       	ldi	r30, 0x88	; 136
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	89 81       	ldd	r24, Y+1	; 0x01
     d9c:	28 2f       	mov	r18, r24
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	8a ef       	ldi	r24, 0xFA	; 250
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	ac 01       	movw	r20, r24
     da6:	24 9f       	mul	r18, r20
     da8:	c0 01       	movw	r24, r0
     daa:	25 9f       	mul	r18, r21
     dac:	90 0d       	add	r25, r0
     dae:	34 9f       	mul	r19, r20
     db0:	90 0d       	add	r25, r0
     db2:	11 24       	eor	r1, r1
     db4:	24 e6       	ldi	r18, 0x64	; 100
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	b9 01       	movw	r22, r18
     dba:	0e 94 fd 19 	call	0x33fa	; 0x33fa <__udivmodhi4>
     dbe:	cb 01       	movw	r24, r22
     dc0:	01 97       	sbiw	r24, 0x01	; 1
     dc2:	91 83       	std	Z+1, r25	; 0x01
     dc4:	80 83       	st	Z, r24
		 }
}
     dc6:	0f 90       	pop	r0
     dc8:	cf 91       	pop	r28
     dca:	df 91       	pop	r29
     dcc:	08 95       	ret

00000dce <DIO_setPinDirection>:
#include "../../STD/BIT_MATH.h"
#include "DIO_interface.h"
#include "DIO_private.h"

void DIO_setPinDirection(u8 PortId, u8 PinId, u8 PinDirection)
{
     dce:	df 93       	push	r29
     dd0:	cf 93       	push	r28
     dd2:	cd b7       	in	r28, 0x3d	; 61
     dd4:	de b7       	in	r29, 0x3e	; 62
     dd6:	2b 97       	sbiw	r28, 0x0b	; 11
     dd8:	0f b6       	in	r0, 0x3f	; 63
     dda:	f8 94       	cli
     ddc:	de bf       	out	0x3e, r29	; 62
     dde:	0f be       	out	0x3f, r0	; 63
     de0:	cd bf       	out	0x3d, r28	; 61
     de2:	89 83       	std	Y+1, r24	; 0x01
     de4:	6a 83       	std	Y+2, r22	; 0x02
     de6:	4b 83       	std	Y+3, r20	; 0x03
	if((PortId<=2)&&(PinId<=7)&&((PinDirection==DIO_PIN_OUTPUT)||(PinDirection==DIO_PIN_INPUT)))
     de8:	89 81       	ldd	r24, Y+1	; 0x01
     dea:	83 30       	cpi	r24, 0x03	; 3
     dec:	08 f0       	brcs	.+2      	; 0xdf0 <DIO_setPinDirection+0x22>
     dee:	c8 c0       	rjmp	.+400    	; 0xf80 <DIO_setPinDirection+0x1b2>
     df0:	8a 81       	ldd	r24, Y+2	; 0x02
     df2:	88 30       	cpi	r24, 0x08	; 8
     df4:	08 f0       	brcs	.+2      	; 0xdf8 <DIO_setPinDirection+0x2a>
     df6:	c4 c0       	rjmp	.+392    	; 0xf80 <DIO_setPinDirection+0x1b2>
     df8:	8b 81       	ldd	r24, Y+3	; 0x03
     dfa:	81 30       	cpi	r24, 0x01	; 1
     dfc:	21 f0       	breq	.+8      	; 0xe06 <DIO_setPinDirection+0x38>
     dfe:	8b 81       	ldd	r24, Y+3	; 0x03
     e00:	88 23       	and	r24, r24
     e02:	09 f0       	breq	.+2      	; 0xe06 <DIO_setPinDirection+0x38>
     e04:	bd c0       	rjmp	.+378    	; 0xf80 <DIO_setPinDirection+0x1b2>
	{
	switch(PortId)
     e06:	89 81       	ldd	r24, Y+1	; 0x01
     e08:	28 2f       	mov	r18, r24
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	3b 87       	std	Y+11, r19	; 0x0b
     e0e:	2a 87       	std	Y+10, r18	; 0x0a
     e10:	8a 85       	ldd	r24, Y+10	; 0x0a
     e12:	9b 85       	ldd	r25, Y+11	; 0x0b
     e14:	81 30       	cpi	r24, 0x01	; 1
     e16:	91 05       	cpc	r25, r1
     e18:	09 f4       	brne	.+2      	; 0xe1c <DIO_setPinDirection+0x4e>
     e1a:	43 c0       	rjmp	.+134    	; 0xea2 <DIO_setPinDirection+0xd4>
     e1c:	2a 85       	ldd	r18, Y+10	; 0x0a
     e1e:	3b 85       	ldd	r19, Y+11	; 0x0b
     e20:	22 30       	cpi	r18, 0x02	; 2
     e22:	31 05       	cpc	r19, r1
     e24:	09 f4       	brne	.+2      	; 0xe28 <DIO_setPinDirection+0x5a>
     e26:	75 c0       	rjmp	.+234    	; 0xf12 <DIO_setPinDirection+0x144>
     e28:	8a 85       	ldd	r24, Y+10	; 0x0a
     e2a:	9b 85       	ldd	r25, Y+11	; 0x0b
     e2c:	00 97       	sbiw	r24, 0x00	; 0
     e2e:	09 f0       	breq	.+2      	; 0xe32 <DIO_setPinDirection+0x64>
     e30:	a7 c0       	rjmp	.+334    	; 0xf80 <DIO_setPinDirection+0x1b2>
			break;
		}
		break;*/

		case DIO_PORTB:
		switch(PinDirection)
     e32:	8b 81       	ldd	r24, Y+3	; 0x03
     e34:	28 2f       	mov	r18, r24
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	39 87       	std	Y+9, r19	; 0x09
     e3a:	28 87       	std	Y+8, r18	; 0x08
     e3c:	88 85       	ldd	r24, Y+8	; 0x08
     e3e:	99 85       	ldd	r25, Y+9	; 0x09
     e40:	00 97       	sbiw	r24, 0x00	; 0
     e42:	31 f0       	breq	.+12     	; 0xe50 <DIO_setPinDirection+0x82>
     e44:	28 85       	ldd	r18, Y+8	; 0x08
     e46:	39 85       	ldd	r19, Y+9	; 0x09
     e48:	21 30       	cpi	r18, 0x01	; 1
     e4a:	31 05       	cpc	r19, r1
     e4c:	b1 f0       	breq	.+44     	; 0xe7a <DIO_setPinDirection+0xac>
     e4e:	98 c0       	rjmp	.+304    	; 0xf80 <DIO_setPinDirection+0x1b2>
		{
			case DIO_PIN_INPUT:
			CLR_BIT(DDRB,PinId);
     e50:	a4 e2       	ldi	r26, 0x24	; 36
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	e4 e2       	ldi	r30, 0x24	; 36
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	48 2f       	mov	r20, r24
     e5c:	8a 81       	ldd	r24, Y+2	; 0x02
     e5e:	28 2f       	mov	r18, r24
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	02 2e       	mov	r0, r18
     e68:	02 c0       	rjmp	.+4      	; 0xe6e <DIO_setPinDirection+0xa0>
     e6a:	88 0f       	add	r24, r24
     e6c:	99 1f       	adc	r25, r25
     e6e:	0a 94       	dec	r0
     e70:	e2 f7       	brpl	.-8      	; 0xe6a <DIO_setPinDirection+0x9c>
     e72:	80 95       	com	r24
     e74:	84 23       	and	r24, r20
     e76:	8c 93       	st	X, r24
     e78:	83 c0       	rjmp	.+262    	; 0xf80 <DIO_setPinDirection+0x1b2>
			break;

			case DIO_PIN_OUTPUT:
			SET_BIT(DDRB,PinId);
     e7a:	a4 e2       	ldi	r26, 0x24	; 36
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	e4 e2       	ldi	r30, 0x24	; 36
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	48 2f       	mov	r20, r24
     e86:	8a 81       	ldd	r24, Y+2	; 0x02
     e88:	28 2f       	mov	r18, r24
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	02 2e       	mov	r0, r18
     e92:	02 c0       	rjmp	.+4      	; 0xe98 <DIO_setPinDirection+0xca>
     e94:	88 0f       	add	r24, r24
     e96:	99 1f       	adc	r25, r25
     e98:	0a 94       	dec	r0
     e9a:	e2 f7       	brpl	.-8      	; 0xe94 <DIO_setPinDirection+0xc6>
     e9c:	84 2b       	or	r24, r20
     e9e:	8c 93       	st	X, r24
     ea0:	6f c0       	rjmp	.+222    	; 0xf80 <DIO_setPinDirection+0x1b2>
			break;
		}
		break;

		case DIO_PORTC:
		switch(PinDirection)
     ea2:	8b 81       	ldd	r24, Y+3	; 0x03
     ea4:	28 2f       	mov	r18, r24
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	3f 83       	std	Y+7, r19	; 0x07
     eaa:	2e 83       	std	Y+6, r18	; 0x06
     eac:	8e 81       	ldd	r24, Y+6	; 0x06
     eae:	9f 81       	ldd	r25, Y+7	; 0x07
     eb0:	00 97       	sbiw	r24, 0x00	; 0
     eb2:	31 f0       	breq	.+12     	; 0xec0 <DIO_setPinDirection+0xf2>
     eb4:	2e 81       	ldd	r18, Y+6	; 0x06
     eb6:	3f 81       	ldd	r19, Y+7	; 0x07
     eb8:	21 30       	cpi	r18, 0x01	; 1
     eba:	31 05       	cpc	r19, r1
     ebc:	b1 f0       	breq	.+44     	; 0xeea <DIO_setPinDirection+0x11c>
     ebe:	60 c0       	rjmp	.+192    	; 0xf80 <DIO_setPinDirection+0x1b2>
		{
			case DIO_PIN_INPUT:
			CLR_BIT(DDRC,PinId);
     ec0:	a7 e2       	ldi	r26, 0x27	; 39
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	e7 e2       	ldi	r30, 0x27	; 39
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	48 2f       	mov	r20, r24
     ecc:	8a 81       	ldd	r24, Y+2	; 0x02
     ece:	28 2f       	mov	r18, r24
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	02 2e       	mov	r0, r18
     ed8:	02 c0       	rjmp	.+4      	; 0xede <DIO_setPinDirection+0x110>
     eda:	88 0f       	add	r24, r24
     edc:	99 1f       	adc	r25, r25
     ede:	0a 94       	dec	r0
     ee0:	e2 f7       	brpl	.-8      	; 0xeda <DIO_setPinDirection+0x10c>
     ee2:	80 95       	com	r24
     ee4:	84 23       	and	r24, r20
     ee6:	8c 93       	st	X, r24
     ee8:	4b c0       	rjmp	.+150    	; 0xf80 <DIO_setPinDirection+0x1b2>
			break;

			case DIO_PIN_OUTPUT:
			SET_BIT(DDRC,PinId);
     eea:	a7 e2       	ldi	r26, 0x27	; 39
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	e7 e2       	ldi	r30, 0x27	; 39
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	48 2f       	mov	r20, r24
     ef6:	8a 81       	ldd	r24, Y+2	; 0x02
     ef8:	28 2f       	mov	r18, r24
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	02 2e       	mov	r0, r18
     f02:	02 c0       	rjmp	.+4      	; 0xf08 <DIO_setPinDirection+0x13a>
     f04:	88 0f       	add	r24, r24
     f06:	99 1f       	adc	r25, r25
     f08:	0a 94       	dec	r0
     f0a:	e2 f7       	brpl	.-8      	; 0xf04 <DIO_setPinDirection+0x136>
     f0c:	84 2b       	or	r24, r20
     f0e:	8c 93       	st	X, r24
     f10:	37 c0       	rjmp	.+110    	; 0xf80 <DIO_setPinDirection+0x1b2>
			break;
		}
		break;

		case DIO_PORTD:
		switch(PinDirection)
     f12:	8b 81       	ldd	r24, Y+3	; 0x03
     f14:	28 2f       	mov	r18, r24
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	3d 83       	std	Y+5, r19	; 0x05
     f1a:	2c 83       	std	Y+4, r18	; 0x04
     f1c:	8c 81       	ldd	r24, Y+4	; 0x04
     f1e:	9d 81       	ldd	r25, Y+5	; 0x05
     f20:	00 97       	sbiw	r24, 0x00	; 0
     f22:	31 f0       	breq	.+12     	; 0xf30 <DIO_setPinDirection+0x162>
     f24:	2c 81       	ldd	r18, Y+4	; 0x04
     f26:	3d 81       	ldd	r19, Y+5	; 0x05
     f28:	21 30       	cpi	r18, 0x01	; 1
     f2a:	31 05       	cpc	r19, r1
     f2c:	b1 f0       	breq	.+44     	; 0xf5a <DIO_setPinDirection+0x18c>
     f2e:	28 c0       	rjmp	.+80     	; 0xf80 <DIO_setPinDirection+0x1b2>
		{
			case DIO_PIN_INPUT:
			CLR_BIT(DDRD,PinId);
     f30:	aa e2       	ldi	r26, 0x2A	; 42
     f32:	b0 e0       	ldi	r27, 0x00	; 0
     f34:	ea e2       	ldi	r30, 0x2A	; 42
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	48 2f       	mov	r20, r24
     f3c:	8a 81       	ldd	r24, Y+2	; 0x02
     f3e:	28 2f       	mov	r18, r24
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	02 2e       	mov	r0, r18
     f48:	02 c0       	rjmp	.+4      	; 0xf4e <DIO_setPinDirection+0x180>
     f4a:	88 0f       	add	r24, r24
     f4c:	99 1f       	adc	r25, r25
     f4e:	0a 94       	dec	r0
     f50:	e2 f7       	brpl	.-8      	; 0xf4a <DIO_setPinDirection+0x17c>
     f52:	80 95       	com	r24
     f54:	84 23       	and	r24, r20
     f56:	8c 93       	st	X, r24
     f58:	13 c0       	rjmp	.+38     	; 0xf80 <DIO_setPinDirection+0x1b2>
			break;

			case DIO_PIN_OUTPUT:
			SET_BIT(DDRD,PinId);
     f5a:	aa e2       	ldi	r26, 0x2A	; 42
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	ea e2       	ldi	r30, 0x2A	; 42
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	48 2f       	mov	r20, r24
     f66:	8a 81       	ldd	r24, Y+2	; 0x02
     f68:	28 2f       	mov	r18, r24
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	02 2e       	mov	r0, r18
     f72:	02 c0       	rjmp	.+4      	; 0xf78 <DIO_setPinDirection+0x1aa>
     f74:	88 0f       	add	r24, r24
     f76:	99 1f       	adc	r25, r25
     f78:	0a 94       	dec	r0
     f7a:	e2 f7       	brpl	.-8      	; 0xf74 <DIO_setPinDirection+0x1a6>
     f7c:	84 2b       	or	r24, r20
     f7e:	8c 93       	st	X, r24
	}
	else
	{
		//Do Nothing
	}
}
     f80:	2b 96       	adiw	r28, 0x0b	; 11
     f82:	0f b6       	in	r0, 0x3f	; 63
     f84:	f8 94       	cli
     f86:	de bf       	out	0x3e, r29	; 62
     f88:	0f be       	out	0x3f, r0	; 63
     f8a:	cd bf       	out	0x3d, r28	; 61
     f8c:	cf 91       	pop	r28
     f8e:	df 91       	pop	r29
     f90:	08 95       	ret

00000f92 <DIO_setPinValue>:


void DIO_setPinValue(u8 PortId, u8 PinId, u8 PinValue)
{
     f92:	df 93       	push	r29
     f94:	cf 93       	push	r28
     f96:	cd b7       	in	r28, 0x3d	; 61
     f98:	de b7       	in	r29, 0x3e	; 62
     f9a:	2b 97       	sbiw	r28, 0x0b	; 11
     f9c:	0f b6       	in	r0, 0x3f	; 63
     f9e:	f8 94       	cli
     fa0:	de bf       	out	0x3e, r29	; 62
     fa2:	0f be       	out	0x3f, r0	; 63
     fa4:	cd bf       	out	0x3d, r28	; 61
     fa6:	89 83       	std	Y+1, r24	; 0x01
     fa8:	6a 83       	std	Y+2, r22	; 0x02
     faa:	4b 83       	std	Y+3, r20	; 0x03
	if((PortId<=2)&&(PinId<=7)&&((PinValue==DIO_PIN_HIGH)||(PinValue==DIO_PIN_LOW)))
     fac:	89 81       	ldd	r24, Y+1	; 0x01
     fae:	83 30       	cpi	r24, 0x03	; 3
     fb0:	08 f0       	brcs	.+2      	; 0xfb4 <DIO_setPinValue+0x22>
     fb2:	c8 c0       	rjmp	.+400    	; 0x1144 <DIO_setPinValue+0x1b2>
     fb4:	8a 81       	ldd	r24, Y+2	; 0x02
     fb6:	88 30       	cpi	r24, 0x08	; 8
     fb8:	08 f0       	brcs	.+2      	; 0xfbc <DIO_setPinValue+0x2a>
     fba:	c4 c0       	rjmp	.+392    	; 0x1144 <DIO_setPinValue+0x1b2>
     fbc:	8b 81       	ldd	r24, Y+3	; 0x03
     fbe:	81 30       	cpi	r24, 0x01	; 1
     fc0:	21 f0       	breq	.+8      	; 0xfca <DIO_setPinValue+0x38>
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	88 23       	and	r24, r24
     fc6:	09 f0       	breq	.+2      	; 0xfca <DIO_setPinValue+0x38>
     fc8:	bd c0       	rjmp	.+378    	; 0x1144 <DIO_setPinValue+0x1b2>
	{
		switch(PortId)
     fca:	89 81       	ldd	r24, Y+1	; 0x01
     fcc:	28 2f       	mov	r18, r24
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	3b 87       	std	Y+11, r19	; 0x0b
     fd2:	2a 87       	std	Y+10, r18	; 0x0a
     fd4:	8a 85       	ldd	r24, Y+10	; 0x0a
     fd6:	9b 85       	ldd	r25, Y+11	; 0x0b
     fd8:	81 30       	cpi	r24, 0x01	; 1
     fda:	91 05       	cpc	r25, r1
     fdc:	09 f4       	brne	.+2      	; 0xfe0 <DIO_setPinValue+0x4e>
     fde:	43 c0       	rjmp	.+134    	; 0x1066 <DIO_setPinValue+0xd4>
     fe0:	2a 85       	ldd	r18, Y+10	; 0x0a
     fe2:	3b 85       	ldd	r19, Y+11	; 0x0b
     fe4:	22 30       	cpi	r18, 0x02	; 2
     fe6:	31 05       	cpc	r19, r1
     fe8:	09 f4       	brne	.+2      	; 0xfec <DIO_setPinValue+0x5a>
     fea:	75 c0       	rjmp	.+234    	; 0x10d6 <DIO_setPinValue+0x144>
     fec:	8a 85       	ldd	r24, Y+10	; 0x0a
     fee:	9b 85       	ldd	r25, Y+11	; 0x0b
     ff0:	00 97       	sbiw	r24, 0x00	; 0
     ff2:	09 f0       	breq	.+2      	; 0xff6 <DIO_setPinValue+0x64>
     ff4:	a7 c0       	rjmp	.+334    	; 0x1144 <DIO_setPinValue+0x1b2>
			break;
		}
		break;*/

		case DIO_PORTB:
		switch(PinValue)
     ff6:	8b 81       	ldd	r24, Y+3	; 0x03
     ff8:	28 2f       	mov	r18, r24
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	39 87       	std	Y+9, r19	; 0x09
     ffe:	28 87       	std	Y+8, r18	; 0x08
    1000:	88 85       	ldd	r24, Y+8	; 0x08
    1002:	99 85       	ldd	r25, Y+9	; 0x09
    1004:	00 97       	sbiw	r24, 0x00	; 0
    1006:	31 f0       	breq	.+12     	; 0x1014 <DIO_setPinValue+0x82>
    1008:	28 85       	ldd	r18, Y+8	; 0x08
    100a:	39 85       	ldd	r19, Y+9	; 0x09
    100c:	21 30       	cpi	r18, 0x01	; 1
    100e:	31 05       	cpc	r19, r1
    1010:	b1 f0       	breq	.+44     	; 0x103e <DIO_setPinValue+0xac>
    1012:	98 c0       	rjmp	.+304    	; 0x1144 <DIO_setPinValue+0x1b2>
		{
			case DIO_PIN_LOW:
			CLR_BIT(PORTB,PinId);
    1014:	a5 e2       	ldi	r26, 0x25	; 37
    1016:	b0 e0       	ldi	r27, 0x00	; 0
    1018:	e5 e2       	ldi	r30, 0x25	; 37
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	48 2f       	mov	r20, r24
    1020:	8a 81       	ldd	r24, Y+2	; 0x02
    1022:	28 2f       	mov	r18, r24
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	02 2e       	mov	r0, r18
    102c:	02 c0       	rjmp	.+4      	; 0x1032 <DIO_setPinValue+0xa0>
    102e:	88 0f       	add	r24, r24
    1030:	99 1f       	adc	r25, r25
    1032:	0a 94       	dec	r0
    1034:	e2 f7       	brpl	.-8      	; 0x102e <DIO_setPinValue+0x9c>
    1036:	80 95       	com	r24
    1038:	84 23       	and	r24, r20
    103a:	8c 93       	st	X, r24
    103c:	83 c0       	rjmp	.+262    	; 0x1144 <DIO_setPinValue+0x1b2>
			break;

			case DIO_PIN_HIGH:
			SET_BIT(PORTB,PinId);
    103e:	a5 e2       	ldi	r26, 0x25	; 37
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	e5 e2       	ldi	r30, 0x25	; 37
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	48 2f       	mov	r20, r24
    104a:	8a 81       	ldd	r24, Y+2	; 0x02
    104c:	28 2f       	mov	r18, r24
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	02 2e       	mov	r0, r18
    1056:	02 c0       	rjmp	.+4      	; 0x105c <DIO_setPinValue+0xca>
    1058:	88 0f       	add	r24, r24
    105a:	99 1f       	adc	r25, r25
    105c:	0a 94       	dec	r0
    105e:	e2 f7       	brpl	.-8      	; 0x1058 <DIO_setPinValue+0xc6>
    1060:	84 2b       	or	r24, r20
    1062:	8c 93       	st	X, r24
    1064:	6f c0       	rjmp	.+222    	; 0x1144 <DIO_setPinValue+0x1b2>
			break;
		}
		break;

		case DIO_PORTC:
		switch(PinValue)
    1066:	8b 81       	ldd	r24, Y+3	; 0x03
    1068:	28 2f       	mov	r18, r24
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	3f 83       	std	Y+7, r19	; 0x07
    106e:	2e 83       	std	Y+6, r18	; 0x06
    1070:	8e 81       	ldd	r24, Y+6	; 0x06
    1072:	9f 81       	ldd	r25, Y+7	; 0x07
    1074:	00 97       	sbiw	r24, 0x00	; 0
    1076:	31 f0       	breq	.+12     	; 0x1084 <DIO_setPinValue+0xf2>
    1078:	2e 81       	ldd	r18, Y+6	; 0x06
    107a:	3f 81       	ldd	r19, Y+7	; 0x07
    107c:	21 30       	cpi	r18, 0x01	; 1
    107e:	31 05       	cpc	r19, r1
    1080:	b1 f0       	breq	.+44     	; 0x10ae <DIO_setPinValue+0x11c>
    1082:	60 c0       	rjmp	.+192    	; 0x1144 <DIO_setPinValue+0x1b2>
		{
			case DIO_PIN_LOW:
			CLR_BIT(PORTC,PinId);
    1084:	a8 e2       	ldi	r26, 0x28	; 40
    1086:	b0 e0       	ldi	r27, 0x00	; 0
    1088:	e8 e2       	ldi	r30, 0x28	; 40
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	48 2f       	mov	r20, r24
    1090:	8a 81       	ldd	r24, Y+2	; 0x02
    1092:	28 2f       	mov	r18, r24
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	02 2e       	mov	r0, r18
    109c:	02 c0       	rjmp	.+4      	; 0x10a2 <DIO_setPinValue+0x110>
    109e:	88 0f       	add	r24, r24
    10a0:	99 1f       	adc	r25, r25
    10a2:	0a 94       	dec	r0
    10a4:	e2 f7       	brpl	.-8      	; 0x109e <DIO_setPinValue+0x10c>
    10a6:	80 95       	com	r24
    10a8:	84 23       	and	r24, r20
    10aa:	8c 93       	st	X, r24
    10ac:	4b c0       	rjmp	.+150    	; 0x1144 <DIO_setPinValue+0x1b2>
			break;

			case DIO_PIN_HIGH:
			SET_BIT(PORTC,PinId);
    10ae:	a8 e2       	ldi	r26, 0x28	; 40
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	e8 e2       	ldi	r30, 0x28	; 40
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	48 2f       	mov	r20, r24
    10ba:	8a 81       	ldd	r24, Y+2	; 0x02
    10bc:	28 2f       	mov	r18, r24
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	02 2e       	mov	r0, r18
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <DIO_setPinValue+0x13a>
    10c8:	88 0f       	add	r24, r24
    10ca:	99 1f       	adc	r25, r25
    10cc:	0a 94       	dec	r0
    10ce:	e2 f7       	brpl	.-8      	; 0x10c8 <DIO_setPinValue+0x136>
    10d0:	84 2b       	or	r24, r20
    10d2:	8c 93       	st	X, r24
    10d4:	37 c0       	rjmp	.+110    	; 0x1144 <DIO_setPinValue+0x1b2>
			break;
		}
		break;

		case DIO_PORTD:
		switch(PinValue)
    10d6:	8b 81       	ldd	r24, Y+3	; 0x03
    10d8:	28 2f       	mov	r18, r24
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	3d 83       	std	Y+5, r19	; 0x05
    10de:	2c 83       	std	Y+4, r18	; 0x04
    10e0:	8c 81       	ldd	r24, Y+4	; 0x04
    10e2:	9d 81       	ldd	r25, Y+5	; 0x05
    10e4:	00 97       	sbiw	r24, 0x00	; 0
    10e6:	31 f0       	breq	.+12     	; 0x10f4 <DIO_setPinValue+0x162>
    10e8:	2c 81       	ldd	r18, Y+4	; 0x04
    10ea:	3d 81       	ldd	r19, Y+5	; 0x05
    10ec:	21 30       	cpi	r18, 0x01	; 1
    10ee:	31 05       	cpc	r19, r1
    10f0:	b1 f0       	breq	.+44     	; 0x111e <DIO_setPinValue+0x18c>
    10f2:	28 c0       	rjmp	.+80     	; 0x1144 <DIO_setPinValue+0x1b2>
		{
			case DIO_PIN_LOW:
			CLR_BIT(PORTD,PinId);
    10f4:	ab e2       	ldi	r26, 0x2B	; 43
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	eb e2       	ldi	r30, 0x2B	; 43
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	48 2f       	mov	r20, r24
    1100:	8a 81       	ldd	r24, Y+2	; 0x02
    1102:	28 2f       	mov	r18, r24
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	02 2e       	mov	r0, r18
    110c:	02 c0       	rjmp	.+4      	; 0x1112 <DIO_setPinValue+0x180>
    110e:	88 0f       	add	r24, r24
    1110:	99 1f       	adc	r25, r25
    1112:	0a 94       	dec	r0
    1114:	e2 f7       	brpl	.-8      	; 0x110e <DIO_setPinValue+0x17c>
    1116:	80 95       	com	r24
    1118:	84 23       	and	r24, r20
    111a:	8c 93       	st	X, r24
    111c:	13 c0       	rjmp	.+38     	; 0x1144 <DIO_setPinValue+0x1b2>
			break;

			case DIO_PIN_HIGH:
			SET_BIT(PORTD,PinId);
    111e:	ab e2       	ldi	r26, 0x2B	; 43
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	eb e2       	ldi	r30, 0x2B	; 43
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	48 2f       	mov	r20, r24
    112a:	8a 81       	ldd	r24, Y+2	; 0x02
    112c:	28 2f       	mov	r18, r24
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	02 2e       	mov	r0, r18
    1136:	02 c0       	rjmp	.+4      	; 0x113c <DIO_setPinValue+0x1aa>
    1138:	88 0f       	add	r24, r24
    113a:	99 1f       	adc	r25, r25
    113c:	0a 94       	dec	r0
    113e:	e2 f7       	brpl	.-8      	; 0x1138 <DIO_setPinValue+0x1a6>
    1140:	84 2b       	or	r24, r20
    1142:	8c 93       	st	X, r24
	}
	else
	{
		//Do Nothing
	}
}
    1144:	2b 96       	adiw	r28, 0x0b	; 11
    1146:	0f b6       	in	r0, 0x3f	; 63
    1148:	f8 94       	cli
    114a:	de bf       	out	0x3e, r29	; 62
    114c:	0f be       	out	0x3f, r0	; 63
    114e:	cd bf       	out	0x3d, r28	; 61
    1150:	cf 91       	pop	r28
    1152:	df 91       	pop	r29
    1154:	08 95       	ret

00001156 <DIO_getPinValue>:


void DIO_getPinValue(u8 PortId, u8 PinId, u8* PinValue)
{
    1156:	df 93       	push	r29
    1158:	cf 93       	push	r28
    115a:	00 d0       	rcall	.+0      	; 0x115c <DIO_getPinValue+0x6>
    115c:	00 d0       	rcall	.+0      	; 0x115e <DIO_getPinValue+0x8>
    115e:	00 d0       	rcall	.+0      	; 0x1160 <DIO_getPinValue+0xa>
    1160:	cd b7       	in	r28, 0x3d	; 61
    1162:	de b7       	in	r29, 0x3e	; 62
    1164:	89 83       	std	Y+1, r24	; 0x01
    1166:	6a 83       	std	Y+2, r22	; 0x02
    1168:	5c 83       	std	Y+4, r21	; 0x04
    116a:	4b 83       	std	Y+3, r20	; 0x03
	if((PortId<=2)&&(PinId<=7)&&(PinValue!=NULL))
    116c:	89 81       	ldd	r24, Y+1	; 0x01
    116e:	83 30       	cpi	r24, 0x03	; 3
    1170:	08 f0       	brcs	.+2      	; 0x1174 <DIO_getPinValue+0x1e>
    1172:	59 c0       	rjmp	.+178    	; 0x1226 <DIO_getPinValue+0xd0>
    1174:	8a 81       	ldd	r24, Y+2	; 0x02
    1176:	88 30       	cpi	r24, 0x08	; 8
    1178:	08 f0       	brcs	.+2      	; 0x117c <DIO_getPinValue+0x26>
    117a:	55 c0       	rjmp	.+170    	; 0x1226 <DIO_getPinValue+0xd0>
    117c:	8b 81       	ldd	r24, Y+3	; 0x03
    117e:	9c 81       	ldd	r25, Y+4	; 0x04
    1180:	00 97       	sbiw	r24, 0x00	; 0
    1182:	09 f4       	brne	.+2      	; 0x1186 <DIO_getPinValue+0x30>
    1184:	50 c0       	rjmp	.+160    	; 0x1226 <DIO_getPinValue+0xd0>
	{
		switch(PortId)
    1186:	89 81       	ldd	r24, Y+1	; 0x01
    1188:	28 2f       	mov	r18, r24
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	3e 83       	std	Y+6, r19	; 0x06
    118e:	2d 83       	std	Y+5, r18	; 0x05
    1190:	4d 81       	ldd	r20, Y+5	; 0x05
    1192:	5e 81       	ldd	r21, Y+6	; 0x06
    1194:	41 30       	cpi	r20, 0x01	; 1
    1196:	51 05       	cpc	r21, r1
    1198:	f9 f0       	breq	.+62     	; 0x11d8 <DIO_getPinValue+0x82>
    119a:	8d 81       	ldd	r24, Y+5	; 0x05
    119c:	9e 81       	ldd	r25, Y+6	; 0x06
    119e:	82 30       	cpi	r24, 0x02	; 2
    11a0:	91 05       	cpc	r25, r1
    11a2:	71 f1       	breq	.+92     	; 0x1200 <DIO_getPinValue+0xaa>
    11a4:	2d 81       	ldd	r18, Y+5	; 0x05
    11a6:	3e 81       	ldd	r19, Y+6	; 0x06
    11a8:	21 15       	cp	r18, r1
    11aa:	31 05       	cpc	r19, r1
    11ac:	09 f0       	breq	.+2      	; 0x11b0 <DIO_getPinValue+0x5a>
    11ae:	3b c0       	rjmp	.+118    	; 0x1226 <DIO_getPinValue+0xd0>
		/*case DIO_PORTA:
		*PinValue = GET_BIT(PINA,PinId);
		break;*/

		case DIO_PORTB:
		*PinValue = GET_BIT(PINB,PinId);
    11b0:	e3 e2       	ldi	r30, 0x23	; 35
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z
    11b6:	28 2f       	mov	r18, r24
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	8a 81       	ldd	r24, Y+2	; 0x02
    11bc:	88 2f       	mov	r24, r24
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	a9 01       	movw	r20, r18
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <DIO_getPinValue+0x72>
    11c4:	55 95       	asr	r21
    11c6:	47 95       	ror	r20
    11c8:	8a 95       	dec	r24
    11ca:	e2 f7       	brpl	.-8      	; 0x11c4 <DIO_getPinValue+0x6e>
    11cc:	ca 01       	movw	r24, r20
    11ce:	81 70       	andi	r24, 0x01	; 1
    11d0:	eb 81       	ldd	r30, Y+3	; 0x03
    11d2:	fc 81       	ldd	r31, Y+4	; 0x04
    11d4:	80 83       	st	Z, r24
    11d6:	27 c0       	rjmp	.+78     	; 0x1226 <DIO_getPinValue+0xd0>
		break;

		case DIO_PORTC:
		*PinValue = GET_BIT(PINC,PinId);
    11d8:	e6 e2       	ldi	r30, 0x26	; 38
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	28 2f       	mov	r18, r24
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	8a 81       	ldd	r24, Y+2	; 0x02
    11e4:	88 2f       	mov	r24, r24
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	a9 01       	movw	r20, r18
    11ea:	02 c0       	rjmp	.+4      	; 0x11f0 <DIO_getPinValue+0x9a>
    11ec:	55 95       	asr	r21
    11ee:	47 95       	ror	r20
    11f0:	8a 95       	dec	r24
    11f2:	e2 f7       	brpl	.-8      	; 0x11ec <DIO_getPinValue+0x96>
    11f4:	ca 01       	movw	r24, r20
    11f6:	81 70       	andi	r24, 0x01	; 1
    11f8:	eb 81       	ldd	r30, Y+3	; 0x03
    11fa:	fc 81       	ldd	r31, Y+4	; 0x04
    11fc:	80 83       	st	Z, r24
    11fe:	13 c0       	rjmp	.+38     	; 0x1226 <DIO_getPinValue+0xd0>
		break;

		case DIO_PORTD:
		*PinValue = GET_BIT(PIND,PinId);
    1200:	e9 e2       	ldi	r30, 0x29	; 41
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	28 2f       	mov	r18, r24
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	8a 81       	ldd	r24, Y+2	; 0x02
    120c:	88 2f       	mov	r24, r24
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	a9 01       	movw	r20, r18
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <DIO_getPinValue+0xc2>
    1214:	55 95       	asr	r21
    1216:	47 95       	ror	r20
    1218:	8a 95       	dec	r24
    121a:	e2 f7       	brpl	.-8      	; 0x1214 <DIO_getPinValue+0xbe>
    121c:	ca 01       	movw	r24, r20
    121e:	81 70       	andi	r24, 0x01	; 1
    1220:	eb 81       	ldd	r30, Y+3	; 0x03
    1222:	fc 81       	ldd	r31, Y+4	; 0x04
    1224:	80 83       	st	Z, r24
	}
	else
	{
		//Do Nothing
	}
}
    1226:	26 96       	adiw	r28, 0x06	; 6
    1228:	0f b6       	in	r0, 0x3f	; 63
    122a:	f8 94       	cli
    122c:	de bf       	out	0x3e, r29	; 62
    122e:	0f be       	out	0x3f, r0	; 63
    1230:	cd bf       	out	0x3d, r28	; 61
    1232:	cf 91       	pop	r28
    1234:	df 91       	pop	r29
    1236:	08 95       	ret

00001238 <DIO_togglePinValue>:


void DIO_togglePinValue(u8 PortId, u8 PinId)
{
    1238:	df 93       	push	r29
    123a:	cf 93       	push	r28
    123c:	00 d0       	rcall	.+0      	; 0x123e <DIO_togglePinValue+0x6>
    123e:	00 d0       	rcall	.+0      	; 0x1240 <DIO_togglePinValue+0x8>
    1240:	cd b7       	in	r28, 0x3d	; 61
    1242:	de b7       	in	r29, 0x3e	; 62
    1244:	89 83       	std	Y+1, r24	; 0x01
    1246:	6a 83       	std	Y+2, r22	; 0x02
	if((PortId<=2) && (PinId<=7))
    1248:	89 81       	ldd	r24, Y+1	; 0x01
    124a:	83 30       	cpi	r24, 0x03	; 3
    124c:	08 f0       	brcs	.+2      	; 0x1250 <DIO_togglePinValue+0x18>
    124e:	52 c0       	rjmp	.+164    	; 0x12f4 <DIO_togglePinValue+0xbc>
    1250:	8a 81       	ldd	r24, Y+2	; 0x02
    1252:	88 30       	cpi	r24, 0x08	; 8
    1254:	08 f0       	brcs	.+2      	; 0x1258 <DIO_togglePinValue+0x20>
    1256:	4e c0       	rjmp	.+156    	; 0x12f4 <DIO_togglePinValue+0xbc>
	{
		switch(PortId)
    1258:	89 81       	ldd	r24, Y+1	; 0x01
    125a:	28 2f       	mov	r18, r24
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	3c 83       	std	Y+4, r19	; 0x04
    1260:	2b 83       	std	Y+3, r18	; 0x03
    1262:	8b 81       	ldd	r24, Y+3	; 0x03
    1264:	9c 81       	ldd	r25, Y+4	; 0x04
    1266:	81 30       	cpi	r24, 0x01	; 1
    1268:	91 05       	cpc	r25, r1
    126a:	e9 f0       	breq	.+58     	; 0x12a6 <DIO_togglePinValue+0x6e>
    126c:	2b 81       	ldd	r18, Y+3	; 0x03
    126e:	3c 81       	ldd	r19, Y+4	; 0x04
    1270:	22 30       	cpi	r18, 0x02	; 2
    1272:	31 05       	cpc	r19, r1
    1274:	61 f1       	breq	.+88     	; 0x12ce <DIO_togglePinValue+0x96>
    1276:	8b 81       	ldd	r24, Y+3	; 0x03
    1278:	9c 81       	ldd	r25, Y+4	; 0x04
    127a:	00 97       	sbiw	r24, 0x00	; 0
    127c:	d9 f5       	brne	.+118    	; 0x12f4 <DIO_togglePinValue+0xbc>
			/*case DIO_PORTA:
			TOG_BIT(PORTA,PinId);
			break;*/

			case DIO_PORTB:
			TOG_BIT(PORTB,PinId);
    127e:	a5 e2       	ldi	r26, 0x25	; 37
    1280:	b0 e0       	ldi	r27, 0x00	; 0
    1282:	e5 e2       	ldi	r30, 0x25	; 37
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	48 2f       	mov	r20, r24
    128a:	8a 81       	ldd	r24, Y+2	; 0x02
    128c:	28 2f       	mov	r18, r24
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	02 2e       	mov	r0, r18
    1296:	02 c0       	rjmp	.+4      	; 0x129c <DIO_togglePinValue+0x64>
    1298:	88 0f       	add	r24, r24
    129a:	99 1f       	adc	r25, r25
    129c:	0a 94       	dec	r0
    129e:	e2 f7       	brpl	.-8      	; 0x1298 <DIO_togglePinValue+0x60>
    12a0:	84 27       	eor	r24, r20
    12a2:	8c 93       	st	X, r24
    12a4:	27 c0       	rjmp	.+78     	; 0x12f4 <DIO_togglePinValue+0xbc>
			break;

			case DIO_PORTC:
			TOG_BIT(PORTC,PinId);
    12a6:	a8 e2       	ldi	r26, 0x28	; 40
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	e8 e2       	ldi	r30, 0x28	; 40
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	48 2f       	mov	r20, r24
    12b2:	8a 81       	ldd	r24, Y+2	; 0x02
    12b4:	28 2f       	mov	r18, r24
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	02 2e       	mov	r0, r18
    12be:	02 c0       	rjmp	.+4      	; 0x12c4 <DIO_togglePinValue+0x8c>
    12c0:	88 0f       	add	r24, r24
    12c2:	99 1f       	adc	r25, r25
    12c4:	0a 94       	dec	r0
    12c6:	e2 f7       	brpl	.-8      	; 0x12c0 <DIO_togglePinValue+0x88>
    12c8:	84 27       	eor	r24, r20
    12ca:	8c 93       	st	X, r24
    12cc:	13 c0       	rjmp	.+38     	; 0x12f4 <DIO_togglePinValue+0xbc>
			break;

			case DIO_PORTD:
			TOG_BIT(PORTD,PinId);
    12ce:	ab e2       	ldi	r26, 0x2B	; 43
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	eb e2       	ldi	r30, 0x2B	; 43
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	48 2f       	mov	r20, r24
    12da:	8a 81       	ldd	r24, Y+2	; 0x02
    12dc:	28 2f       	mov	r18, r24
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	02 2e       	mov	r0, r18
    12e6:	02 c0       	rjmp	.+4      	; 0x12ec <DIO_togglePinValue+0xb4>
    12e8:	88 0f       	add	r24, r24
    12ea:	99 1f       	adc	r25, r25
    12ec:	0a 94       	dec	r0
    12ee:	e2 f7       	brpl	.-8      	; 0x12e8 <DIO_togglePinValue+0xb0>
    12f0:	84 27       	eor	r24, r20
    12f2:	8c 93       	st	X, r24
	}
	else
	{
		//Do Nothing
	}
}
    12f4:	0f 90       	pop	r0
    12f6:	0f 90       	pop	r0
    12f8:	0f 90       	pop	r0
    12fa:	0f 90       	pop	r0
    12fc:	cf 91       	pop	r28
    12fe:	df 91       	pop	r29
    1300:	08 95       	ret

00001302 <DIO_activePinInPullUpResistance>:


void DIO_activePinInPullUpResistance(u8 PortId, u8 PinId)
{
    1302:	df 93       	push	r29
    1304:	cf 93       	push	r28
    1306:	00 d0       	rcall	.+0      	; 0x1308 <DIO_activePinInPullUpResistance+0x6>
    1308:	00 d0       	rcall	.+0      	; 0x130a <DIO_activePinInPullUpResistance+0x8>
    130a:	cd b7       	in	r28, 0x3d	; 61
    130c:	de b7       	in	r29, 0x3e	; 62
    130e:	89 83       	std	Y+1, r24	; 0x01
    1310:	6a 83       	std	Y+2, r22	; 0x02
	if((PortId<=2) && (PinId<=7))
    1312:	89 81       	ldd	r24, Y+1	; 0x01
    1314:	83 30       	cpi	r24, 0x03	; 3
    1316:	08 f0       	brcs	.+2      	; 0x131a <DIO_activePinInPullUpResistance+0x18>
    1318:	52 c0       	rjmp	.+164    	; 0x13be <DIO_activePinInPullUpResistance+0xbc>
    131a:	8a 81       	ldd	r24, Y+2	; 0x02
    131c:	88 30       	cpi	r24, 0x08	; 8
    131e:	08 f0       	brcs	.+2      	; 0x1322 <DIO_activePinInPullUpResistance+0x20>
    1320:	4e c0       	rjmp	.+156    	; 0x13be <DIO_activePinInPullUpResistance+0xbc>
	{
		switch(PortId)
    1322:	89 81       	ldd	r24, Y+1	; 0x01
    1324:	28 2f       	mov	r18, r24
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	3c 83       	std	Y+4, r19	; 0x04
    132a:	2b 83       	std	Y+3, r18	; 0x03
    132c:	8b 81       	ldd	r24, Y+3	; 0x03
    132e:	9c 81       	ldd	r25, Y+4	; 0x04
    1330:	81 30       	cpi	r24, 0x01	; 1
    1332:	91 05       	cpc	r25, r1
    1334:	e9 f0       	breq	.+58     	; 0x1370 <DIO_activePinInPullUpResistance+0x6e>
    1336:	2b 81       	ldd	r18, Y+3	; 0x03
    1338:	3c 81       	ldd	r19, Y+4	; 0x04
    133a:	22 30       	cpi	r18, 0x02	; 2
    133c:	31 05       	cpc	r19, r1
    133e:	61 f1       	breq	.+88     	; 0x1398 <DIO_activePinInPullUpResistance+0x96>
    1340:	8b 81       	ldd	r24, Y+3	; 0x03
    1342:	9c 81       	ldd	r25, Y+4	; 0x04
    1344:	00 97       	sbiw	r24, 0x00	; 0
    1346:	d9 f5       	brne	.+118    	; 0x13be <DIO_activePinInPullUpResistance+0xbc>
			/*case DIO_PORTA:
			SET_BIT(PORTA,PinId);
			break;*/

			case DIO_PORTB:
			SET_BIT(PORTB,PinId);
    1348:	a5 e2       	ldi	r26, 0x25	; 37
    134a:	b0 e0       	ldi	r27, 0x00	; 0
    134c:	e5 e2       	ldi	r30, 0x25	; 37
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	80 81       	ld	r24, Z
    1352:	48 2f       	mov	r20, r24
    1354:	8a 81       	ldd	r24, Y+2	; 0x02
    1356:	28 2f       	mov	r18, r24
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	81 e0       	ldi	r24, 0x01	; 1
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	02 2e       	mov	r0, r18
    1360:	02 c0       	rjmp	.+4      	; 0x1366 <DIO_activePinInPullUpResistance+0x64>
    1362:	88 0f       	add	r24, r24
    1364:	99 1f       	adc	r25, r25
    1366:	0a 94       	dec	r0
    1368:	e2 f7       	brpl	.-8      	; 0x1362 <DIO_activePinInPullUpResistance+0x60>
    136a:	84 2b       	or	r24, r20
    136c:	8c 93       	st	X, r24
    136e:	27 c0       	rjmp	.+78     	; 0x13be <DIO_activePinInPullUpResistance+0xbc>
			break;

			case DIO_PORTC:
			SET_BIT(PORTC,PinId);
    1370:	a8 e2       	ldi	r26, 0x28	; 40
    1372:	b0 e0       	ldi	r27, 0x00	; 0
    1374:	e8 e2       	ldi	r30, 0x28	; 40
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	48 2f       	mov	r20, r24
    137c:	8a 81       	ldd	r24, Y+2	; 0x02
    137e:	28 2f       	mov	r18, r24
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	02 2e       	mov	r0, r18
    1388:	02 c0       	rjmp	.+4      	; 0x138e <DIO_activePinInPullUpResistance+0x8c>
    138a:	88 0f       	add	r24, r24
    138c:	99 1f       	adc	r25, r25
    138e:	0a 94       	dec	r0
    1390:	e2 f7       	brpl	.-8      	; 0x138a <DIO_activePinInPullUpResistance+0x88>
    1392:	84 2b       	or	r24, r20
    1394:	8c 93       	st	X, r24
    1396:	13 c0       	rjmp	.+38     	; 0x13be <DIO_activePinInPullUpResistance+0xbc>
			break;

			case DIO_PORTD:
			SET_BIT(PORTD,PinId);
    1398:	ab e2       	ldi	r26, 0x2B	; 43
    139a:	b0 e0       	ldi	r27, 0x00	; 0
    139c:	eb e2       	ldi	r30, 0x2B	; 43
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	48 2f       	mov	r20, r24
    13a4:	8a 81       	ldd	r24, Y+2	; 0x02
    13a6:	28 2f       	mov	r18, r24
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	02 2e       	mov	r0, r18
    13b0:	02 c0       	rjmp	.+4      	; 0x13b6 <DIO_activePinInPullUpResistance+0xb4>
    13b2:	88 0f       	add	r24, r24
    13b4:	99 1f       	adc	r25, r25
    13b6:	0a 94       	dec	r0
    13b8:	e2 f7       	brpl	.-8      	; 0x13b2 <DIO_activePinInPullUpResistance+0xb0>
    13ba:	84 2b       	or	r24, r20
    13bc:	8c 93       	st	X, r24
	}
	else
	{
		//Do Nothing
	}
}
    13be:	0f 90       	pop	r0
    13c0:	0f 90       	pop	r0
    13c2:	0f 90       	pop	r0
    13c4:	0f 90       	pop	r0
    13c6:	cf 91       	pop	r28
    13c8:	df 91       	pop	r29
    13ca:	08 95       	ret

000013cc <ADC_init>:
#include "ADC_interface.h"



  void ADC_init(u8 refVolt)
  {
    13cc:	df 93       	push	r29
    13ce:	cf 93       	push	r28
    13d0:	00 d0       	rcall	.+0      	; 0x13d2 <ADC_init+0x6>
    13d2:	0f 92       	push	r0
    13d4:	cd b7       	in	r28, 0x3d	; 61
    13d6:	de b7       	in	r29, 0x3e	; 62
    13d8:	89 83       	std	Y+1, r24	; 0x01
	  switch(refVolt)
    13da:	89 81       	ldd	r24, Y+1	; 0x01
    13dc:	28 2f       	mov	r18, r24
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	3b 83       	std	Y+3, r19	; 0x03
    13e2:	2a 83       	std	Y+2, r18	; 0x02
    13e4:	8a 81       	ldd	r24, Y+2	; 0x02
    13e6:	9b 81       	ldd	r25, Y+3	; 0x03
    13e8:	81 30       	cpi	r24, 0x01	; 1
    13ea:	91 05       	cpc	r25, r1
    13ec:	c1 f0       	breq	.+48     	; 0x141e <ADC_init+0x52>
    13ee:	2a 81       	ldd	r18, Y+2	; 0x02
    13f0:	3b 81       	ldd	r19, Y+3	; 0x03
    13f2:	22 30       	cpi	r18, 0x02	; 2
    13f4:	31 05       	cpc	r19, r1
    13f6:	11 f1       	breq	.+68     	; 0x143c <ADC_init+0x70>
    13f8:	8a 81       	ldd	r24, Y+2	; 0x02
    13fa:	9b 81       	ldd	r25, Y+3	; 0x03
    13fc:	00 97       	sbiw	r24, 0x00	; 0
    13fe:	61 f5       	brne	.+88     	; 0x1458 <ADC_init+0x8c>
	  {
	  case ADC_REF_AVCC:
	  {
		  SET_BIT(ADMUX,REFS0);
    1400:	ac e7       	ldi	r26, 0x7C	; 124
    1402:	b0 e0       	ldi	r27, 0x00	; 0
    1404:	ec e7       	ldi	r30, 0x7C	; 124
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	80 81       	ld	r24, Z
    140a:	80 64       	ori	r24, 0x40	; 64
    140c:	8c 93       	st	X, r24
		  CLR_BIT(ADMUX,REFS1);
    140e:	ac e7       	ldi	r26, 0x7C	; 124
    1410:	b0 e0       	ldi	r27, 0x00	; 0
    1412:	ec e7       	ldi	r30, 0x7C	; 124
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	80 81       	ld	r24, Z
    1418:	8f 77       	andi	r24, 0x7F	; 127
    141a:	8c 93       	st	X, r24
    141c:	1d c0       	rjmp	.+58     	; 0x1458 <ADC_init+0x8c>

		  break;
	  }
	   case ADC_REF_AVREF:
	   {
	    CLR_BIT(ADMUX,REFS0);
    141e:	ac e7       	ldi	r26, 0x7C	; 124
    1420:	b0 e0       	ldi	r27, 0x00	; 0
    1422:	ec e7       	ldi	r30, 0x7C	; 124
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	8f 7b       	andi	r24, 0xBF	; 191
    142a:	8c 93       	st	X, r24
	    CLR_BIT(ADMUX,REFS1);
    142c:	ac e7       	ldi	r26, 0x7C	; 124
    142e:	b0 e0       	ldi	r27, 0x00	; 0
    1430:	ec e7       	ldi	r30, 0x7C	; 124
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	8f 77       	andi	r24, 0x7F	; 127
    1438:	8c 93       	st	X, r24
    143a:	0e c0       	rjmp	.+28     	; 0x1458 <ADC_init+0x8c>

	    break;
	   }
	   case ADC_REF_INTERNAL:
	   {
	    SET_BIT(ADMUX,REFS0);
    143c:	ac e7       	ldi	r26, 0x7C	; 124
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	ec e7       	ldi	r30, 0x7C	; 124
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	80 64       	ori	r24, 0x40	; 64
    1448:	8c 93       	st	X, r24
	    SET_BIT(ADMUX,REFS1);
    144a:	ac e7       	ldi	r26, 0x7C	; 124
    144c:	b0 e0       	ldi	r27, 0x00	; 0
    144e:	ec e7       	ldi	r30, 0x7C	; 124
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	80 81       	ld	r24, Z
    1454:	80 68       	ori	r24, 0x80	; 128
    1456:	8c 93       	st	X, r24
	    break;
	   }

	  }
	  //SELECT RA
	  CLR_BIT(ADMUX,ADLAR);
    1458:	ac e7       	ldi	r26, 0x7C	; 124
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	ec e7       	ldi	r30, 0x7C	; 124
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	80 81       	ld	r24, Z
    1462:	8f 7d       	andi	r24, 0xDF	; 223
    1464:	8c 93       	st	X, r24
	  //SINGLE CONV MODE
	  CLR_BIT(ADCSRA,ADATE);
    1466:	aa e7       	ldi	r26, 0x7A	; 122
    1468:	b0 e0       	ldi	r27, 0x00	; 0
    146a:	ea e7       	ldi	r30, 0x7A	; 122
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	80 81       	ld	r24, Z
    1470:	8f 7d       	andi	r24, 0xDF	; 223
    1472:	8c 93       	st	X, r24
	  //NO INTERUPT MODE
	  CLR_BIT(ADCSRA,ADIE);
    1474:	aa e7       	ldi	r26, 0x7A	; 122
    1476:	b0 e0       	ldi	r27, 0x00	; 0
    1478:	ea e7       	ldi	r30, 0x7A	; 122
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	80 81       	ld	r24, Z
    147e:	87 7f       	andi	r24, 0xF7	; 247
    1480:	8c 93       	st	X, r24
	  //prescaller
       SET_BIT(ADCSRA,ADPS0);
    1482:	aa e7       	ldi	r26, 0x7A	; 122
    1484:	b0 e0       	ldi	r27, 0x00	; 0
    1486:	ea e7       	ldi	r30, 0x7A	; 122
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	80 81       	ld	r24, Z
    148c:	81 60       	ori	r24, 0x01	; 1
    148e:	8c 93       	st	X, r24
       SET_BIT(ADCSRA,ADPS1);
    1490:	aa e7       	ldi	r26, 0x7A	; 122
    1492:	b0 e0       	ldi	r27, 0x00	; 0
    1494:	ea e7       	ldi	r30, 0x7A	; 122
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	82 60       	ori	r24, 0x02	; 2
    149c:	8c 93       	st	X, r24
       SET_BIT(ADCSRA,ADPS2);
    149e:	aa e7       	ldi	r26, 0x7A	; 122
    14a0:	b0 e0       	ldi	r27, 0x00	; 0
    14a2:	ea e7       	ldi	r30, 0x7A	; 122
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	84 60       	ori	r24, 0x04	; 4
    14aa:	8c 93       	st	X, r24




	  //LAST THING IS TO ENABLE ADC
	  SET_BIT(ADCSRA,ADEN);
    14ac:	aa e7       	ldi	r26, 0x7A	; 122
    14ae:	b0 e0       	ldi	r27, 0x00	; 0
    14b0:	ea e7       	ldi	r30, 0x7A	; 122
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	80 68       	ori	r24, 0x80	; 128
    14b8:	8c 93       	st	X, r24

  }
    14ba:	0f 90       	pop	r0
    14bc:	0f 90       	pop	r0
    14be:	0f 90       	pop	r0
    14c0:	cf 91       	pop	r28
    14c2:	df 91       	pop	r29
    14c4:	08 95       	ret

000014c6 <ADC_getDigitalValue>:
  void ADC_getDigitalValue(u8 channelId,u16* digitalValue)
  {
    14c6:	df 93       	push	r29
    14c8:	cf 93       	push	r28
    14ca:	00 d0       	rcall	.+0      	; 0x14cc <ADC_getDigitalValue+0x6>
    14cc:	0f 92       	push	r0
    14ce:	cd b7       	in	r28, 0x3d	; 61
    14d0:	de b7       	in	r29, 0x3e	; 62
    14d2:	89 83       	std	Y+1, r24	; 0x01
    14d4:	7b 83       	std	Y+3, r23	; 0x03
    14d6:	6a 83       	std	Y+2, r22	; 0x02

	  if((channelId<32)&&(digitalValue!=NULL))
    14d8:	89 81       	ldd	r24, Y+1	; 0x01
    14da:	80 32       	cpi	r24, 0x20	; 32
    14dc:	a0 f5       	brcc	.+104    	; 0x1546 <ADC_getDigitalValue+0x80>
    14de:	8a 81       	ldd	r24, Y+2	; 0x02
    14e0:	9b 81       	ldd	r25, Y+3	; 0x03
    14e2:	00 97       	sbiw	r24, 0x00	; 0
    14e4:	81 f1       	breq	.+96     	; 0x1546 <ADC_getDigitalValue+0x80>
	  {
		  //select channel
		  ADMUX = ADMUX & 0xF0;    //0b111100000
    14e6:	ac e7       	ldi	r26, 0x7C	; 124
    14e8:	b0 e0       	ldi	r27, 0x00	; 0
    14ea:	ec e7       	ldi	r30, 0x7C	; 124
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	80 7f       	andi	r24, 0xF0	; 240
    14f2:	8c 93       	st	X, r24
		  ADMUX = ADMUX | channelId;
    14f4:	ac e7       	ldi	r26, 0x7C	; 124
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	ec e7       	ldi	r30, 0x7C	; 124
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	90 81       	ld	r25, Z
    14fe:	89 81       	ldd	r24, Y+1	; 0x01
    1500:	89 2b       	or	r24, r25
    1502:	8c 93       	st	X, r24

		  //start conversion
		  SET_BIT(ADCSRA,ADSC);
    1504:	aa e7       	ldi	r26, 0x7A	; 122
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	ea e7       	ldi	r30, 0x7A	; 122
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	80 64       	ori	r24, 0x40	; 64
    1510:	8c 93       	st	X, r24

		  //BUSY WAIT FOR FLAG ADIF(BLOCKING)
		  while(0 == GET_BIT(ADCSRA,ADIF));
    1512:	ea e7       	ldi	r30, 0x7A	; 122
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	80 81       	ld	r24, Z
    1518:	82 95       	swap	r24
    151a:	8f 70       	andi	r24, 0x0F	; 15
    151c:	88 2f       	mov	r24, r24
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	81 70       	andi	r24, 0x01	; 1
    1522:	90 70       	andi	r25, 0x00	; 0
    1524:	00 97       	sbiw	r24, 0x00	; 0
    1526:	a9 f3       	breq	.-22     	; 0x1512 <ADC_getDigitalValue+0x4c>

		  //CLEAR HARDWARE FLAG==1
		  SET_BIT(ADCSRA,ADIF);
    1528:	aa e7       	ldi	r26, 0x7A	; 122
    152a:	b0 e0       	ldi	r27, 0x00	; 0
    152c:	ea e7       	ldi	r30, 0x7A	; 122
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	80 61       	ori	r24, 0x10	; 16
    1534:	8c 93       	st	X, r24

		  //read digital value from ADC data REG.
		  *digitalValue=ADC_u16;
    1536:	e8 e7       	ldi	r30, 0x78	; 120
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	80 81       	ld	r24, Z
    153c:	91 81       	ldd	r25, Z+1	; 0x01
    153e:	ea 81       	ldd	r30, Y+2	; 0x02
    1540:	fb 81       	ldd	r31, Y+3	; 0x03
    1542:	91 83       	std	Z+1, r25	; 0x01
    1544:	80 83       	st	Z, r24

	  }



  }
    1546:	0f 90       	pop	r0
    1548:	0f 90       	pop	r0
    154a:	0f 90       	pop	r0
    154c:	cf 91       	pop	r28
    154e:	df 91       	pop	r29
    1550:	08 95       	ret

00001552 <LM35_init>:




void LM35_init()
{
    1552:	df 93       	push	r29
    1554:	cf 93       	push	r28
    1556:	cd b7       	in	r28, 0x3d	; 61
    1558:	de b7       	in	r29, 0x3e	; 62
DIO_setPinDirection(DATA_PORT,DATA_PIN,DIO_PIN_INPUT);
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	61 e0       	ldi	r22, 0x01	; 1
    155e:	40 e0       	ldi	r20, 0x00	; 0
    1560:	0e 94 e7 06 	call	0xdce	; 0xdce <DIO_setPinDirection>
ADC_init(ADC_REF_AVCC);
    1564:	80 e0       	ldi	r24, 0x00	; 0
    1566:	0e 94 e6 09 	call	0x13cc	; 0x13cc <ADC_init>
}
    156a:	cf 91       	pop	r28
    156c:	df 91       	pop	r29
    156e:	08 95       	ret

00001570 <LM35_sendTemp>:

void LM35_sendTemp(u32*num)
{
    1570:	df 93       	push	r29
    1572:	cf 93       	push	r28
    1574:	00 d0       	rcall	.+0      	; 0x1576 <LM35_sendTemp+0x6>
    1576:	cd b7       	in	r28, 0x3d	; 61
    1578:	de b7       	in	r29, 0x3e	; 62
    157a:	9a 83       	std	Y+2, r25	; 0x02
    157c:	89 83       	std	Y+1, r24	; 0x01
	ADC_getDigitalValue(ADC_CHANNEL1,&x);
    157e:	28 e0       	ldi	r18, 0x08	; 8
    1580:	31 e0       	ldi	r19, 0x01	; 1
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	b9 01       	movw	r22, r18
    1586:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <ADC_getDigitalValue>

	 c=((u32)x*5000UL)/1020;
    158a:	80 91 08 01 	lds	r24, 0x0108
    158e:	90 91 09 01 	lds	r25, 0x0109
    1592:	cc 01       	movw	r24, r24
    1594:	a0 e0       	ldi	r26, 0x00	; 0
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	28 e8       	ldi	r18, 0x88	; 136
    159a:	33 e1       	ldi	r19, 0x13	; 19
    159c:	40 e0       	ldi	r20, 0x00	; 0
    159e:	50 e0       	ldi	r21, 0x00	; 0
    15a0:	bc 01       	movw	r22, r24
    15a2:	cd 01       	movw	r24, r26
    15a4:	0e 94 de 19 	call	0x33bc	; 0x33bc <__mulsi3>
    15a8:	dc 01       	movw	r26, r24
    15aa:	cb 01       	movw	r24, r22
    15ac:	2c ef       	ldi	r18, 0xFC	; 252
    15ae:	33 e0       	ldi	r19, 0x03	; 3
    15b0:	40 e0       	ldi	r20, 0x00	; 0
    15b2:	50 e0       	ldi	r21, 0x00	; 0
    15b4:	bc 01       	movw	r22, r24
    15b6:	cd 01       	movw	r24, r26
    15b8:	0e 94 11 1a 	call	0x3422	; 0x3422 <__udivmodsi4>
    15bc:	da 01       	movw	r26, r20
    15be:	c9 01       	movw	r24, r18
    15c0:	80 93 0a 01 	sts	0x010A, r24
    15c4:	90 93 0b 01 	sts	0x010B, r25
    15c8:	a0 93 0c 01 	sts	0x010C, r26
    15cc:	b0 93 0d 01 	sts	0x010D, r27

	*num=(c/10);
    15d0:	80 91 0a 01 	lds	r24, 0x010A
    15d4:	90 91 0b 01 	lds	r25, 0x010B
    15d8:	a0 91 0c 01 	lds	r26, 0x010C
    15dc:	b0 91 0d 01 	lds	r27, 0x010D
    15e0:	2a e0       	ldi	r18, 0x0A	; 10
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	40 e0       	ldi	r20, 0x00	; 0
    15e6:	50 e0       	ldi	r21, 0x00	; 0
    15e8:	bc 01       	movw	r22, r24
    15ea:	cd 01       	movw	r24, r26
    15ec:	0e 94 11 1a 	call	0x3422	; 0x3422 <__udivmodsi4>
    15f0:	da 01       	movw	r26, r20
    15f2:	c9 01       	movw	r24, r18
    15f4:	e9 81       	ldd	r30, Y+1	; 0x01
    15f6:	fa 81       	ldd	r31, Y+2	; 0x02
    15f8:	80 83       	st	Z, r24
    15fa:	91 83       	std	Z+1, r25	; 0x01
    15fc:	a2 83       	std	Z+2, r26	; 0x02
    15fe:	b3 83       	std	Z+3, r27	; 0x03

}
    1600:	0f 90       	pop	r0
    1602:	0f 90       	pop	r0
    1604:	cf 91       	pop	r28
    1606:	df 91       	pop	r29
    1608:	08 95       	ret

0000160a <LCD_init>:




void LCD_init(void)
{
    160a:	0f 93       	push	r16
    160c:	1f 93       	push	r17
    160e:	df 93       	push	r29
    1610:	cf 93       	push	r28
    1612:	cd b7       	in	r28, 0x3d	; 61
    1614:	de b7       	in	r29, 0x3e	; 62
    1616:	ca 55       	subi	r28, 0x5A	; 90
    1618:	d0 40       	sbci	r29, 0x00	; 0
    161a:	0f b6       	in	r0, 0x3f	; 63
    161c:	f8 94       	cli
    161e:	de bf       	out	0x3e, r29	; 62
    1620:	0f be       	out	0x3f, r0	; 63
    1622:	cd bf       	out	0x3d, r28	; 61
	// Intialize LCD pins As OutPut Pins
	DIO_setPinDirection(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_OUTPUT);
    1624:	82 e0       	ldi	r24, 0x02	; 2
    1626:	67 e0       	ldi	r22, 0x07	; 7
    1628:	41 e0       	ldi	r20, 0x01	; 1
    162a:	0e 94 e7 06 	call	0xdce	; 0xdce <DIO_setPinDirection>
	DIO_setPinDirection(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_OUTPUT);
    162e:	82 e0       	ldi	r24, 0x02	; 2
    1630:	66 e0       	ldi	r22, 0x06	; 6
    1632:	41 e0       	ldi	r20, 0x01	; 1
    1634:	0e 94 e7 06 	call	0xdce	; 0xdce <DIO_setPinDirection>
	DIO_setPinDirection(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_OUTPUT);
    1638:	82 e0       	ldi	r24, 0x02	; 2
    163a:	61 e0       	ldi	r22, 0x01	; 1
    163c:	41 e0       	ldi	r20, 0x01	; 1
    163e:	0e 94 e7 06 	call	0xdce	; 0xdce <DIO_setPinDirection>
	DIO_setPinDirection(LCD_D4_PORT,LCD_D4_PIN,DIO_PIN_OUTPUT);
    1642:	82 e0       	ldi	r24, 0x02	; 2
    1644:	62 e0       	ldi	r22, 0x02	; 2
    1646:	41 e0       	ldi	r20, 0x01	; 1
    1648:	0e 94 e7 06 	call	0xdce	; 0xdce <DIO_setPinDirection>
	DIO_setPinDirection(LCD_D5_PORT,LCD_D5_PIN,DIO_PIN_OUTPUT);
    164c:	82 e0       	ldi	r24, 0x02	; 2
    164e:	60 e0       	ldi	r22, 0x00	; 0
    1650:	41 e0       	ldi	r20, 0x01	; 1
    1652:	0e 94 e7 06 	call	0xdce	; 0xdce <DIO_setPinDirection>
	DIO_setPinDirection(LCD_D6_PORT,LCD_D6_PIN,DIO_PIN_OUTPUT);
    1656:	82 e0       	ldi	r24, 0x02	; 2
    1658:	64 e0       	ldi	r22, 0x04	; 4
    165a:	41 e0       	ldi	r20, 0x01	; 1
    165c:	0e 94 e7 06 	call	0xdce	; 0xdce <DIO_setPinDirection>
	DIO_setPinDirection(LCD_D7_PORT,LCD_D7_PIN,DIO_PIN_OUTPUT);
    1660:	82 e0       	ldi	r24, 0x02	; 2
    1662:	65 e0       	ldi	r22, 0x05	; 5
    1664:	41 e0       	ldi	r20, 0x01	; 1
    1666:	0e 94 e7 06 	call	0xdce	; 0xdce <DIO_setPinDirection>
    166a:	fe 01       	movw	r30, r28
    166c:	e9 5a       	subi	r30, 0xA9	; 169
    166e:	ff 4f       	sbci	r31, 0xFF	; 255
    1670:	80 e0       	ldi	r24, 0x00	; 0
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	ac e0       	ldi	r26, 0x0C	; 12
    1676:	b2 e4       	ldi	r27, 0x42	; 66
    1678:	80 83       	st	Z, r24
    167a:	91 83       	std	Z+1, r25	; 0x01
    167c:	a2 83       	std	Z+2, r26	; 0x02
    167e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1680:	8e 01       	movw	r16, r28
    1682:	0d 5a       	subi	r16, 0xAD	; 173
    1684:	1f 4f       	sbci	r17, 0xFF	; 255
    1686:	fe 01       	movw	r30, r28
    1688:	e9 5a       	subi	r30, 0xA9	; 169
    168a:	ff 4f       	sbci	r31, 0xFF	; 255
    168c:	60 81       	ld	r22, Z
    168e:	71 81       	ldd	r23, Z+1	; 0x01
    1690:	82 81       	ldd	r24, Z+2	; 0x02
    1692:	93 81       	ldd	r25, Z+3	; 0x03
    1694:	20 e0       	ldi	r18, 0x00	; 0
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	4a e7       	ldi	r20, 0x7A	; 122
    169a:	55 e4       	ldi	r21, 0x45	; 69
    169c:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    16a0:	dc 01       	movw	r26, r24
    16a2:	cb 01       	movw	r24, r22
    16a4:	f8 01       	movw	r30, r16
    16a6:	80 83       	st	Z, r24
    16a8:	91 83       	std	Z+1, r25	; 0x01
    16aa:	a2 83       	std	Z+2, r26	; 0x02
    16ac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16ae:	fe 01       	movw	r30, r28
    16b0:	ed 5a       	subi	r30, 0xAD	; 173
    16b2:	ff 4f       	sbci	r31, 0xFF	; 255
    16b4:	60 81       	ld	r22, Z
    16b6:	71 81       	ldd	r23, Z+1	; 0x01
    16b8:	82 81       	ldd	r24, Z+2	; 0x02
    16ba:	93 81       	ldd	r25, Z+3	; 0x03
    16bc:	20 e0       	ldi	r18, 0x00	; 0
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	40 e8       	ldi	r20, 0x80	; 128
    16c2:	5f e3       	ldi	r21, 0x3F	; 63
    16c4:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    16c8:	88 23       	and	r24, r24
    16ca:	44 f4       	brge	.+16     	; 0x16dc <LCD_init+0xd2>
		__ticks = 1;
    16cc:	fe 01       	movw	r30, r28
    16ce:	ef 5a       	subi	r30, 0xAF	; 175
    16d0:	ff 4f       	sbci	r31, 0xFF	; 255
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	91 83       	std	Z+1, r25	; 0x01
    16d8:	80 83       	st	Z, r24
    16da:	64 c0       	rjmp	.+200    	; 0x17a4 <LCD_init+0x19a>
	else if (__tmp > 65535)
    16dc:	fe 01       	movw	r30, r28
    16de:	ed 5a       	subi	r30, 0xAD	; 173
    16e0:	ff 4f       	sbci	r31, 0xFF	; 255
    16e2:	60 81       	ld	r22, Z
    16e4:	71 81       	ldd	r23, Z+1	; 0x01
    16e6:	82 81       	ldd	r24, Z+2	; 0x02
    16e8:	93 81       	ldd	r25, Z+3	; 0x03
    16ea:	20 e0       	ldi	r18, 0x00	; 0
    16ec:	3f ef       	ldi	r19, 0xFF	; 255
    16ee:	4f e7       	ldi	r20, 0x7F	; 127
    16f0:	57 e4       	ldi	r21, 0x47	; 71
    16f2:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    16f6:	18 16       	cp	r1, r24
    16f8:	0c f0       	brlt	.+2      	; 0x16fc <LCD_init+0xf2>
    16fa:	43 c0       	rjmp	.+134    	; 0x1782 <LCD_init+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16fc:	fe 01       	movw	r30, r28
    16fe:	e9 5a       	subi	r30, 0xA9	; 169
    1700:	ff 4f       	sbci	r31, 0xFF	; 255
    1702:	60 81       	ld	r22, Z
    1704:	71 81       	ldd	r23, Z+1	; 0x01
    1706:	82 81       	ldd	r24, Z+2	; 0x02
    1708:	93 81       	ldd	r25, Z+3	; 0x03
    170a:	20 e0       	ldi	r18, 0x00	; 0
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	40 e2       	ldi	r20, 0x20	; 32
    1710:	51 e4       	ldi	r21, 0x41	; 65
    1712:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    1716:	dc 01       	movw	r26, r24
    1718:	cb 01       	movw	r24, r22
    171a:	8e 01       	movw	r16, r28
    171c:	0f 5a       	subi	r16, 0xAF	; 175
    171e:	1f 4f       	sbci	r17, 0xFF	; 255
    1720:	bc 01       	movw	r22, r24
    1722:	cd 01       	movw	r24, r26
    1724:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    1728:	dc 01       	movw	r26, r24
    172a:	cb 01       	movw	r24, r22
    172c:	f8 01       	movw	r30, r16
    172e:	91 83       	std	Z+1, r25	; 0x01
    1730:	80 83       	st	Z, r24
    1732:	1f c0       	rjmp	.+62     	; 0x1772 <LCD_init+0x168>
    1734:	fe 01       	movw	r30, r28
    1736:	e1 5b       	subi	r30, 0xB1	; 177
    1738:	ff 4f       	sbci	r31, 0xFF	; 255
    173a:	80 e9       	ldi	r24, 0x90	; 144
    173c:	91 e0       	ldi	r25, 0x01	; 1
    173e:	91 83       	std	Z+1, r25	; 0x01
    1740:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1742:	fe 01       	movw	r30, r28
    1744:	e1 5b       	subi	r30, 0xB1	; 177
    1746:	ff 4f       	sbci	r31, 0xFF	; 255
    1748:	80 81       	ld	r24, Z
    174a:	91 81       	ldd	r25, Z+1	; 0x01
    174c:	01 97       	sbiw	r24, 0x01	; 1
    174e:	f1 f7       	brne	.-4      	; 0x174c <LCD_init+0x142>
    1750:	fe 01       	movw	r30, r28
    1752:	e1 5b       	subi	r30, 0xB1	; 177
    1754:	ff 4f       	sbci	r31, 0xFF	; 255
    1756:	91 83       	std	Z+1, r25	; 0x01
    1758:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    175a:	de 01       	movw	r26, r28
    175c:	af 5a       	subi	r26, 0xAF	; 175
    175e:	bf 4f       	sbci	r27, 0xFF	; 255
    1760:	fe 01       	movw	r30, r28
    1762:	ef 5a       	subi	r30, 0xAF	; 175
    1764:	ff 4f       	sbci	r31, 0xFF	; 255
    1766:	80 81       	ld	r24, Z
    1768:	91 81       	ldd	r25, Z+1	; 0x01
    176a:	01 97       	sbiw	r24, 0x01	; 1
    176c:	11 96       	adiw	r26, 0x01	; 1
    176e:	9c 93       	st	X, r25
    1770:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1772:	fe 01       	movw	r30, r28
    1774:	ef 5a       	subi	r30, 0xAF	; 175
    1776:	ff 4f       	sbci	r31, 0xFF	; 255
    1778:	80 81       	ld	r24, Z
    177a:	91 81       	ldd	r25, Z+1	; 0x01
    177c:	00 97       	sbiw	r24, 0x00	; 0
    177e:	d1 f6       	brne	.-76     	; 0x1734 <LCD_init+0x12a>
    1780:	27 c0       	rjmp	.+78     	; 0x17d0 <LCD_init+0x1c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1782:	8e 01       	movw	r16, r28
    1784:	0f 5a       	subi	r16, 0xAF	; 175
    1786:	1f 4f       	sbci	r17, 0xFF	; 255
    1788:	fe 01       	movw	r30, r28
    178a:	ed 5a       	subi	r30, 0xAD	; 173
    178c:	ff 4f       	sbci	r31, 0xFF	; 255
    178e:	60 81       	ld	r22, Z
    1790:	71 81       	ldd	r23, Z+1	; 0x01
    1792:	82 81       	ldd	r24, Z+2	; 0x02
    1794:	93 81       	ldd	r25, Z+3	; 0x03
    1796:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    179a:	dc 01       	movw	r26, r24
    179c:	cb 01       	movw	r24, r22
    179e:	f8 01       	movw	r30, r16
    17a0:	91 83       	std	Z+1, r25	; 0x01
    17a2:	80 83       	st	Z, r24
    17a4:	de 01       	movw	r26, r28
    17a6:	a3 5b       	subi	r26, 0xB3	; 179
    17a8:	bf 4f       	sbci	r27, 0xFF	; 255
    17aa:	fe 01       	movw	r30, r28
    17ac:	ef 5a       	subi	r30, 0xAF	; 175
    17ae:	ff 4f       	sbci	r31, 0xFF	; 255
    17b0:	80 81       	ld	r24, Z
    17b2:	91 81       	ldd	r25, Z+1	; 0x01
    17b4:	8d 93       	st	X+, r24
    17b6:	9c 93       	st	X, r25
    17b8:	fe 01       	movw	r30, r28
    17ba:	e3 5b       	subi	r30, 0xB3	; 179
    17bc:	ff 4f       	sbci	r31, 0xFF	; 255
    17be:	80 81       	ld	r24, Z
    17c0:	91 81       	ldd	r25, Z+1	; 0x01
    17c2:	01 97       	sbiw	r24, 0x01	; 1
    17c4:	f1 f7       	brne	.-4      	; 0x17c2 <LCD_init+0x1b8>
    17c6:	fe 01       	movw	r30, r28
    17c8:	e3 5b       	subi	r30, 0xB3	; 179
    17ca:	ff 4f       	sbci	r31, 0xFF	; 255
    17cc:	91 83       	std	Z+1, r25	; 0x01
    17ce:	80 83       	st	Z, r24

	_delay_ms(35);

	// set Rs pin = 0 (write command)
	DIO_setPinValue(LCD_RS_PORT, LCD_RS_PIN, DIO_PIN_LOW);
    17d0:	82 e0       	ldi	r24, 0x02	; 2
    17d2:	66 e0       	ldi	r22, 0x06	; 6
    17d4:	40 e0       	ldi	r20, 0x00	; 0
    17d6:	0e 94 c9 07 	call	0xf92	; 0xf92 <DIO_setPinValue>
	// set Rw pin = 0 (write)
	DIO_setPinValue(LCD_RW_PORT, LCD_RW_PIN, DIO_PIN_LOW);
    17da:	82 e0       	ldi	r24, 0x02	; 2
    17dc:	67 e0       	ldi	r22, 0x07	; 7
    17de:	40 e0       	ldi	r20, 0x00	; 0
    17e0:	0e 94 c9 07 	call	0xf92	; 0xf92 <DIO_setPinValue>
	private_writeHalfPort(0b0010);
    17e4:	82 e0       	ldi	r24, 0x02	; 2
    17e6:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <private_writeHalfPort>
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
    17ea:	82 e0       	ldi	r24, 0x02	; 2
    17ec:	61 e0       	ldi	r22, 0x01	; 1
    17ee:	41 e0       	ldi	r20, 0x01	; 1
    17f0:	0e 94 c9 07 	call	0xf92	; 0xf92 <DIO_setPinValue>
    17f4:	fe 01       	movw	r30, r28
    17f6:	e7 5b       	subi	r30, 0xB7	; 183
    17f8:	ff 4f       	sbci	r31, 0xFF	; 255
    17fa:	80 e0       	ldi	r24, 0x00	; 0
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	a0 e8       	ldi	r26, 0x80	; 128
    1800:	bf e3       	ldi	r27, 0x3F	; 63
    1802:	80 83       	st	Z, r24
    1804:	91 83       	std	Z+1, r25	; 0x01
    1806:	a2 83       	std	Z+2, r26	; 0x02
    1808:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    180a:	8e 01       	movw	r16, r28
    180c:	0b 5b       	subi	r16, 0xBB	; 187
    180e:	1f 4f       	sbci	r17, 0xFF	; 255
    1810:	fe 01       	movw	r30, r28
    1812:	e7 5b       	subi	r30, 0xB7	; 183
    1814:	ff 4f       	sbci	r31, 0xFF	; 255
    1816:	60 81       	ld	r22, Z
    1818:	71 81       	ldd	r23, Z+1	; 0x01
    181a:	82 81       	ldd	r24, Z+2	; 0x02
    181c:	93 81       	ldd	r25, Z+3	; 0x03
    181e:	20 e0       	ldi	r18, 0x00	; 0
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	4a e7       	ldi	r20, 0x7A	; 122
    1824:	55 e4       	ldi	r21, 0x45	; 69
    1826:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    182a:	dc 01       	movw	r26, r24
    182c:	cb 01       	movw	r24, r22
    182e:	f8 01       	movw	r30, r16
    1830:	80 83       	st	Z, r24
    1832:	91 83       	std	Z+1, r25	; 0x01
    1834:	a2 83       	std	Z+2, r26	; 0x02
    1836:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1838:	fe 01       	movw	r30, r28
    183a:	eb 5b       	subi	r30, 0xBB	; 187
    183c:	ff 4f       	sbci	r31, 0xFF	; 255
    183e:	60 81       	ld	r22, Z
    1840:	71 81       	ldd	r23, Z+1	; 0x01
    1842:	82 81       	ldd	r24, Z+2	; 0x02
    1844:	93 81       	ldd	r25, Z+3	; 0x03
    1846:	20 e0       	ldi	r18, 0x00	; 0
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	40 e8       	ldi	r20, 0x80	; 128
    184c:	5f e3       	ldi	r21, 0x3F	; 63
    184e:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    1852:	88 23       	and	r24, r24
    1854:	44 f4       	brge	.+16     	; 0x1866 <LCD_init+0x25c>
		__ticks = 1;
    1856:	fe 01       	movw	r30, r28
    1858:	ed 5b       	subi	r30, 0xBD	; 189
    185a:	ff 4f       	sbci	r31, 0xFF	; 255
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	91 83       	std	Z+1, r25	; 0x01
    1862:	80 83       	st	Z, r24
    1864:	64 c0       	rjmp	.+200    	; 0x192e <LCD_init+0x324>
	else if (__tmp > 65535)
    1866:	fe 01       	movw	r30, r28
    1868:	eb 5b       	subi	r30, 0xBB	; 187
    186a:	ff 4f       	sbci	r31, 0xFF	; 255
    186c:	60 81       	ld	r22, Z
    186e:	71 81       	ldd	r23, Z+1	; 0x01
    1870:	82 81       	ldd	r24, Z+2	; 0x02
    1872:	93 81       	ldd	r25, Z+3	; 0x03
    1874:	20 e0       	ldi	r18, 0x00	; 0
    1876:	3f ef       	ldi	r19, 0xFF	; 255
    1878:	4f e7       	ldi	r20, 0x7F	; 127
    187a:	57 e4       	ldi	r21, 0x47	; 71
    187c:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    1880:	18 16       	cp	r1, r24
    1882:	0c f0       	brlt	.+2      	; 0x1886 <LCD_init+0x27c>
    1884:	43 c0       	rjmp	.+134    	; 0x190c <LCD_init+0x302>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1886:	fe 01       	movw	r30, r28
    1888:	e7 5b       	subi	r30, 0xB7	; 183
    188a:	ff 4f       	sbci	r31, 0xFF	; 255
    188c:	60 81       	ld	r22, Z
    188e:	71 81       	ldd	r23, Z+1	; 0x01
    1890:	82 81       	ldd	r24, Z+2	; 0x02
    1892:	93 81       	ldd	r25, Z+3	; 0x03
    1894:	20 e0       	ldi	r18, 0x00	; 0
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	40 e2       	ldi	r20, 0x20	; 32
    189a:	51 e4       	ldi	r21, 0x41	; 65
    189c:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    18a0:	dc 01       	movw	r26, r24
    18a2:	cb 01       	movw	r24, r22
    18a4:	8e 01       	movw	r16, r28
    18a6:	0d 5b       	subi	r16, 0xBD	; 189
    18a8:	1f 4f       	sbci	r17, 0xFF	; 255
    18aa:	bc 01       	movw	r22, r24
    18ac:	cd 01       	movw	r24, r26
    18ae:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    18b2:	dc 01       	movw	r26, r24
    18b4:	cb 01       	movw	r24, r22
    18b6:	f8 01       	movw	r30, r16
    18b8:	91 83       	std	Z+1, r25	; 0x01
    18ba:	80 83       	st	Z, r24
    18bc:	1f c0       	rjmp	.+62     	; 0x18fc <LCD_init+0x2f2>
    18be:	fe 01       	movw	r30, r28
    18c0:	ef 5b       	subi	r30, 0xBF	; 191
    18c2:	ff 4f       	sbci	r31, 0xFF	; 255
    18c4:	80 e9       	ldi	r24, 0x90	; 144
    18c6:	91 e0       	ldi	r25, 0x01	; 1
    18c8:	91 83       	std	Z+1, r25	; 0x01
    18ca:	80 83       	st	Z, r24
    18cc:	fe 01       	movw	r30, r28
    18ce:	ef 5b       	subi	r30, 0xBF	; 191
    18d0:	ff 4f       	sbci	r31, 0xFF	; 255
    18d2:	80 81       	ld	r24, Z
    18d4:	91 81       	ldd	r25, Z+1	; 0x01
    18d6:	01 97       	sbiw	r24, 0x01	; 1
    18d8:	f1 f7       	brne	.-4      	; 0x18d6 <LCD_init+0x2cc>
    18da:	fe 01       	movw	r30, r28
    18dc:	ef 5b       	subi	r30, 0xBF	; 191
    18de:	ff 4f       	sbci	r31, 0xFF	; 255
    18e0:	91 83       	std	Z+1, r25	; 0x01
    18e2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18e4:	de 01       	movw	r26, r28
    18e6:	ad 5b       	subi	r26, 0xBD	; 189
    18e8:	bf 4f       	sbci	r27, 0xFF	; 255
    18ea:	fe 01       	movw	r30, r28
    18ec:	ed 5b       	subi	r30, 0xBD	; 189
    18ee:	ff 4f       	sbci	r31, 0xFF	; 255
    18f0:	80 81       	ld	r24, Z
    18f2:	91 81       	ldd	r25, Z+1	; 0x01
    18f4:	01 97       	sbiw	r24, 0x01	; 1
    18f6:	11 96       	adiw	r26, 0x01	; 1
    18f8:	9c 93       	st	X, r25
    18fa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18fc:	fe 01       	movw	r30, r28
    18fe:	ed 5b       	subi	r30, 0xBD	; 189
    1900:	ff 4f       	sbci	r31, 0xFF	; 255
    1902:	80 81       	ld	r24, Z
    1904:	91 81       	ldd	r25, Z+1	; 0x01
    1906:	00 97       	sbiw	r24, 0x00	; 0
    1908:	d1 f6       	brne	.-76     	; 0x18be <LCD_init+0x2b4>
    190a:	24 c0       	rjmp	.+72     	; 0x1954 <LCD_init+0x34a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    190c:	8e 01       	movw	r16, r28
    190e:	0d 5b       	subi	r16, 0xBD	; 189
    1910:	1f 4f       	sbci	r17, 0xFF	; 255
    1912:	fe 01       	movw	r30, r28
    1914:	eb 5b       	subi	r30, 0xBB	; 187
    1916:	ff 4f       	sbci	r31, 0xFF	; 255
    1918:	60 81       	ld	r22, Z
    191a:	71 81       	ldd	r23, Z+1	; 0x01
    191c:	82 81       	ldd	r24, Z+2	; 0x02
    191e:	93 81       	ldd	r25, Z+3	; 0x03
    1920:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    1924:	dc 01       	movw	r26, r24
    1926:	cb 01       	movw	r24, r22
    1928:	f8 01       	movw	r30, r16
    192a:	91 83       	std	Z+1, r25	; 0x01
    192c:	80 83       	st	Z, r24
    192e:	fe 01       	movw	r30, r28
    1930:	ed 5b       	subi	r30, 0xBD	; 189
    1932:	ff 4f       	sbci	r31, 0xFF	; 255
    1934:	80 81       	ld	r24, Z
    1936:	91 81       	ldd	r25, Z+1	; 0x01
    1938:	fe 01       	movw	r30, r28
    193a:	ff 96       	adiw	r30, 0x3f	; 63
    193c:	91 83       	std	Z+1, r25	; 0x01
    193e:	80 83       	st	Z, r24
    1940:	fe 01       	movw	r30, r28
    1942:	ff 96       	adiw	r30, 0x3f	; 63
    1944:	80 81       	ld	r24, Z
    1946:	91 81       	ldd	r25, Z+1	; 0x01
    1948:	01 97       	sbiw	r24, 0x01	; 1
    194a:	f1 f7       	brne	.-4      	; 0x1948 <LCD_init+0x33e>
    194c:	fe 01       	movw	r30, r28
    194e:	ff 96       	adiw	r30, 0x3f	; 63
    1950:	91 83       	std	Z+1, r25	; 0x01
    1952:	80 83       	st	Z, r24
	_delay_ms(1);
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
    1954:	82 e0       	ldi	r24, 0x02	; 2
    1956:	61 e0       	ldi	r22, 0x01	; 1
    1958:	40 e0       	ldi	r20, 0x00	; 0
    195a:	0e 94 c9 07 	call	0xf92	; 0xf92 <DIO_setPinValue>
	// Function Set command 2*16 LCD, 4 Bit Mode, 5*7 Font
	LCD_sendCmnd(0b00101000);
    195e:	88 e2       	ldi	r24, 0x28	; 40
    1960:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <LCD_sendCmnd>
    1964:	80 e0       	ldi	r24, 0x00	; 0
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	a4 e3       	ldi	r26, 0x34	; 52
    196a:	b2 e4       	ldi	r27, 0x42	; 66
    196c:	8b af       	std	Y+59, r24	; 0x3b
    196e:	9c af       	std	Y+60, r25	; 0x3c
    1970:	ad af       	std	Y+61, r26	; 0x3d
    1972:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1974:	6b ad       	ldd	r22, Y+59	; 0x3b
    1976:	7c ad       	ldd	r23, Y+60	; 0x3c
    1978:	8d ad       	ldd	r24, Y+61	; 0x3d
    197a:	9e ad       	ldd	r25, Y+62	; 0x3e
    197c:	2b ea       	ldi	r18, 0xAB	; 171
    197e:	3a ea       	ldi	r19, 0xAA	; 170
    1980:	4a ea       	ldi	r20, 0xAA	; 170
    1982:	50 e4       	ldi	r21, 0x40	; 64
    1984:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    1988:	dc 01       	movw	r26, r24
    198a:	cb 01       	movw	r24, r22
    198c:	8f ab       	std	Y+55, r24	; 0x37
    198e:	98 af       	std	Y+56, r25	; 0x38
    1990:	a9 af       	std	Y+57, r26	; 0x39
    1992:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1994:	6f a9       	ldd	r22, Y+55	; 0x37
    1996:	78 ad       	ldd	r23, Y+56	; 0x38
    1998:	89 ad       	ldd	r24, Y+57	; 0x39
    199a:	9a ad       	ldd	r25, Y+58	; 0x3a
    199c:	20 e0       	ldi	r18, 0x00	; 0
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	40 e8       	ldi	r20, 0x80	; 128
    19a2:	5f e3       	ldi	r21, 0x3F	; 63
    19a4:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    19a8:	88 23       	and	r24, r24
    19aa:	1c f4       	brge	.+6      	; 0x19b2 <LCD_init+0x3a8>
		__ticks = 1;
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	8e ab       	std	Y+54, r24	; 0x36
    19b0:	91 c0       	rjmp	.+290    	; 0x1ad4 <LCD_init+0x4ca>
	else if (__tmp > 255)
    19b2:	6f a9       	ldd	r22, Y+55	; 0x37
    19b4:	78 ad       	ldd	r23, Y+56	; 0x38
    19b6:	89 ad       	ldd	r24, Y+57	; 0x39
    19b8:	9a ad       	ldd	r25, Y+58	; 0x3a
    19ba:	20 e0       	ldi	r18, 0x00	; 0
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	4f e7       	ldi	r20, 0x7F	; 127
    19c0:	53 e4       	ldi	r21, 0x43	; 67
    19c2:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    19c6:	18 16       	cp	r1, r24
    19c8:	0c f0       	brlt	.+2      	; 0x19cc <LCD_init+0x3c2>
    19ca:	7b c0       	rjmp	.+246    	; 0x1ac2 <LCD_init+0x4b8>
	{
		_delay_ms(__us / 1000.0);
    19cc:	6b ad       	ldd	r22, Y+59	; 0x3b
    19ce:	7c ad       	ldd	r23, Y+60	; 0x3c
    19d0:	8d ad       	ldd	r24, Y+61	; 0x3d
    19d2:	9e ad       	ldd	r25, Y+62	; 0x3e
    19d4:	20 e0       	ldi	r18, 0x00	; 0
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	4a e7       	ldi	r20, 0x7A	; 122
    19da:	54 e4       	ldi	r21, 0x44	; 68
    19dc:	0e 94 23 03 	call	0x646	; 0x646 <__divsf3>
    19e0:	dc 01       	movw	r26, r24
    19e2:	cb 01       	movw	r24, r22
    19e4:	8a ab       	std	Y+50, r24	; 0x32
    19e6:	9b ab       	std	Y+51, r25	; 0x33
    19e8:	ac ab       	std	Y+52, r26	; 0x34
    19ea:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ec:	6a a9       	ldd	r22, Y+50	; 0x32
    19ee:	7b a9       	ldd	r23, Y+51	; 0x33
    19f0:	8c a9       	ldd	r24, Y+52	; 0x34
    19f2:	9d a9       	ldd	r25, Y+53	; 0x35
    19f4:	20 e0       	ldi	r18, 0x00	; 0
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	4a e7       	ldi	r20, 0x7A	; 122
    19fa:	55 e4       	ldi	r21, 0x45	; 69
    19fc:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    1a00:	dc 01       	movw	r26, r24
    1a02:	cb 01       	movw	r24, r22
    1a04:	8e a7       	std	Y+46, r24	; 0x2e
    1a06:	9f a7       	std	Y+47, r25	; 0x2f
    1a08:	a8 ab       	std	Y+48, r26	; 0x30
    1a0a:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1a0c:	6e a5       	ldd	r22, Y+46	; 0x2e
    1a0e:	7f a5       	ldd	r23, Y+47	; 0x2f
    1a10:	88 a9       	ldd	r24, Y+48	; 0x30
    1a12:	99 a9       	ldd	r25, Y+49	; 0x31
    1a14:	20 e0       	ldi	r18, 0x00	; 0
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	40 e8       	ldi	r20, 0x80	; 128
    1a1a:	5f e3       	ldi	r21, 0x3F	; 63
    1a1c:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    1a20:	88 23       	and	r24, r24
    1a22:	2c f4       	brge	.+10     	; 0x1a2e <LCD_init+0x424>
		__ticks = 1;
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	9d a7       	std	Y+45, r25	; 0x2d
    1a2a:	8c a7       	std	Y+44, r24	; 0x2c
    1a2c:	3f c0       	rjmp	.+126    	; 0x1aac <LCD_init+0x4a2>
	else if (__tmp > 65535)
    1a2e:	6e a5       	ldd	r22, Y+46	; 0x2e
    1a30:	7f a5       	ldd	r23, Y+47	; 0x2f
    1a32:	88 a9       	ldd	r24, Y+48	; 0x30
    1a34:	99 a9       	ldd	r25, Y+49	; 0x31
    1a36:	20 e0       	ldi	r18, 0x00	; 0
    1a38:	3f ef       	ldi	r19, 0xFF	; 255
    1a3a:	4f e7       	ldi	r20, 0x7F	; 127
    1a3c:	57 e4       	ldi	r21, 0x47	; 71
    1a3e:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    1a42:	18 16       	cp	r1, r24
    1a44:	4c f5       	brge	.+82     	; 0x1a98 <LCD_init+0x48e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a46:	6a a9       	ldd	r22, Y+50	; 0x32
    1a48:	7b a9       	ldd	r23, Y+51	; 0x33
    1a4a:	8c a9       	ldd	r24, Y+52	; 0x34
    1a4c:	9d a9       	ldd	r25, Y+53	; 0x35
    1a4e:	20 e0       	ldi	r18, 0x00	; 0
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	40 e2       	ldi	r20, 0x20	; 32
    1a54:	51 e4       	ldi	r21, 0x41	; 65
    1a56:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    1a5a:	dc 01       	movw	r26, r24
    1a5c:	cb 01       	movw	r24, r22
    1a5e:	bc 01       	movw	r22, r24
    1a60:	cd 01       	movw	r24, r26
    1a62:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    1a66:	dc 01       	movw	r26, r24
    1a68:	cb 01       	movw	r24, r22
    1a6a:	9d a7       	std	Y+45, r25	; 0x2d
    1a6c:	8c a7       	std	Y+44, r24	; 0x2c
    1a6e:	0f c0       	rjmp	.+30     	; 0x1a8e <LCD_init+0x484>
    1a70:	80 e9       	ldi	r24, 0x90	; 144
    1a72:	91 e0       	ldi	r25, 0x01	; 1
    1a74:	9b a7       	std	Y+43, r25	; 0x2b
    1a76:	8a a7       	std	Y+42, r24	; 0x2a
    1a78:	8a a5       	ldd	r24, Y+42	; 0x2a
    1a7a:	9b a5       	ldd	r25, Y+43	; 0x2b
    1a7c:	01 97       	sbiw	r24, 0x01	; 1
    1a7e:	f1 f7       	brne	.-4      	; 0x1a7c <LCD_init+0x472>
    1a80:	9b a7       	std	Y+43, r25	; 0x2b
    1a82:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a84:	8c a5       	ldd	r24, Y+44	; 0x2c
    1a86:	9d a5       	ldd	r25, Y+45	; 0x2d
    1a88:	01 97       	sbiw	r24, 0x01	; 1
    1a8a:	9d a7       	std	Y+45, r25	; 0x2d
    1a8c:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a8e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1a90:	9d a5       	ldd	r25, Y+45	; 0x2d
    1a92:	00 97       	sbiw	r24, 0x00	; 0
    1a94:	69 f7       	brne	.-38     	; 0x1a70 <LCD_init+0x466>
    1a96:	24 c0       	rjmp	.+72     	; 0x1ae0 <LCD_init+0x4d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a98:	6e a5       	ldd	r22, Y+46	; 0x2e
    1a9a:	7f a5       	ldd	r23, Y+47	; 0x2f
    1a9c:	88 a9       	ldd	r24, Y+48	; 0x30
    1a9e:	99 a9       	ldd	r25, Y+49	; 0x31
    1aa0:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    1aa4:	dc 01       	movw	r26, r24
    1aa6:	cb 01       	movw	r24, r22
    1aa8:	9d a7       	std	Y+45, r25	; 0x2d
    1aaa:	8c a7       	std	Y+44, r24	; 0x2c
    1aac:	8c a5       	ldd	r24, Y+44	; 0x2c
    1aae:	9d a5       	ldd	r25, Y+45	; 0x2d
    1ab0:	99 a7       	std	Y+41, r25	; 0x29
    1ab2:	88 a7       	std	Y+40, r24	; 0x28
    1ab4:	88 a5       	ldd	r24, Y+40	; 0x28
    1ab6:	99 a5       	ldd	r25, Y+41	; 0x29
    1ab8:	01 97       	sbiw	r24, 0x01	; 1
    1aba:	f1 f7       	brne	.-4      	; 0x1ab8 <LCD_init+0x4ae>
    1abc:	99 a7       	std	Y+41, r25	; 0x29
    1abe:	88 a7       	std	Y+40, r24	; 0x28
    1ac0:	0f c0       	rjmp	.+30     	; 0x1ae0 <LCD_init+0x4d6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1ac2:	6f a9       	ldd	r22, Y+55	; 0x37
    1ac4:	78 ad       	ldd	r23, Y+56	; 0x38
    1ac6:	89 ad       	ldd	r24, Y+57	; 0x39
    1ac8:	9a ad       	ldd	r25, Y+58	; 0x3a
    1aca:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    1ace:	dc 01       	movw	r26, r24
    1ad0:	cb 01       	movw	r24, r22
    1ad2:	8e ab       	std	Y+54, r24	; 0x36
    1ad4:	8e a9       	ldd	r24, Y+54	; 0x36
    1ad6:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ad8:	8f a1       	ldd	r24, Y+39	; 0x27
    1ada:	8a 95       	dec	r24
    1adc:	f1 f7       	brne	.-4      	; 0x1ada <LCD_init+0x4d0>
    1ade:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(45);

	// Display on off Control(DisplayOn, Cursor on, Blink on)
	LCD_sendCmnd(0b00001111);
    1ae0:	8f e0       	ldi	r24, 0x0F	; 15
    1ae2:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <LCD_sendCmnd>
    1ae6:	80 e0       	ldi	r24, 0x00	; 0
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	a4 e3       	ldi	r26, 0x34	; 52
    1aec:	b2 e4       	ldi	r27, 0x42	; 66
    1aee:	8b a3       	std	Y+35, r24	; 0x23
    1af0:	9c a3       	std	Y+36, r25	; 0x24
    1af2:	ad a3       	std	Y+37, r26	; 0x25
    1af4:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1af6:	6b a1       	ldd	r22, Y+35	; 0x23
    1af8:	7c a1       	ldd	r23, Y+36	; 0x24
    1afa:	8d a1       	ldd	r24, Y+37	; 0x25
    1afc:	9e a1       	ldd	r25, Y+38	; 0x26
    1afe:	2b ea       	ldi	r18, 0xAB	; 171
    1b00:	3a ea       	ldi	r19, 0xAA	; 170
    1b02:	4a ea       	ldi	r20, 0xAA	; 170
    1b04:	50 e4       	ldi	r21, 0x40	; 64
    1b06:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    1b0a:	dc 01       	movw	r26, r24
    1b0c:	cb 01       	movw	r24, r22
    1b0e:	8f 8f       	std	Y+31, r24	; 0x1f
    1b10:	98 a3       	std	Y+32, r25	; 0x20
    1b12:	a9 a3       	std	Y+33, r26	; 0x21
    1b14:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1b16:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1b18:	78 a1       	ldd	r23, Y+32	; 0x20
    1b1a:	89 a1       	ldd	r24, Y+33	; 0x21
    1b1c:	9a a1       	ldd	r25, Y+34	; 0x22
    1b1e:	20 e0       	ldi	r18, 0x00	; 0
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	40 e8       	ldi	r20, 0x80	; 128
    1b24:	5f e3       	ldi	r21, 0x3F	; 63
    1b26:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    1b2a:	88 23       	and	r24, r24
    1b2c:	1c f4       	brge	.+6      	; 0x1b34 <LCD_init+0x52a>
		__ticks = 1;
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	8e 8f       	std	Y+30, r24	; 0x1e
    1b32:	91 c0       	rjmp	.+290    	; 0x1c56 <LCD_init+0x64c>
	else if (__tmp > 255)
    1b34:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1b36:	78 a1       	ldd	r23, Y+32	; 0x20
    1b38:	89 a1       	ldd	r24, Y+33	; 0x21
    1b3a:	9a a1       	ldd	r25, Y+34	; 0x22
    1b3c:	20 e0       	ldi	r18, 0x00	; 0
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	4f e7       	ldi	r20, 0x7F	; 127
    1b42:	53 e4       	ldi	r21, 0x43	; 67
    1b44:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    1b48:	18 16       	cp	r1, r24
    1b4a:	0c f0       	brlt	.+2      	; 0x1b4e <LCD_init+0x544>
    1b4c:	7b c0       	rjmp	.+246    	; 0x1c44 <LCD_init+0x63a>
	{
		_delay_ms(__us / 1000.0);
    1b4e:	6b a1       	ldd	r22, Y+35	; 0x23
    1b50:	7c a1       	ldd	r23, Y+36	; 0x24
    1b52:	8d a1       	ldd	r24, Y+37	; 0x25
    1b54:	9e a1       	ldd	r25, Y+38	; 0x26
    1b56:	20 e0       	ldi	r18, 0x00	; 0
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	4a e7       	ldi	r20, 0x7A	; 122
    1b5c:	54 e4       	ldi	r21, 0x44	; 68
    1b5e:	0e 94 23 03 	call	0x646	; 0x646 <__divsf3>
    1b62:	dc 01       	movw	r26, r24
    1b64:	cb 01       	movw	r24, r22
    1b66:	8a 8f       	std	Y+26, r24	; 0x1a
    1b68:	9b 8f       	std	Y+27, r25	; 0x1b
    1b6a:	ac 8f       	std	Y+28, r26	; 0x1c
    1b6c:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b6e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1b70:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1b72:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1b74:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1b76:	20 e0       	ldi	r18, 0x00	; 0
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	4a e7       	ldi	r20, 0x7A	; 122
    1b7c:	55 e4       	ldi	r21, 0x45	; 69
    1b7e:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    1b82:	dc 01       	movw	r26, r24
    1b84:	cb 01       	movw	r24, r22
    1b86:	8e 8b       	std	Y+22, r24	; 0x16
    1b88:	9f 8b       	std	Y+23, r25	; 0x17
    1b8a:	a8 8f       	std	Y+24, r26	; 0x18
    1b8c:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1b8e:	6e 89       	ldd	r22, Y+22	; 0x16
    1b90:	7f 89       	ldd	r23, Y+23	; 0x17
    1b92:	88 8d       	ldd	r24, Y+24	; 0x18
    1b94:	99 8d       	ldd	r25, Y+25	; 0x19
    1b96:	20 e0       	ldi	r18, 0x00	; 0
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	40 e8       	ldi	r20, 0x80	; 128
    1b9c:	5f e3       	ldi	r21, 0x3F	; 63
    1b9e:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    1ba2:	88 23       	and	r24, r24
    1ba4:	2c f4       	brge	.+10     	; 0x1bb0 <LCD_init+0x5a6>
		__ticks = 1;
    1ba6:	81 e0       	ldi	r24, 0x01	; 1
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	9d 8b       	std	Y+21, r25	; 0x15
    1bac:	8c 8b       	std	Y+20, r24	; 0x14
    1bae:	3f c0       	rjmp	.+126    	; 0x1c2e <LCD_init+0x624>
	else if (__tmp > 65535)
    1bb0:	6e 89       	ldd	r22, Y+22	; 0x16
    1bb2:	7f 89       	ldd	r23, Y+23	; 0x17
    1bb4:	88 8d       	ldd	r24, Y+24	; 0x18
    1bb6:	99 8d       	ldd	r25, Y+25	; 0x19
    1bb8:	20 e0       	ldi	r18, 0x00	; 0
    1bba:	3f ef       	ldi	r19, 0xFF	; 255
    1bbc:	4f e7       	ldi	r20, 0x7F	; 127
    1bbe:	57 e4       	ldi	r21, 0x47	; 71
    1bc0:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    1bc4:	18 16       	cp	r1, r24
    1bc6:	4c f5       	brge	.+82     	; 0x1c1a <LCD_init+0x610>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bc8:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1bca:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1bcc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1bce:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1bd0:	20 e0       	ldi	r18, 0x00	; 0
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	40 e2       	ldi	r20, 0x20	; 32
    1bd6:	51 e4       	ldi	r21, 0x41	; 65
    1bd8:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    1bdc:	dc 01       	movw	r26, r24
    1bde:	cb 01       	movw	r24, r22
    1be0:	bc 01       	movw	r22, r24
    1be2:	cd 01       	movw	r24, r26
    1be4:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    1be8:	dc 01       	movw	r26, r24
    1bea:	cb 01       	movw	r24, r22
    1bec:	9d 8b       	std	Y+21, r25	; 0x15
    1bee:	8c 8b       	std	Y+20, r24	; 0x14
    1bf0:	0f c0       	rjmp	.+30     	; 0x1c10 <LCD_init+0x606>
    1bf2:	80 e9       	ldi	r24, 0x90	; 144
    1bf4:	91 e0       	ldi	r25, 0x01	; 1
    1bf6:	9b 8b       	std	Y+19, r25	; 0x13
    1bf8:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1bfa:	8a 89       	ldd	r24, Y+18	; 0x12
    1bfc:	9b 89       	ldd	r25, Y+19	; 0x13
    1bfe:	01 97       	sbiw	r24, 0x01	; 1
    1c00:	f1 f7       	brne	.-4      	; 0x1bfe <LCD_init+0x5f4>
    1c02:	9b 8b       	std	Y+19, r25	; 0x13
    1c04:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c06:	8c 89       	ldd	r24, Y+20	; 0x14
    1c08:	9d 89       	ldd	r25, Y+21	; 0x15
    1c0a:	01 97       	sbiw	r24, 0x01	; 1
    1c0c:	9d 8b       	std	Y+21, r25	; 0x15
    1c0e:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c10:	8c 89       	ldd	r24, Y+20	; 0x14
    1c12:	9d 89       	ldd	r25, Y+21	; 0x15
    1c14:	00 97       	sbiw	r24, 0x00	; 0
    1c16:	69 f7       	brne	.-38     	; 0x1bf2 <LCD_init+0x5e8>
    1c18:	24 c0       	rjmp	.+72     	; 0x1c62 <LCD_init+0x658>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c1a:	6e 89       	ldd	r22, Y+22	; 0x16
    1c1c:	7f 89       	ldd	r23, Y+23	; 0x17
    1c1e:	88 8d       	ldd	r24, Y+24	; 0x18
    1c20:	99 8d       	ldd	r25, Y+25	; 0x19
    1c22:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    1c26:	dc 01       	movw	r26, r24
    1c28:	cb 01       	movw	r24, r22
    1c2a:	9d 8b       	std	Y+21, r25	; 0x15
    1c2c:	8c 8b       	std	Y+20, r24	; 0x14
    1c2e:	8c 89       	ldd	r24, Y+20	; 0x14
    1c30:	9d 89       	ldd	r25, Y+21	; 0x15
    1c32:	99 8b       	std	Y+17, r25	; 0x11
    1c34:	88 8b       	std	Y+16, r24	; 0x10
    1c36:	88 89       	ldd	r24, Y+16	; 0x10
    1c38:	99 89       	ldd	r25, Y+17	; 0x11
    1c3a:	01 97       	sbiw	r24, 0x01	; 1
    1c3c:	f1 f7       	brne	.-4      	; 0x1c3a <LCD_init+0x630>
    1c3e:	99 8b       	std	Y+17, r25	; 0x11
    1c40:	88 8b       	std	Y+16, r24	; 0x10
    1c42:	0f c0       	rjmp	.+30     	; 0x1c62 <LCD_init+0x658>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c44:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1c46:	78 a1       	ldd	r23, Y+32	; 0x20
    1c48:	89 a1       	ldd	r24, Y+33	; 0x21
    1c4a:	9a a1       	ldd	r25, Y+34	; 0x22
    1c4c:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    1c50:	dc 01       	movw	r26, r24
    1c52:	cb 01       	movw	r24, r22
    1c54:	8e 8f       	std	Y+30, r24	; 0x1e
    1c56:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c58:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c5a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c5c:	8a 95       	dec	r24
    1c5e:	f1 f7       	brne	.-4      	; 0x1c5c <LCD_init+0x652>
    1c60:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(45);

	// Clear Display
	LCD_sendCmnd(0b00000001);
    1c62:	81 e0       	ldi	r24, 0x01	; 1
    1c64:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <LCD_sendCmnd>
    1c68:	80 e0       	ldi	r24, 0x00	; 0
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	a0 e0       	ldi	r26, 0x00	; 0
    1c6e:	b0 e4       	ldi	r27, 0x40	; 64
    1c70:	8b 87       	std	Y+11, r24	; 0x0b
    1c72:	9c 87       	std	Y+12, r25	; 0x0c
    1c74:	ad 87       	std	Y+13, r26	; 0x0d
    1c76:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c78:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c80:	20 e0       	ldi	r18, 0x00	; 0
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	4a e7       	ldi	r20, 0x7A	; 122
    1c86:	55 e4       	ldi	r21, 0x45	; 69
    1c88:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    1c8c:	dc 01       	movw	r26, r24
    1c8e:	cb 01       	movw	r24, r22
    1c90:	8f 83       	std	Y+7, r24	; 0x07
    1c92:	98 87       	std	Y+8, r25	; 0x08
    1c94:	a9 87       	std	Y+9, r26	; 0x09
    1c96:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c98:	6f 81       	ldd	r22, Y+7	; 0x07
    1c9a:	78 85       	ldd	r23, Y+8	; 0x08
    1c9c:	89 85       	ldd	r24, Y+9	; 0x09
    1c9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ca0:	20 e0       	ldi	r18, 0x00	; 0
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	40 e8       	ldi	r20, 0x80	; 128
    1ca6:	5f e3       	ldi	r21, 0x3F	; 63
    1ca8:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    1cac:	88 23       	and	r24, r24
    1cae:	2c f4       	brge	.+10     	; 0x1cba <LCD_init+0x6b0>
		__ticks = 1;
    1cb0:	81 e0       	ldi	r24, 0x01	; 1
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	9e 83       	std	Y+6, r25	; 0x06
    1cb6:	8d 83       	std	Y+5, r24	; 0x05
    1cb8:	3f c0       	rjmp	.+126    	; 0x1d38 <LCD_init+0x72e>
	else if (__tmp > 65535)
    1cba:	6f 81       	ldd	r22, Y+7	; 0x07
    1cbc:	78 85       	ldd	r23, Y+8	; 0x08
    1cbe:	89 85       	ldd	r24, Y+9	; 0x09
    1cc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cc2:	20 e0       	ldi	r18, 0x00	; 0
    1cc4:	3f ef       	ldi	r19, 0xFF	; 255
    1cc6:	4f e7       	ldi	r20, 0x7F	; 127
    1cc8:	57 e4       	ldi	r21, 0x47	; 71
    1cca:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    1cce:	18 16       	cp	r1, r24
    1cd0:	4c f5       	brge	.+82     	; 0x1d24 <LCD_init+0x71a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cd2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cd4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cda:	20 e0       	ldi	r18, 0x00	; 0
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	40 e2       	ldi	r20, 0x20	; 32
    1ce0:	51 e4       	ldi	r21, 0x41	; 65
    1ce2:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    1ce6:	dc 01       	movw	r26, r24
    1ce8:	cb 01       	movw	r24, r22
    1cea:	bc 01       	movw	r22, r24
    1cec:	cd 01       	movw	r24, r26
    1cee:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    1cf2:	dc 01       	movw	r26, r24
    1cf4:	cb 01       	movw	r24, r22
    1cf6:	9e 83       	std	Y+6, r25	; 0x06
    1cf8:	8d 83       	std	Y+5, r24	; 0x05
    1cfa:	0f c0       	rjmp	.+30     	; 0x1d1a <LCD_init+0x710>
    1cfc:	80 e9       	ldi	r24, 0x90	; 144
    1cfe:	91 e0       	ldi	r25, 0x01	; 1
    1d00:	9c 83       	std	Y+4, r25	; 0x04
    1d02:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d04:	8b 81       	ldd	r24, Y+3	; 0x03
    1d06:	9c 81       	ldd	r25, Y+4	; 0x04
    1d08:	01 97       	sbiw	r24, 0x01	; 1
    1d0a:	f1 f7       	brne	.-4      	; 0x1d08 <LCD_init+0x6fe>
    1d0c:	9c 83       	std	Y+4, r25	; 0x04
    1d0e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d10:	8d 81       	ldd	r24, Y+5	; 0x05
    1d12:	9e 81       	ldd	r25, Y+6	; 0x06
    1d14:	01 97       	sbiw	r24, 0x01	; 1
    1d16:	9e 83       	std	Y+6, r25	; 0x06
    1d18:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d1e:	00 97       	sbiw	r24, 0x00	; 0
    1d20:	69 f7       	brne	.-38     	; 0x1cfc <LCD_init+0x6f2>
    1d22:	14 c0       	rjmp	.+40     	; 0x1d4c <LCD_init+0x742>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d24:	6f 81       	ldd	r22, Y+7	; 0x07
    1d26:	78 85       	ldd	r23, Y+8	; 0x08
    1d28:	89 85       	ldd	r24, Y+9	; 0x09
    1d2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d2c:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    1d30:	dc 01       	movw	r26, r24
    1d32:	cb 01       	movw	r24, r22
    1d34:	9e 83       	std	Y+6, r25	; 0x06
    1d36:	8d 83       	std	Y+5, r24	; 0x05
    1d38:	8d 81       	ldd	r24, Y+5	; 0x05
    1d3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d3c:	9a 83       	std	Y+2, r25	; 0x02
    1d3e:	89 83       	std	Y+1, r24	; 0x01
    1d40:	89 81       	ldd	r24, Y+1	; 0x01
    1d42:	9a 81       	ldd	r25, Y+2	; 0x02
    1d44:	01 97       	sbiw	r24, 0x01	; 1
    1d46:	f1 f7       	brne	.-4      	; 0x1d44 <LCD_init+0x73a>
    1d48:	9a 83       	std	Y+2, r25	; 0x02
    1d4a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

	// Entry Mode(IncrementOn, ShiftOff)
	LCD_sendCmnd(0b00000110);
    1d4c:	86 e0       	ldi	r24, 0x06	; 6
    1d4e:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <LCD_sendCmnd>
}
    1d52:	c6 5a       	subi	r28, 0xA6	; 166
    1d54:	df 4f       	sbci	r29, 0xFF	; 255
    1d56:	0f b6       	in	r0, 0x3f	; 63
    1d58:	f8 94       	cli
    1d5a:	de bf       	out	0x3e, r29	; 62
    1d5c:	0f be       	out	0x3f, r0	; 63
    1d5e:	cd bf       	out	0x3d, r28	; 61
    1d60:	cf 91       	pop	r28
    1d62:	df 91       	pop	r29
    1d64:	1f 91       	pop	r17
    1d66:	0f 91       	pop	r16
    1d68:	08 95       	ret

00001d6a <LCD_sendCmnd>:


void LCD_sendCmnd(u8 cmnd)
{
    1d6a:	df 93       	push	r29
    1d6c:	cf 93       	push	r28
    1d6e:	cd b7       	in	r28, 0x3d	; 61
    1d70:	de b7       	in	r29, 0x3e	; 62
    1d72:	6d 97       	sbiw	r28, 0x1d	; 29
    1d74:	0f b6       	in	r0, 0x3f	; 63
    1d76:	f8 94       	cli
    1d78:	de bf       	out	0x3e, r29	; 62
    1d7a:	0f be       	out	0x3f, r0	; 63
    1d7c:	cd bf       	out	0x3d, r28	; 61
    1d7e:	8d 8f       	std	Y+29, r24	; 0x1d
	// set Rs pin = 0 (write command)
	DIO_setPinValue(LCD_RS_PORT, LCD_RS_PIN, DIO_PIN_LOW);
    1d80:	82 e0       	ldi	r24, 0x02	; 2
    1d82:	66 e0       	ldi	r22, 0x06	; 6
    1d84:	40 e0       	ldi	r20, 0x00	; 0
    1d86:	0e 94 c9 07 	call	0xf92	; 0xf92 <DIO_setPinValue>

	// set Rw pin = 0 (write)
	DIO_setPinValue(LCD_RW_PORT, LCD_RW_PIN, DIO_PIN_LOW);
    1d8a:	82 e0       	ldi	r24, 0x02	; 2
    1d8c:	67 e0       	ldi	r22, 0x07	; 7
    1d8e:	40 e0       	ldi	r20, 0x00	; 0
    1d90:	0e 94 c9 07 	call	0xf92	; 0xf92 <DIO_setPinValue>

	// Write The Most 4 bits Of command on Data Pins
	private_writeHalfPort(cmnd>>4);
    1d94:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d96:	82 95       	swap	r24
    1d98:	8f 70       	andi	r24, 0x0F	; 15
    1d9a:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <private_writeHalfPort>

	/* Enable Pulse *//* H => L */
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
    1d9e:	82 e0       	ldi	r24, 0x02	; 2
    1da0:	61 e0       	ldi	r22, 0x01	; 1
    1da2:	41 e0       	ldi	r20, 0x01	; 1
    1da4:	0e 94 c9 07 	call	0xf92	; 0xf92 <DIO_setPinValue>
    1da8:	80 e0       	ldi	r24, 0x00	; 0
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	a0 e8       	ldi	r26, 0x80	; 128
    1dae:	bf e3       	ldi	r27, 0x3F	; 63
    1db0:	89 8f       	std	Y+25, r24	; 0x19
    1db2:	9a 8f       	std	Y+26, r25	; 0x1a
    1db4:	ab 8f       	std	Y+27, r26	; 0x1b
    1db6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1db8:	69 8d       	ldd	r22, Y+25	; 0x19
    1dba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dbc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dbe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dc0:	20 e0       	ldi	r18, 0x00	; 0
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	4a e7       	ldi	r20, 0x7A	; 122
    1dc6:	55 e4       	ldi	r21, 0x45	; 69
    1dc8:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    1dcc:	dc 01       	movw	r26, r24
    1dce:	cb 01       	movw	r24, r22
    1dd0:	8d 8b       	std	Y+21, r24	; 0x15
    1dd2:	9e 8b       	std	Y+22, r25	; 0x16
    1dd4:	af 8b       	std	Y+23, r26	; 0x17
    1dd6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1dd8:	6d 89       	ldd	r22, Y+21	; 0x15
    1dda:	7e 89       	ldd	r23, Y+22	; 0x16
    1ddc:	8f 89       	ldd	r24, Y+23	; 0x17
    1dde:	98 8d       	ldd	r25, Y+24	; 0x18
    1de0:	20 e0       	ldi	r18, 0x00	; 0
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	40 e8       	ldi	r20, 0x80	; 128
    1de6:	5f e3       	ldi	r21, 0x3F	; 63
    1de8:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    1dec:	88 23       	and	r24, r24
    1dee:	2c f4       	brge	.+10     	; 0x1dfa <LCD_sendCmnd+0x90>
		__ticks = 1;
    1df0:	81 e0       	ldi	r24, 0x01	; 1
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	9c 8b       	std	Y+20, r25	; 0x14
    1df6:	8b 8b       	std	Y+19, r24	; 0x13
    1df8:	3f c0       	rjmp	.+126    	; 0x1e78 <LCD_sendCmnd+0x10e>
	else if (__tmp > 65535)
    1dfa:	6d 89       	ldd	r22, Y+21	; 0x15
    1dfc:	7e 89       	ldd	r23, Y+22	; 0x16
    1dfe:	8f 89       	ldd	r24, Y+23	; 0x17
    1e00:	98 8d       	ldd	r25, Y+24	; 0x18
    1e02:	20 e0       	ldi	r18, 0x00	; 0
    1e04:	3f ef       	ldi	r19, 0xFF	; 255
    1e06:	4f e7       	ldi	r20, 0x7F	; 127
    1e08:	57 e4       	ldi	r21, 0x47	; 71
    1e0a:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    1e0e:	18 16       	cp	r1, r24
    1e10:	4c f5       	brge	.+82     	; 0x1e64 <LCD_sendCmnd+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e12:	69 8d       	ldd	r22, Y+25	; 0x19
    1e14:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e16:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e18:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e1a:	20 e0       	ldi	r18, 0x00	; 0
    1e1c:	30 e0       	ldi	r19, 0x00	; 0
    1e1e:	40 e2       	ldi	r20, 0x20	; 32
    1e20:	51 e4       	ldi	r21, 0x41	; 65
    1e22:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    1e26:	dc 01       	movw	r26, r24
    1e28:	cb 01       	movw	r24, r22
    1e2a:	bc 01       	movw	r22, r24
    1e2c:	cd 01       	movw	r24, r26
    1e2e:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    1e32:	dc 01       	movw	r26, r24
    1e34:	cb 01       	movw	r24, r22
    1e36:	9c 8b       	std	Y+20, r25	; 0x14
    1e38:	8b 8b       	std	Y+19, r24	; 0x13
    1e3a:	0f c0       	rjmp	.+30     	; 0x1e5a <LCD_sendCmnd+0xf0>
    1e3c:	80 e9       	ldi	r24, 0x90	; 144
    1e3e:	91 e0       	ldi	r25, 0x01	; 1
    1e40:	9a 8b       	std	Y+18, r25	; 0x12
    1e42:	89 8b       	std	Y+17, r24	; 0x11
    1e44:	89 89       	ldd	r24, Y+17	; 0x11
    1e46:	9a 89       	ldd	r25, Y+18	; 0x12
    1e48:	01 97       	sbiw	r24, 0x01	; 1
    1e4a:	f1 f7       	brne	.-4      	; 0x1e48 <LCD_sendCmnd+0xde>
    1e4c:	9a 8b       	std	Y+18, r25	; 0x12
    1e4e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e50:	8b 89       	ldd	r24, Y+19	; 0x13
    1e52:	9c 89       	ldd	r25, Y+20	; 0x14
    1e54:	01 97       	sbiw	r24, 0x01	; 1
    1e56:	9c 8b       	std	Y+20, r25	; 0x14
    1e58:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e5a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e5c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e5e:	00 97       	sbiw	r24, 0x00	; 0
    1e60:	69 f7       	brne	.-38     	; 0x1e3c <LCD_sendCmnd+0xd2>
    1e62:	14 c0       	rjmp	.+40     	; 0x1e8c <LCD_sendCmnd+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e64:	6d 89       	ldd	r22, Y+21	; 0x15
    1e66:	7e 89       	ldd	r23, Y+22	; 0x16
    1e68:	8f 89       	ldd	r24, Y+23	; 0x17
    1e6a:	98 8d       	ldd	r25, Y+24	; 0x18
    1e6c:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    1e70:	dc 01       	movw	r26, r24
    1e72:	cb 01       	movw	r24, r22
    1e74:	9c 8b       	std	Y+20, r25	; 0x14
    1e76:	8b 8b       	std	Y+19, r24	; 0x13
    1e78:	8b 89       	ldd	r24, Y+19	; 0x13
    1e7a:	9c 89       	ldd	r25, Y+20	; 0x14
    1e7c:	98 8b       	std	Y+16, r25	; 0x10
    1e7e:	8f 87       	std	Y+15, r24	; 0x0f
    1e80:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e82:	98 89       	ldd	r25, Y+16	; 0x10
    1e84:	01 97       	sbiw	r24, 0x01	; 1
    1e86:	f1 f7       	brne	.-4      	; 0x1e84 <LCD_sendCmnd+0x11a>
    1e88:	98 8b       	std	Y+16, r25	; 0x10
    1e8a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
    1e8c:	82 e0       	ldi	r24, 0x02	; 2
    1e8e:	61 e0       	ldi	r22, 0x01	; 1
    1e90:	40 e0       	ldi	r20, 0x00	; 0
    1e92:	0e 94 c9 07 	call	0xf92	; 0xf92 <DIO_setPinValue>

	// Write The Least 4 bits Of command on Data Pins
	private_writeHalfPort(cmnd);
    1e96:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e98:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <private_writeHalfPort>

	/* Enable Pulse *//* H => L */
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
    1e9c:	82 e0       	ldi	r24, 0x02	; 2
    1e9e:	61 e0       	ldi	r22, 0x01	; 1
    1ea0:	41 e0       	ldi	r20, 0x01	; 1
    1ea2:	0e 94 c9 07 	call	0xf92	; 0xf92 <DIO_setPinValue>
    1ea6:	80 e0       	ldi	r24, 0x00	; 0
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	a0 e8       	ldi	r26, 0x80	; 128
    1eac:	bf e3       	ldi	r27, 0x3F	; 63
    1eae:	8b 87       	std	Y+11, r24	; 0x0b
    1eb0:	9c 87       	std	Y+12, r25	; 0x0c
    1eb2:	ad 87       	std	Y+13, r26	; 0x0d
    1eb4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eb6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eb8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eba:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ebc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ebe:	20 e0       	ldi	r18, 0x00	; 0
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	4a e7       	ldi	r20, 0x7A	; 122
    1ec4:	55 e4       	ldi	r21, 0x45	; 69
    1ec6:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    1eca:	dc 01       	movw	r26, r24
    1ecc:	cb 01       	movw	r24, r22
    1ece:	8f 83       	std	Y+7, r24	; 0x07
    1ed0:	98 87       	std	Y+8, r25	; 0x08
    1ed2:	a9 87       	std	Y+9, r26	; 0x09
    1ed4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ed6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ed8:	78 85       	ldd	r23, Y+8	; 0x08
    1eda:	89 85       	ldd	r24, Y+9	; 0x09
    1edc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ede:	20 e0       	ldi	r18, 0x00	; 0
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	40 e8       	ldi	r20, 0x80	; 128
    1ee4:	5f e3       	ldi	r21, 0x3F	; 63
    1ee6:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    1eea:	88 23       	and	r24, r24
    1eec:	2c f4       	brge	.+10     	; 0x1ef8 <LCD_sendCmnd+0x18e>
		__ticks = 1;
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	9e 83       	std	Y+6, r25	; 0x06
    1ef4:	8d 83       	std	Y+5, r24	; 0x05
    1ef6:	3f c0       	rjmp	.+126    	; 0x1f76 <LCD_sendCmnd+0x20c>
	else if (__tmp > 65535)
    1ef8:	6f 81       	ldd	r22, Y+7	; 0x07
    1efa:	78 85       	ldd	r23, Y+8	; 0x08
    1efc:	89 85       	ldd	r24, Y+9	; 0x09
    1efe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f00:	20 e0       	ldi	r18, 0x00	; 0
    1f02:	3f ef       	ldi	r19, 0xFF	; 255
    1f04:	4f e7       	ldi	r20, 0x7F	; 127
    1f06:	57 e4       	ldi	r21, 0x47	; 71
    1f08:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    1f0c:	18 16       	cp	r1, r24
    1f0e:	4c f5       	brge	.+82     	; 0x1f62 <LCD_sendCmnd+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f10:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f12:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f14:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f16:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f18:	20 e0       	ldi	r18, 0x00	; 0
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	40 e2       	ldi	r20, 0x20	; 32
    1f1e:	51 e4       	ldi	r21, 0x41	; 65
    1f20:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    1f24:	dc 01       	movw	r26, r24
    1f26:	cb 01       	movw	r24, r22
    1f28:	bc 01       	movw	r22, r24
    1f2a:	cd 01       	movw	r24, r26
    1f2c:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    1f30:	dc 01       	movw	r26, r24
    1f32:	cb 01       	movw	r24, r22
    1f34:	9e 83       	std	Y+6, r25	; 0x06
    1f36:	8d 83       	std	Y+5, r24	; 0x05
    1f38:	0f c0       	rjmp	.+30     	; 0x1f58 <LCD_sendCmnd+0x1ee>
    1f3a:	80 e9       	ldi	r24, 0x90	; 144
    1f3c:	91 e0       	ldi	r25, 0x01	; 1
    1f3e:	9c 83       	std	Y+4, r25	; 0x04
    1f40:	8b 83       	std	Y+3, r24	; 0x03
    1f42:	8b 81       	ldd	r24, Y+3	; 0x03
    1f44:	9c 81       	ldd	r25, Y+4	; 0x04
    1f46:	01 97       	sbiw	r24, 0x01	; 1
    1f48:	f1 f7       	brne	.-4      	; 0x1f46 <LCD_sendCmnd+0x1dc>
    1f4a:	9c 83       	std	Y+4, r25	; 0x04
    1f4c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f50:	9e 81       	ldd	r25, Y+6	; 0x06
    1f52:	01 97       	sbiw	r24, 0x01	; 1
    1f54:	9e 83       	std	Y+6, r25	; 0x06
    1f56:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f58:	8d 81       	ldd	r24, Y+5	; 0x05
    1f5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f5c:	00 97       	sbiw	r24, 0x00	; 0
    1f5e:	69 f7       	brne	.-38     	; 0x1f3a <LCD_sendCmnd+0x1d0>
    1f60:	14 c0       	rjmp	.+40     	; 0x1f8a <LCD_sendCmnd+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f62:	6f 81       	ldd	r22, Y+7	; 0x07
    1f64:	78 85       	ldd	r23, Y+8	; 0x08
    1f66:	89 85       	ldd	r24, Y+9	; 0x09
    1f68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f6a:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    1f6e:	dc 01       	movw	r26, r24
    1f70:	cb 01       	movw	r24, r22
    1f72:	9e 83       	std	Y+6, r25	; 0x06
    1f74:	8d 83       	std	Y+5, r24	; 0x05
    1f76:	8d 81       	ldd	r24, Y+5	; 0x05
    1f78:	9e 81       	ldd	r25, Y+6	; 0x06
    1f7a:	9a 83       	std	Y+2, r25	; 0x02
    1f7c:	89 83       	std	Y+1, r24	; 0x01
    1f7e:	89 81       	ldd	r24, Y+1	; 0x01
    1f80:	9a 81       	ldd	r25, Y+2	; 0x02
    1f82:	01 97       	sbiw	r24, 0x01	; 1
    1f84:	f1 f7       	brne	.-4      	; 0x1f82 <LCD_sendCmnd+0x218>
    1f86:	9a 83       	std	Y+2, r25	; 0x02
    1f88:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
    1f8a:	82 e0       	ldi	r24, 0x02	; 2
    1f8c:	61 e0       	ldi	r22, 0x01	; 1
    1f8e:	40 e0       	ldi	r20, 0x00	; 0
    1f90:	0e 94 c9 07 	call	0xf92	; 0xf92 <DIO_setPinValue>
}
    1f94:	6d 96       	adiw	r28, 0x1d	; 29
    1f96:	0f b6       	in	r0, 0x3f	; 63
    1f98:	f8 94       	cli
    1f9a:	de bf       	out	0x3e, r29	; 62
    1f9c:	0f be       	out	0x3f, r0	; 63
    1f9e:	cd bf       	out	0x3d, r28	; 61
    1fa0:	cf 91       	pop	r28
    1fa2:	df 91       	pop	r29
    1fa4:	08 95       	ret

00001fa6 <LCD_sendChar>:


void LCD_sendChar(u8 data)
{
    1fa6:	df 93       	push	r29
    1fa8:	cf 93       	push	r28
    1faa:	cd b7       	in	r28, 0x3d	; 61
    1fac:	de b7       	in	r29, 0x3e	; 62
    1fae:	6d 97       	sbiw	r28, 0x1d	; 29
    1fb0:	0f b6       	in	r0, 0x3f	; 63
    1fb2:	f8 94       	cli
    1fb4:	de bf       	out	0x3e, r29	; 62
    1fb6:	0f be       	out	0x3f, r0	; 63
    1fb8:	cd bf       	out	0x3d, r28	; 61
    1fba:	8d 8f       	std	Y+29, r24	; 0x1d
	// set Rs pin = 1 (write data)
	DIO_setPinValue(LCD_RS_PORT, LCD_RS_PIN, DIO_PIN_HIGH);
    1fbc:	82 e0       	ldi	r24, 0x02	; 2
    1fbe:	66 e0       	ldi	r22, 0x06	; 6
    1fc0:	41 e0       	ldi	r20, 0x01	; 1
    1fc2:	0e 94 c9 07 	call	0xf92	; 0xf92 <DIO_setPinValue>

	// set Rw pin = 0 (write)
	DIO_setPinValue(LCD_RW_PORT, LCD_RW_PIN, DIO_PIN_LOW);
    1fc6:	82 e0       	ldi	r24, 0x02	; 2
    1fc8:	67 e0       	ldi	r22, 0x07	; 7
    1fca:	40 e0       	ldi	r20, 0x00	; 0
    1fcc:	0e 94 c9 07 	call	0xf92	; 0xf92 <DIO_setPinValue>

	// Write The Most 4 bits Of data on Data Pins
	private_writeHalfPort(data>>4);
    1fd0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fd2:	82 95       	swap	r24
    1fd4:	8f 70       	andi	r24, 0x0F	; 15
    1fd6:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <private_writeHalfPort>

	/* Enable Pulse *//* H => L */
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
    1fda:	82 e0       	ldi	r24, 0x02	; 2
    1fdc:	61 e0       	ldi	r22, 0x01	; 1
    1fde:	41 e0       	ldi	r20, 0x01	; 1
    1fe0:	0e 94 c9 07 	call	0xf92	; 0xf92 <DIO_setPinValue>
    1fe4:	80 e0       	ldi	r24, 0x00	; 0
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	a0 e8       	ldi	r26, 0x80	; 128
    1fea:	bf e3       	ldi	r27, 0x3F	; 63
    1fec:	89 8f       	std	Y+25, r24	; 0x19
    1fee:	9a 8f       	std	Y+26, r25	; 0x1a
    1ff0:	ab 8f       	std	Y+27, r26	; 0x1b
    1ff2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ff4:	69 8d       	ldd	r22, Y+25	; 0x19
    1ff6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ff8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ffa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ffc:	20 e0       	ldi	r18, 0x00	; 0
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	4a e7       	ldi	r20, 0x7A	; 122
    2002:	55 e4       	ldi	r21, 0x45	; 69
    2004:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    2008:	dc 01       	movw	r26, r24
    200a:	cb 01       	movw	r24, r22
    200c:	8d 8b       	std	Y+21, r24	; 0x15
    200e:	9e 8b       	std	Y+22, r25	; 0x16
    2010:	af 8b       	std	Y+23, r26	; 0x17
    2012:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2014:	6d 89       	ldd	r22, Y+21	; 0x15
    2016:	7e 89       	ldd	r23, Y+22	; 0x16
    2018:	8f 89       	ldd	r24, Y+23	; 0x17
    201a:	98 8d       	ldd	r25, Y+24	; 0x18
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	40 e8       	ldi	r20, 0x80	; 128
    2022:	5f e3       	ldi	r21, 0x3F	; 63
    2024:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    2028:	88 23       	and	r24, r24
    202a:	2c f4       	brge	.+10     	; 0x2036 <LCD_sendChar+0x90>
		__ticks = 1;
    202c:	81 e0       	ldi	r24, 0x01	; 1
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	9c 8b       	std	Y+20, r25	; 0x14
    2032:	8b 8b       	std	Y+19, r24	; 0x13
    2034:	3f c0       	rjmp	.+126    	; 0x20b4 <LCD_sendChar+0x10e>
	else if (__tmp > 65535)
    2036:	6d 89       	ldd	r22, Y+21	; 0x15
    2038:	7e 89       	ldd	r23, Y+22	; 0x16
    203a:	8f 89       	ldd	r24, Y+23	; 0x17
    203c:	98 8d       	ldd	r25, Y+24	; 0x18
    203e:	20 e0       	ldi	r18, 0x00	; 0
    2040:	3f ef       	ldi	r19, 0xFF	; 255
    2042:	4f e7       	ldi	r20, 0x7F	; 127
    2044:	57 e4       	ldi	r21, 0x47	; 71
    2046:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    204a:	18 16       	cp	r1, r24
    204c:	4c f5       	brge	.+82     	; 0x20a0 <LCD_sendChar+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    204e:	69 8d       	ldd	r22, Y+25	; 0x19
    2050:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2052:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2054:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2056:	20 e0       	ldi	r18, 0x00	; 0
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	40 e2       	ldi	r20, 0x20	; 32
    205c:	51 e4       	ldi	r21, 0x41	; 65
    205e:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    2062:	dc 01       	movw	r26, r24
    2064:	cb 01       	movw	r24, r22
    2066:	bc 01       	movw	r22, r24
    2068:	cd 01       	movw	r24, r26
    206a:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    206e:	dc 01       	movw	r26, r24
    2070:	cb 01       	movw	r24, r22
    2072:	9c 8b       	std	Y+20, r25	; 0x14
    2074:	8b 8b       	std	Y+19, r24	; 0x13
    2076:	0f c0       	rjmp	.+30     	; 0x2096 <LCD_sendChar+0xf0>
    2078:	80 e9       	ldi	r24, 0x90	; 144
    207a:	91 e0       	ldi	r25, 0x01	; 1
    207c:	9a 8b       	std	Y+18, r25	; 0x12
    207e:	89 8b       	std	Y+17, r24	; 0x11
    2080:	89 89       	ldd	r24, Y+17	; 0x11
    2082:	9a 89       	ldd	r25, Y+18	; 0x12
    2084:	01 97       	sbiw	r24, 0x01	; 1
    2086:	f1 f7       	brne	.-4      	; 0x2084 <LCD_sendChar+0xde>
    2088:	9a 8b       	std	Y+18, r25	; 0x12
    208a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    208c:	8b 89       	ldd	r24, Y+19	; 0x13
    208e:	9c 89       	ldd	r25, Y+20	; 0x14
    2090:	01 97       	sbiw	r24, 0x01	; 1
    2092:	9c 8b       	std	Y+20, r25	; 0x14
    2094:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2096:	8b 89       	ldd	r24, Y+19	; 0x13
    2098:	9c 89       	ldd	r25, Y+20	; 0x14
    209a:	00 97       	sbiw	r24, 0x00	; 0
    209c:	69 f7       	brne	.-38     	; 0x2078 <LCD_sendChar+0xd2>
    209e:	14 c0       	rjmp	.+40     	; 0x20c8 <LCD_sendChar+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20a0:	6d 89       	ldd	r22, Y+21	; 0x15
    20a2:	7e 89       	ldd	r23, Y+22	; 0x16
    20a4:	8f 89       	ldd	r24, Y+23	; 0x17
    20a6:	98 8d       	ldd	r25, Y+24	; 0x18
    20a8:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    20ac:	dc 01       	movw	r26, r24
    20ae:	cb 01       	movw	r24, r22
    20b0:	9c 8b       	std	Y+20, r25	; 0x14
    20b2:	8b 8b       	std	Y+19, r24	; 0x13
    20b4:	8b 89       	ldd	r24, Y+19	; 0x13
    20b6:	9c 89       	ldd	r25, Y+20	; 0x14
    20b8:	98 8b       	std	Y+16, r25	; 0x10
    20ba:	8f 87       	std	Y+15, r24	; 0x0f
    20bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    20be:	98 89       	ldd	r25, Y+16	; 0x10
    20c0:	01 97       	sbiw	r24, 0x01	; 1
    20c2:	f1 f7       	brne	.-4      	; 0x20c0 <LCD_sendChar+0x11a>
    20c4:	98 8b       	std	Y+16, r25	; 0x10
    20c6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
    20c8:	82 e0       	ldi	r24, 0x02	; 2
    20ca:	61 e0       	ldi	r22, 0x01	; 1
    20cc:	40 e0       	ldi	r20, 0x00	; 0
    20ce:	0e 94 c9 07 	call	0xf92	; 0xf92 <DIO_setPinValue>

	// Write The Least 4 bits Of data on Data Pins
	private_writeHalfPort(data);
    20d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20d4:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <private_writeHalfPort>

	/* Enable Pulse *//* H => L */
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
    20d8:	82 e0       	ldi	r24, 0x02	; 2
    20da:	61 e0       	ldi	r22, 0x01	; 1
    20dc:	41 e0       	ldi	r20, 0x01	; 1
    20de:	0e 94 c9 07 	call	0xf92	; 0xf92 <DIO_setPinValue>
    20e2:	80 e0       	ldi	r24, 0x00	; 0
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	a0 e8       	ldi	r26, 0x80	; 128
    20e8:	bf e3       	ldi	r27, 0x3F	; 63
    20ea:	8b 87       	std	Y+11, r24	; 0x0b
    20ec:	9c 87       	std	Y+12, r25	; 0x0c
    20ee:	ad 87       	std	Y+13, r26	; 0x0d
    20f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    20f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    20f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    20f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    20fa:	20 e0       	ldi	r18, 0x00	; 0
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	4a e7       	ldi	r20, 0x7A	; 122
    2100:	55 e4       	ldi	r21, 0x45	; 69
    2102:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    2106:	dc 01       	movw	r26, r24
    2108:	cb 01       	movw	r24, r22
    210a:	8f 83       	std	Y+7, r24	; 0x07
    210c:	98 87       	std	Y+8, r25	; 0x08
    210e:	a9 87       	std	Y+9, r26	; 0x09
    2110:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2112:	6f 81       	ldd	r22, Y+7	; 0x07
    2114:	78 85       	ldd	r23, Y+8	; 0x08
    2116:	89 85       	ldd	r24, Y+9	; 0x09
    2118:	9a 85       	ldd	r25, Y+10	; 0x0a
    211a:	20 e0       	ldi	r18, 0x00	; 0
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	40 e8       	ldi	r20, 0x80	; 128
    2120:	5f e3       	ldi	r21, 0x3F	; 63
    2122:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    2126:	88 23       	and	r24, r24
    2128:	2c f4       	brge	.+10     	; 0x2134 <LCD_sendChar+0x18e>
		__ticks = 1;
    212a:	81 e0       	ldi	r24, 0x01	; 1
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	9e 83       	std	Y+6, r25	; 0x06
    2130:	8d 83       	std	Y+5, r24	; 0x05
    2132:	3f c0       	rjmp	.+126    	; 0x21b2 <LCD_sendChar+0x20c>
	else if (__tmp > 65535)
    2134:	6f 81       	ldd	r22, Y+7	; 0x07
    2136:	78 85       	ldd	r23, Y+8	; 0x08
    2138:	89 85       	ldd	r24, Y+9	; 0x09
    213a:	9a 85       	ldd	r25, Y+10	; 0x0a
    213c:	20 e0       	ldi	r18, 0x00	; 0
    213e:	3f ef       	ldi	r19, 0xFF	; 255
    2140:	4f e7       	ldi	r20, 0x7F	; 127
    2142:	57 e4       	ldi	r21, 0x47	; 71
    2144:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    2148:	18 16       	cp	r1, r24
    214a:	4c f5       	brge	.+82     	; 0x219e <LCD_sendChar+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    214c:	6b 85       	ldd	r22, Y+11	; 0x0b
    214e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2150:	8d 85       	ldd	r24, Y+13	; 0x0d
    2152:	9e 85       	ldd	r25, Y+14	; 0x0e
    2154:	20 e0       	ldi	r18, 0x00	; 0
    2156:	30 e0       	ldi	r19, 0x00	; 0
    2158:	40 e2       	ldi	r20, 0x20	; 32
    215a:	51 e4       	ldi	r21, 0x41	; 65
    215c:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    2160:	dc 01       	movw	r26, r24
    2162:	cb 01       	movw	r24, r22
    2164:	bc 01       	movw	r22, r24
    2166:	cd 01       	movw	r24, r26
    2168:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    216c:	dc 01       	movw	r26, r24
    216e:	cb 01       	movw	r24, r22
    2170:	9e 83       	std	Y+6, r25	; 0x06
    2172:	8d 83       	std	Y+5, r24	; 0x05
    2174:	0f c0       	rjmp	.+30     	; 0x2194 <LCD_sendChar+0x1ee>
    2176:	80 e9       	ldi	r24, 0x90	; 144
    2178:	91 e0       	ldi	r25, 0x01	; 1
    217a:	9c 83       	std	Y+4, r25	; 0x04
    217c:	8b 83       	std	Y+3, r24	; 0x03
    217e:	8b 81       	ldd	r24, Y+3	; 0x03
    2180:	9c 81       	ldd	r25, Y+4	; 0x04
    2182:	01 97       	sbiw	r24, 0x01	; 1
    2184:	f1 f7       	brne	.-4      	; 0x2182 <LCD_sendChar+0x1dc>
    2186:	9c 83       	std	Y+4, r25	; 0x04
    2188:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    218a:	8d 81       	ldd	r24, Y+5	; 0x05
    218c:	9e 81       	ldd	r25, Y+6	; 0x06
    218e:	01 97       	sbiw	r24, 0x01	; 1
    2190:	9e 83       	std	Y+6, r25	; 0x06
    2192:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2194:	8d 81       	ldd	r24, Y+5	; 0x05
    2196:	9e 81       	ldd	r25, Y+6	; 0x06
    2198:	00 97       	sbiw	r24, 0x00	; 0
    219a:	69 f7       	brne	.-38     	; 0x2176 <LCD_sendChar+0x1d0>
    219c:	14 c0       	rjmp	.+40     	; 0x21c6 <LCD_sendChar+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    219e:	6f 81       	ldd	r22, Y+7	; 0x07
    21a0:	78 85       	ldd	r23, Y+8	; 0x08
    21a2:	89 85       	ldd	r24, Y+9	; 0x09
    21a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21a6:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    21aa:	dc 01       	movw	r26, r24
    21ac:	cb 01       	movw	r24, r22
    21ae:	9e 83       	std	Y+6, r25	; 0x06
    21b0:	8d 83       	std	Y+5, r24	; 0x05
    21b2:	8d 81       	ldd	r24, Y+5	; 0x05
    21b4:	9e 81       	ldd	r25, Y+6	; 0x06
    21b6:	9a 83       	std	Y+2, r25	; 0x02
    21b8:	89 83       	std	Y+1, r24	; 0x01
    21ba:	89 81       	ldd	r24, Y+1	; 0x01
    21bc:	9a 81       	ldd	r25, Y+2	; 0x02
    21be:	01 97       	sbiw	r24, 0x01	; 1
    21c0:	f1 f7       	brne	.-4      	; 0x21be <LCD_sendChar+0x218>
    21c2:	9a 83       	std	Y+2, r25	; 0x02
    21c4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
    21c6:	82 e0       	ldi	r24, 0x02	; 2
    21c8:	61 e0       	ldi	r22, 0x01	; 1
    21ca:	40 e0       	ldi	r20, 0x00	; 0
    21cc:	0e 94 c9 07 	call	0xf92	; 0xf92 <DIO_setPinValue>
}
    21d0:	6d 96       	adiw	r28, 0x1d	; 29
    21d2:	0f b6       	in	r0, 0x3f	; 63
    21d4:	f8 94       	cli
    21d6:	de bf       	out	0x3e, r29	; 62
    21d8:	0f be       	out	0x3f, r0	; 63
    21da:	cd bf       	out	0x3d, r28	; 61
    21dc:	cf 91       	pop	r28
    21de:	df 91       	pop	r29
    21e0:	08 95       	ret

000021e2 <private_writeHalfPort>:




static void private_writeHalfPort(u8 value)
{
    21e2:	df 93       	push	r29
    21e4:	cf 93       	push	r28
    21e6:	0f 92       	push	r0
    21e8:	cd b7       	in	r28, 0x3d	; 61
    21ea:	de b7       	in	r29, 0x3e	; 62
    21ec:	89 83       	std	Y+1, r24	; 0x01
	DIO_setPinValue(LCD_D4_PORT,LCD_D4_PIN,GET_BIT(value,0));
    21ee:	89 81       	ldd	r24, Y+1	; 0x01
    21f0:	98 2f       	mov	r25, r24
    21f2:	91 70       	andi	r25, 0x01	; 1
    21f4:	82 e0       	ldi	r24, 0x02	; 2
    21f6:	62 e0       	ldi	r22, 0x02	; 2
    21f8:	49 2f       	mov	r20, r25
    21fa:	0e 94 c9 07 	call	0xf92	; 0xf92 <DIO_setPinValue>
	DIO_setPinValue(LCD_D5_PORT,LCD_D5_PIN,GET_BIT(value,1));
    21fe:	89 81       	ldd	r24, Y+1	; 0x01
    2200:	86 95       	lsr	r24
    2202:	98 2f       	mov	r25, r24
    2204:	91 70       	andi	r25, 0x01	; 1
    2206:	82 e0       	ldi	r24, 0x02	; 2
    2208:	60 e0       	ldi	r22, 0x00	; 0
    220a:	49 2f       	mov	r20, r25
    220c:	0e 94 c9 07 	call	0xf92	; 0xf92 <DIO_setPinValue>
	DIO_setPinValue(LCD_D6_PORT,LCD_D6_PIN,GET_BIT(value,2));
    2210:	89 81       	ldd	r24, Y+1	; 0x01
    2212:	86 95       	lsr	r24
    2214:	86 95       	lsr	r24
    2216:	98 2f       	mov	r25, r24
    2218:	91 70       	andi	r25, 0x01	; 1
    221a:	82 e0       	ldi	r24, 0x02	; 2
    221c:	64 e0       	ldi	r22, 0x04	; 4
    221e:	49 2f       	mov	r20, r25
    2220:	0e 94 c9 07 	call	0xf92	; 0xf92 <DIO_setPinValue>
	DIO_setPinValue(LCD_D7_PORT,LCD_D7_PIN,GET_BIT(value,3));
    2224:	89 81       	ldd	r24, Y+1	; 0x01
    2226:	86 95       	lsr	r24
    2228:	86 95       	lsr	r24
    222a:	86 95       	lsr	r24
    222c:	98 2f       	mov	r25, r24
    222e:	91 70       	andi	r25, 0x01	; 1
    2230:	82 e0       	ldi	r24, 0x02	; 2
    2232:	65 e0       	ldi	r22, 0x05	; 5
    2234:	49 2f       	mov	r20, r25
    2236:	0e 94 c9 07 	call	0xf92	; 0xf92 <DIO_setPinValue>
}
    223a:	0f 90       	pop	r0
    223c:	cf 91       	pop	r28
    223e:	df 91       	pop	r29
    2240:	08 95       	ret

00002242 <LCD_writeString>:
the null terminator and increment
the counter by one while sending
the lcd charecter by charecter*/

void LCD_writeString(u8*string)
{
    2242:	df 93       	push	r29
    2244:	cf 93       	push	r28
    2246:	00 d0       	rcall	.+0      	; 0x2248 <LCD_writeString+0x6>
    2248:	0f 92       	push	r0
    224a:	cd b7       	in	r28, 0x3d	; 61
    224c:	de b7       	in	r29, 0x3e	; 62
    224e:	9b 83       	std	Y+3, r25	; 0x03
    2250:	8a 83       	std	Y+2, r24	; 0x02
	u8 counter =0;
    2252:	19 82       	std	Y+1, r1	; 0x01
    2254:	0e c0       	rjmp	.+28     	; 0x2272 <LCD_writeString+0x30>
while(string[counter]!='\0')
{
LCD_sendChar(string[counter]);
    2256:	89 81       	ldd	r24, Y+1	; 0x01
    2258:	28 2f       	mov	r18, r24
    225a:	30 e0       	ldi	r19, 0x00	; 0
    225c:	8a 81       	ldd	r24, Y+2	; 0x02
    225e:	9b 81       	ldd	r25, Y+3	; 0x03
    2260:	fc 01       	movw	r30, r24
    2262:	e2 0f       	add	r30, r18
    2264:	f3 1f       	adc	r31, r19
    2266:	80 81       	ld	r24, Z
    2268:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <LCD_sendChar>
counter++;
    226c:	89 81       	ldd	r24, Y+1	; 0x01
    226e:	8f 5f       	subi	r24, 0xFF	; 255
    2270:	89 83       	std	Y+1, r24	; 0x01
the lcd charecter by charecter*/

void LCD_writeString(u8*string)
{
	u8 counter =0;
while(string[counter]!='\0')
    2272:	89 81       	ldd	r24, Y+1	; 0x01
    2274:	28 2f       	mov	r18, r24
    2276:	30 e0       	ldi	r19, 0x00	; 0
    2278:	8a 81       	ldd	r24, Y+2	; 0x02
    227a:	9b 81       	ldd	r25, Y+3	; 0x03
    227c:	fc 01       	movw	r30, r24
    227e:	e2 0f       	add	r30, r18
    2280:	f3 1f       	adc	r31, r19
    2282:	80 81       	ld	r24, Z
    2284:	88 23       	and	r24, r24
    2286:	39 f7       	brne	.-50     	; 0x2256 <LCD_writeString+0x14>
counter++;
}



}
    2288:	0f 90       	pop	r0
    228a:	0f 90       	pop	r0
    228c:	0f 90       	pop	r0
    228e:	cf 91       	pop	r28
    2290:	df 91       	pop	r29
    2292:	08 95       	ret

00002294 <LCD_clear>:

void LCD_clear(void)
{
    2294:	df 93       	push	r29
    2296:	cf 93       	push	r28
    2298:	cd b7       	in	r28, 0x3d	; 61
    229a:	de b7       	in	r29, 0x3e	; 62
    229c:	2e 97       	sbiw	r28, 0x0e	; 14
    229e:	0f b6       	in	r0, 0x3f	; 63
    22a0:	f8 94       	cli
    22a2:	de bf       	out	0x3e, r29	; 62
    22a4:	0f be       	out	0x3f, r0	; 63
    22a6:	cd bf       	out	0x3d, r28	; 61

  LCD_sendCmnd(0b00000001);
    22a8:	81 e0       	ldi	r24, 0x01	; 1
    22aa:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <LCD_sendCmnd>
    22ae:	80 e0       	ldi	r24, 0x00	; 0
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	a0 e0       	ldi	r26, 0x00	; 0
    22b4:	b0 e4       	ldi	r27, 0x40	; 64
    22b6:	8b 87       	std	Y+11, r24	; 0x0b
    22b8:	9c 87       	std	Y+12, r25	; 0x0c
    22ba:	ad 87       	std	Y+13, r26	; 0x0d
    22bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22be:	6b 85       	ldd	r22, Y+11	; 0x0b
    22c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    22c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    22c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    22c6:	20 e0       	ldi	r18, 0x00	; 0
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	4a e7       	ldi	r20, 0x7A	; 122
    22cc:	55 e4       	ldi	r21, 0x45	; 69
    22ce:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    22d2:	dc 01       	movw	r26, r24
    22d4:	cb 01       	movw	r24, r22
    22d6:	8f 83       	std	Y+7, r24	; 0x07
    22d8:	98 87       	std	Y+8, r25	; 0x08
    22da:	a9 87       	std	Y+9, r26	; 0x09
    22dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22de:	6f 81       	ldd	r22, Y+7	; 0x07
    22e0:	78 85       	ldd	r23, Y+8	; 0x08
    22e2:	89 85       	ldd	r24, Y+9	; 0x09
    22e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e6:	20 e0       	ldi	r18, 0x00	; 0
    22e8:	30 e0       	ldi	r19, 0x00	; 0
    22ea:	40 e8       	ldi	r20, 0x80	; 128
    22ec:	5f e3       	ldi	r21, 0x3F	; 63
    22ee:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    22f2:	88 23       	and	r24, r24
    22f4:	2c f4       	brge	.+10     	; 0x2300 <LCD_clear+0x6c>
		__ticks = 1;
    22f6:	81 e0       	ldi	r24, 0x01	; 1
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	9e 83       	std	Y+6, r25	; 0x06
    22fc:	8d 83       	std	Y+5, r24	; 0x05
    22fe:	3f c0       	rjmp	.+126    	; 0x237e <LCD_clear+0xea>
	else if (__tmp > 65535)
    2300:	6f 81       	ldd	r22, Y+7	; 0x07
    2302:	78 85       	ldd	r23, Y+8	; 0x08
    2304:	89 85       	ldd	r24, Y+9	; 0x09
    2306:	9a 85       	ldd	r25, Y+10	; 0x0a
    2308:	20 e0       	ldi	r18, 0x00	; 0
    230a:	3f ef       	ldi	r19, 0xFF	; 255
    230c:	4f e7       	ldi	r20, 0x7F	; 127
    230e:	57 e4       	ldi	r21, 0x47	; 71
    2310:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    2314:	18 16       	cp	r1, r24
    2316:	4c f5       	brge	.+82     	; 0x236a <LCD_clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2318:	6b 85       	ldd	r22, Y+11	; 0x0b
    231a:	7c 85       	ldd	r23, Y+12	; 0x0c
    231c:	8d 85       	ldd	r24, Y+13	; 0x0d
    231e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2320:	20 e0       	ldi	r18, 0x00	; 0
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	40 e2       	ldi	r20, 0x20	; 32
    2326:	51 e4       	ldi	r21, 0x41	; 65
    2328:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    232c:	dc 01       	movw	r26, r24
    232e:	cb 01       	movw	r24, r22
    2330:	bc 01       	movw	r22, r24
    2332:	cd 01       	movw	r24, r26
    2334:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    2338:	dc 01       	movw	r26, r24
    233a:	cb 01       	movw	r24, r22
    233c:	9e 83       	std	Y+6, r25	; 0x06
    233e:	8d 83       	std	Y+5, r24	; 0x05
    2340:	0f c0       	rjmp	.+30     	; 0x2360 <LCD_clear+0xcc>
    2342:	80 e9       	ldi	r24, 0x90	; 144
    2344:	91 e0       	ldi	r25, 0x01	; 1
    2346:	9c 83       	std	Y+4, r25	; 0x04
    2348:	8b 83       	std	Y+3, r24	; 0x03
    234a:	8b 81       	ldd	r24, Y+3	; 0x03
    234c:	9c 81       	ldd	r25, Y+4	; 0x04
    234e:	01 97       	sbiw	r24, 0x01	; 1
    2350:	f1 f7       	brne	.-4      	; 0x234e <LCD_clear+0xba>
    2352:	9c 83       	std	Y+4, r25	; 0x04
    2354:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2356:	8d 81       	ldd	r24, Y+5	; 0x05
    2358:	9e 81       	ldd	r25, Y+6	; 0x06
    235a:	01 97       	sbiw	r24, 0x01	; 1
    235c:	9e 83       	std	Y+6, r25	; 0x06
    235e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2360:	8d 81       	ldd	r24, Y+5	; 0x05
    2362:	9e 81       	ldd	r25, Y+6	; 0x06
    2364:	00 97       	sbiw	r24, 0x00	; 0
    2366:	69 f7       	brne	.-38     	; 0x2342 <LCD_clear+0xae>
    2368:	14 c0       	rjmp	.+40     	; 0x2392 <LCD_clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    236a:	6f 81       	ldd	r22, Y+7	; 0x07
    236c:	78 85       	ldd	r23, Y+8	; 0x08
    236e:	89 85       	ldd	r24, Y+9	; 0x09
    2370:	9a 85       	ldd	r25, Y+10	; 0x0a
    2372:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    2376:	dc 01       	movw	r26, r24
    2378:	cb 01       	movw	r24, r22
    237a:	9e 83       	std	Y+6, r25	; 0x06
    237c:	8d 83       	std	Y+5, r24	; 0x05
    237e:	8d 81       	ldd	r24, Y+5	; 0x05
    2380:	9e 81       	ldd	r25, Y+6	; 0x06
    2382:	9a 83       	std	Y+2, r25	; 0x02
    2384:	89 83       	std	Y+1, r24	; 0x01
    2386:	89 81       	ldd	r24, Y+1	; 0x01
    2388:	9a 81       	ldd	r25, Y+2	; 0x02
    238a:	01 97       	sbiw	r24, 0x01	; 1
    238c:	f1 f7       	brne	.-4      	; 0x238a <LCD_clear+0xf6>
    238e:	9a 83       	std	Y+2, r25	; 0x02
    2390:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(2);
}
    2392:	2e 96       	adiw	r28, 0x0e	; 14
    2394:	0f b6       	in	r0, 0x3f	; 63
    2396:	f8 94       	cli
    2398:	de bf       	out	0x3e, r29	; 62
    239a:	0f be       	out	0x3f, r0	; 63
    239c:	cd bf       	out	0x3d, r28	; 61
    239e:	cf 91       	pop	r28
    23a0:	df 91       	pop	r29
    23a2:	08 95       	ret

000023a4 <LCD_moveCursor>:
void LCD_moveCursor(u8 line,u8 position)
{
    23a4:	0f 93       	push	r16
    23a6:	1f 93       	push	r17
    23a8:	df 93       	push	r29
    23aa:	cf 93       	push	r28
    23ac:	cd b7       	in	r28, 0x3d	; 61
    23ae:	de b7       	in	r29, 0x3e	; 62
    23b0:	cd 54       	subi	r28, 0x4D	; 77
    23b2:	d0 40       	sbci	r29, 0x00	; 0
    23b4:	0f b6       	in	r0, 0x3f	; 63
    23b6:	f8 94       	cli
    23b8:	de bf       	out	0x3e, r29	; 62
    23ba:	0f be       	out	0x3f, r0	; 63
    23bc:	cd bf       	out	0x3d, r28	; 61
    23be:	fe 01       	movw	r30, r28
    23c0:	e4 5b       	subi	r30, 0xB4	; 180
    23c2:	ff 4f       	sbci	r31, 0xFF	; 255
    23c4:	80 83       	st	Z, r24
    23c6:	fe 01       	movw	r30, r28
    23c8:	e3 5b       	subi	r30, 0xB3	; 179
    23ca:	ff 4f       	sbci	r31, 0xFF	; 255
    23cc:	60 83       	st	Z, r22
	if(line==1)
    23ce:	fe 01       	movw	r30, r28
    23d0:	e4 5b       	subi	r30, 0xB4	; 180
    23d2:	ff 4f       	sbci	r31, 0xFF	; 255
    23d4:	80 81       	ld	r24, Z
    23d6:	81 30       	cpi	r24, 0x01	; 1
    23d8:	09 f0       	breq	.+2      	; 0x23dc <LCD_moveCursor+0x38>
    23da:	f9 c0       	rjmp	.+498    	; 0x25ce <LCD_moveCursor+0x22a>
	{
		for(u8 i=0;i<position;i++)
    23dc:	fe 01       	movw	r30, r28
    23de:	e5 5b       	subi	r30, 0xB5	; 181
    23e0:	ff 4f       	sbci	r31, 0xFF	; 255
    23e2:	10 82       	st	Z, r1
    23e4:	e9 c0       	rjmp	.+466    	; 0x25b8 <LCD_moveCursor+0x214>
		{
			LCD_sendCmnd(0b00010100);
    23e6:	84 e1       	ldi	r24, 0x14	; 20
    23e8:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <LCD_sendCmnd>
    23ec:	fe 01       	movw	r30, r28
    23ee:	eb 5b       	subi	r30, 0xBB	; 187
    23f0:	ff 4f       	sbci	r31, 0xFF	; 255
    23f2:	80 e0       	ldi	r24, 0x00	; 0
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	ac e1       	ldi	r26, 0x1C	; 28
    23f8:	b2 e4       	ldi	r27, 0x42	; 66
    23fa:	80 83       	st	Z, r24
    23fc:	91 83       	std	Z+1, r25	; 0x01
    23fe:	a2 83       	std	Z+2, r26	; 0x02
    2400:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2402:	8e 01       	movw	r16, r28
    2404:	0f 5b       	subi	r16, 0xBF	; 191
    2406:	1f 4f       	sbci	r17, 0xFF	; 255
    2408:	fe 01       	movw	r30, r28
    240a:	eb 5b       	subi	r30, 0xBB	; 187
    240c:	ff 4f       	sbci	r31, 0xFF	; 255
    240e:	60 81       	ld	r22, Z
    2410:	71 81       	ldd	r23, Z+1	; 0x01
    2412:	82 81       	ldd	r24, Z+2	; 0x02
    2414:	93 81       	ldd	r25, Z+3	; 0x03
    2416:	2b ea       	ldi	r18, 0xAB	; 171
    2418:	3a ea       	ldi	r19, 0xAA	; 170
    241a:	4a ea       	ldi	r20, 0xAA	; 170
    241c:	50 e4       	ldi	r21, 0x40	; 64
    241e:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    2422:	dc 01       	movw	r26, r24
    2424:	cb 01       	movw	r24, r22
    2426:	f8 01       	movw	r30, r16
    2428:	80 83       	st	Z, r24
    242a:	91 83       	std	Z+1, r25	; 0x01
    242c:	a2 83       	std	Z+2, r26	; 0x02
    242e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2430:	fe 01       	movw	r30, r28
    2432:	ef 5b       	subi	r30, 0xBF	; 191
    2434:	ff 4f       	sbci	r31, 0xFF	; 255
    2436:	60 81       	ld	r22, Z
    2438:	71 81       	ldd	r23, Z+1	; 0x01
    243a:	82 81       	ldd	r24, Z+2	; 0x02
    243c:	93 81       	ldd	r25, Z+3	; 0x03
    243e:	20 e0       	ldi	r18, 0x00	; 0
    2440:	30 e0       	ldi	r19, 0x00	; 0
    2442:	40 e8       	ldi	r20, 0x80	; 128
    2444:	5f e3       	ldi	r21, 0x3F	; 63
    2446:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    244a:	88 23       	and	r24, r24
    244c:	34 f4       	brge	.+12     	; 0x245a <LCD_moveCursor+0xb6>
		__ticks = 1;
    244e:	81 e0       	ldi	r24, 0x01	; 1
    2450:	fe 01       	movw	r30, r28
    2452:	e0 5c       	subi	r30, 0xC0	; 192
    2454:	ff 4f       	sbci	r31, 0xFF	; 255
    2456:	80 83       	st	Z, r24
    2458:	9d c0       	rjmp	.+314    	; 0x2594 <LCD_moveCursor+0x1f0>
	else if (__tmp > 255)
    245a:	fe 01       	movw	r30, r28
    245c:	ef 5b       	subi	r30, 0xBF	; 191
    245e:	ff 4f       	sbci	r31, 0xFF	; 255
    2460:	60 81       	ld	r22, Z
    2462:	71 81       	ldd	r23, Z+1	; 0x01
    2464:	82 81       	ldd	r24, Z+2	; 0x02
    2466:	93 81       	ldd	r25, Z+3	; 0x03
    2468:	20 e0       	ldi	r18, 0x00	; 0
    246a:	30 e0       	ldi	r19, 0x00	; 0
    246c:	4f e7       	ldi	r20, 0x7F	; 127
    246e:	53 e4       	ldi	r21, 0x43	; 67
    2470:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    2474:	18 16       	cp	r1, r24
    2476:	0c f0       	brlt	.+2      	; 0x247a <LCD_moveCursor+0xd6>
    2478:	7e c0       	rjmp	.+252    	; 0x2576 <LCD_moveCursor+0x1d2>
	{
		_delay_ms(__us / 1000.0);
    247a:	fe 01       	movw	r30, r28
    247c:	eb 5b       	subi	r30, 0xBB	; 187
    247e:	ff 4f       	sbci	r31, 0xFF	; 255
    2480:	60 81       	ld	r22, Z
    2482:	71 81       	ldd	r23, Z+1	; 0x01
    2484:	82 81       	ldd	r24, Z+2	; 0x02
    2486:	93 81       	ldd	r25, Z+3	; 0x03
    2488:	20 e0       	ldi	r18, 0x00	; 0
    248a:	30 e0       	ldi	r19, 0x00	; 0
    248c:	4a e7       	ldi	r20, 0x7A	; 122
    248e:	54 e4       	ldi	r21, 0x44	; 68
    2490:	0e 94 23 03 	call	0x646	; 0x646 <__divsf3>
    2494:	dc 01       	movw	r26, r24
    2496:	cb 01       	movw	r24, r22
    2498:	8c af       	std	Y+60, r24	; 0x3c
    249a:	9d af       	std	Y+61, r25	; 0x3d
    249c:	ae af       	std	Y+62, r26	; 0x3e
    249e:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24a0:	6c ad       	ldd	r22, Y+60	; 0x3c
    24a2:	7d ad       	ldd	r23, Y+61	; 0x3d
    24a4:	8e ad       	ldd	r24, Y+62	; 0x3e
    24a6:	9f ad       	ldd	r25, Y+63	; 0x3f
    24a8:	20 e0       	ldi	r18, 0x00	; 0
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	4a e7       	ldi	r20, 0x7A	; 122
    24ae:	55 e4       	ldi	r21, 0x45	; 69
    24b0:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    24b4:	dc 01       	movw	r26, r24
    24b6:	cb 01       	movw	r24, r22
    24b8:	88 af       	std	Y+56, r24	; 0x38
    24ba:	99 af       	std	Y+57, r25	; 0x39
    24bc:	aa af       	std	Y+58, r26	; 0x3a
    24be:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    24c0:	68 ad       	ldd	r22, Y+56	; 0x38
    24c2:	79 ad       	ldd	r23, Y+57	; 0x39
    24c4:	8a ad       	ldd	r24, Y+58	; 0x3a
    24c6:	9b ad       	ldd	r25, Y+59	; 0x3b
    24c8:	20 e0       	ldi	r18, 0x00	; 0
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	40 e8       	ldi	r20, 0x80	; 128
    24ce:	5f e3       	ldi	r21, 0x3F	; 63
    24d0:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    24d4:	88 23       	and	r24, r24
    24d6:	2c f4       	brge	.+10     	; 0x24e2 <LCD_moveCursor+0x13e>
		__ticks = 1;
    24d8:	81 e0       	ldi	r24, 0x01	; 1
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	9f ab       	std	Y+55, r25	; 0x37
    24de:	8e ab       	std	Y+54, r24	; 0x36
    24e0:	3f c0       	rjmp	.+126    	; 0x2560 <LCD_moveCursor+0x1bc>
	else if (__tmp > 65535)
    24e2:	68 ad       	ldd	r22, Y+56	; 0x38
    24e4:	79 ad       	ldd	r23, Y+57	; 0x39
    24e6:	8a ad       	ldd	r24, Y+58	; 0x3a
    24e8:	9b ad       	ldd	r25, Y+59	; 0x3b
    24ea:	20 e0       	ldi	r18, 0x00	; 0
    24ec:	3f ef       	ldi	r19, 0xFF	; 255
    24ee:	4f e7       	ldi	r20, 0x7F	; 127
    24f0:	57 e4       	ldi	r21, 0x47	; 71
    24f2:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    24f6:	18 16       	cp	r1, r24
    24f8:	4c f5       	brge	.+82     	; 0x254c <LCD_moveCursor+0x1a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24fa:	6c ad       	ldd	r22, Y+60	; 0x3c
    24fc:	7d ad       	ldd	r23, Y+61	; 0x3d
    24fe:	8e ad       	ldd	r24, Y+62	; 0x3e
    2500:	9f ad       	ldd	r25, Y+63	; 0x3f
    2502:	20 e0       	ldi	r18, 0x00	; 0
    2504:	30 e0       	ldi	r19, 0x00	; 0
    2506:	40 e2       	ldi	r20, 0x20	; 32
    2508:	51 e4       	ldi	r21, 0x41	; 65
    250a:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    250e:	dc 01       	movw	r26, r24
    2510:	cb 01       	movw	r24, r22
    2512:	bc 01       	movw	r22, r24
    2514:	cd 01       	movw	r24, r26
    2516:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    251a:	dc 01       	movw	r26, r24
    251c:	cb 01       	movw	r24, r22
    251e:	9f ab       	std	Y+55, r25	; 0x37
    2520:	8e ab       	std	Y+54, r24	; 0x36
    2522:	0f c0       	rjmp	.+30     	; 0x2542 <LCD_moveCursor+0x19e>
    2524:	80 e9       	ldi	r24, 0x90	; 144
    2526:	91 e0       	ldi	r25, 0x01	; 1
    2528:	9d ab       	std	Y+53, r25	; 0x35
    252a:	8c ab       	std	Y+52, r24	; 0x34
    252c:	8c a9       	ldd	r24, Y+52	; 0x34
    252e:	9d a9       	ldd	r25, Y+53	; 0x35
    2530:	01 97       	sbiw	r24, 0x01	; 1
    2532:	f1 f7       	brne	.-4      	; 0x2530 <LCD_moveCursor+0x18c>
    2534:	9d ab       	std	Y+53, r25	; 0x35
    2536:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2538:	8e a9       	ldd	r24, Y+54	; 0x36
    253a:	9f a9       	ldd	r25, Y+55	; 0x37
    253c:	01 97       	sbiw	r24, 0x01	; 1
    253e:	9f ab       	std	Y+55, r25	; 0x37
    2540:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2542:	8e a9       	ldd	r24, Y+54	; 0x36
    2544:	9f a9       	ldd	r25, Y+55	; 0x37
    2546:	00 97       	sbiw	r24, 0x00	; 0
    2548:	69 f7       	brne	.-38     	; 0x2524 <LCD_moveCursor+0x180>
    254a:	2d c0       	rjmp	.+90     	; 0x25a6 <LCD_moveCursor+0x202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    254c:	68 ad       	ldd	r22, Y+56	; 0x38
    254e:	79 ad       	ldd	r23, Y+57	; 0x39
    2550:	8a ad       	ldd	r24, Y+58	; 0x3a
    2552:	9b ad       	ldd	r25, Y+59	; 0x3b
    2554:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    2558:	dc 01       	movw	r26, r24
    255a:	cb 01       	movw	r24, r22
    255c:	9f ab       	std	Y+55, r25	; 0x37
    255e:	8e ab       	std	Y+54, r24	; 0x36
    2560:	8e a9       	ldd	r24, Y+54	; 0x36
    2562:	9f a9       	ldd	r25, Y+55	; 0x37
    2564:	9b ab       	std	Y+51, r25	; 0x33
    2566:	8a ab       	std	Y+50, r24	; 0x32
    2568:	8a a9       	ldd	r24, Y+50	; 0x32
    256a:	9b a9       	ldd	r25, Y+51	; 0x33
    256c:	01 97       	sbiw	r24, 0x01	; 1
    256e:	f1 f7       	brne	.-4      	; 0x256c <LCD_moveCursor+0x1c8>
    2570:	9b ab       	std	Y+51, r25	; 0x33
    2572:	8a ab       	std	Y+50, r24	; 0x32
    2574:	18 c0       	rjmp	.+48     	; 0x25a6 <LCD_moveCursor+0x202>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2576:	fe 01       	movw	r30, r28
    2578:	ef 5b       	subi	r30, 0xBF	; 191
    257a:	ff 4f       	sbci	r31, 0xFF	; 255
    257c:	60 81       	ld	r22, Z
    257e:	71 81       	ldd	r23, Z+1	; 0x01
    2580:	82 81       	ldd	r24, Z+2	; 0x02
    2582:	93 81       	ldd	r25, Z+3	; 0x03
    2584:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    2588:	dc 01       	movw	r26, r24
    258a:	cb 01       	movw	r24, r22
    258c:	fe 01       	movw	r30, r28
    258e:	e0 5c       	subi	r30, 0xC0	; 192
    2590:	ff 4f       	sbci	r31, 0xFF	; 255
    2592:	80 83       	st	Z, r24
    2594:	fe 01       	movw	r30, r28
    2596:	e0 5c       	subi	r30, 0xC0	; 192
    2598:	ff 4f       	sbci	r31, 0xFF	; 255
    259a:	80 81       	ld	r24, Z
    259c:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    259e:	89 a9       	ldd	r24, Y+49	; 0x31
    25a0:	8a 95       	dec	r24
    25a2:	f1 f7       	brne	.-4      	; 0x25a0 <LCD_moveCursor+0x1fc>
    25a4:	89 ab       	std	Y+49, r24	; 0x31
}
void LCD_moveCursor(u8 line,u8 position)
{
	if(line==1)
	{
		for(u8 i=0;i<position;i++)
    25a6:	de 01       	movw	r26, r28
    25a8:	a5 5b       	subi	r26, 0xB5	; 181
    25aa:	bf 4f       	sbci	r27, 0xFF	; 255
    25ac:	fe 01       	movw	r30, r28
    25ae:	e5 5b       	subi	r30, 0xB5	; 181
    25b0:	ff 4f       	sbci	r31, 0xFF	; 255
    25b2:	80 81       	ld	r24, Z
    25b4:	8f 5f       	subi	r24, 0xFF	; 255
    25b6:	8c 93       	st	X, r24
    25b8:	fe 01       	movw	r30, r28
    25ba:	e5 5b       	subi	r30, 0xB5	; 181
    25bc:	ff 4f       	sbci	r31, 0xFF	; 255
    25be:	de 01       	movw	r26, r28
    25c0:	a3 5b       	subi	r26, 0xB3	; 179
    25c2:	bf 4f       	sbci	r27, 0xFF	; 255
    25c4:	90 81       	ld	r25, Z
    25c6:	8c 91       	ld	r24, X
    25c8:	98 17       	cp	r25, r24
    25ca:	08 f4       	brcc	.+2      	; 0x25ce <LCD_moveCursor+0x22a>
    25cc:	0c cf       	rjmp	.-488    	; 0x23e6 <LCD_moveCursor+0x42>
			LCD_sendCmnd(0b00010100);
			_delay_us(39);
		}

	}
if(line==2)
    25ce:	fe 01       	movw	r30, r28
    25d0:	e4 5b       	subi	r30, 0xB4	; 180
    25d2:	ff 4f       	sbci	r31, 0xFF	; 255
    25d4:	80 81       	ld	r24, Z
    25d6:	82 30       	cpi	r24, 0x02	; 2
    25d8:	09 f0       	breq	.+2      	; 0x25dc <LCD_moveCursor+0x238>
    25da:	b0 c1       	rjmp	.+864    	; 0x293c <LCD_moveCursor+0x598>
{
	for(u8 i=0;i<40;i++)
    25dc:	fe 01       	movw	r30, r28
    25de:	e6 5b       	subi	r30, 0xB6	; 182
    25e0:	ff 4f       	sbci	r31, 0xFF	; 255
    25e2:	10 82       	st	Z, r1
    25e4:	ca c0       	rjmp	.+404    	; 0x277a <LCD_moveCursor+0x3d6>
			{
				LCD_sendCmnd(0b00010100);
    25e6:	84 e1       	ldi	r24, 0x14	; 20
    25e8:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <LCD_sendCmnd>
    25ec:	80 e0       	ldi	r24, 0x00	; 0
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	ac e1       	ldi	r26, 0x1C	; 28
    25f2:	b2 e4       	ldi	r27, 0x42	; 66
    25f4:	8d a7       	std	Y+45, r24	; 0x2d
    25f6:	9e a7       	std	Y+46, r25	; 0x2e
    25f8:	af a7       	std	Y+47, r26	; 0x2f
    25fa:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    25fc:	6d a5       	ldd	r22, Y+45	; 0x2d
    25fe:	7e a5       	ldd	r23, Y+46	; 0x2e
    2600:	8f a5       	ldd	r24, Y+47	; 0x2f
    2602:	98 a9       	ldd	r25, Y+48	; 0x30
    2604:	2b ea       	ldi	r18, 0xAB	; 171
    2606:	3a ea       	ldi	r19, 0xAA	; 170
    2608:	4a ea       	ldi	r20, 0xAA	; 170
    260a:	50 e4       	ldi	r21, 0x40	; 64
    260c:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    2610:	dc 01       	movw	r26, r24
    2612:	cb 01       	movw	r24, r22
    2614:	89 a7       	std	Y+41, r24	; 0x29
    2616:	9a a7       	std	Y+42, r25	; 0x2a
    2618:	ab a7       	std	Y+43, r26	; 0x2b
    261a:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    261c:	69 a5       	ldd	r22, Y+41	; 0x29
    261e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2620:	8b a5       	ldd	r24, Y+43	; 0x2b
    2622:	9c a5       	ldd	r25, Y+44	; 0x2c
    2624:	20 e0       	ldi	r18, 0x00	; 0
    2626:	30 e0       	ldi	r19, 0x00	; 0
    2628:	40 e8       	ldi	r20, 0x80	; 128
    262a:	5f e3       	ldi	r21, 0x3F	; 63
    262c:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    2630:	88 23       	and	r24, r24
    2632:	1c f4       	brge	.+6      	; 0x263a <LCD_moveCursor+0x296>
		__ticks = 1;
    2634:	81 e0       	ldi	r24, 0x01	; 1
    2636:	88 a7       	std	Y+40, r24	; 0x28
    2638:	91 c0       	rjmp	.+290    	; 0x275c <LCD_moveCursor+0x3b8>
	else if (__tmp > 255)
    263a:	69 a5       	ldd	r22, Y+41	; 0x29
    263c:	7a a5       	ldd	r23, Y+42	; 0x2a
    263e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2640:	9c a5       	ldd	r25, Y+44	; 0x2c
    2642:	20 e0       	ldi	r18, 0x00	; 0
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	4f e7       	ldi	r20, 0x7F	; 127
    2648:	53 e4       	ldi	r21, 0x43	; 67
    264a:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    264e:	18 16       	cp	r1, r24
    2650:	0c f0       	brlt	.+2      	; 0x2654 <LCD_moveCursor+0x2b0>
    2652:	7b c0       	rjmp	.+246    	; 0x274a <LCD_moveCursor+0x3a6>
	{
		_delay_ms(__us / 1000.0);
    2654:	6d a5       	ldd	r22, Y+45	; 0x2d
    2656:	7e a5       	ldd	r23, Y+46	; 0x2e
    2658:	8f a5       	ldd	r24, Y+47	; 0x2f
    265a:	98 a9       	ldd	r25, Y+48	; 0x30
    265c:	20 e0       	ldi	r18, 0x00	; 0
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	4a e7       	ldi	r20, 0x7A	; 122
    2662:	54 e4       	ldi	r21, 0x44	; 68
    2664:	0e 94 23 03 	call	0x646	; 0x646 <__divsf3>
    2668:	dc 01       	movw	r26, r24
    266a:	cb 01       	movw	r24, r22
    266c:	8c a3       	std	Y+36, r24	; 0x24
    266e:	9d a3       	std	Y+37, r25	; 0x25
    2670:	ae a3       	std	Y+38, r26	; 0x26
    2672:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2674:	6c a1       	ldd	r22, Y+36	; 0x24
    2676:	7d a1       	ldd	r23, Y+37	; 0x25
    2678:	8e a1       	ldd	r24, Y+38	; 0x26
    267a:	9f a1       	ldd	r25, Y+39	; 0x27
    267c:	20 e0       	ldi	r18, 0x00	; 0
    267e:	30 e0       	ldi	r19, 0x00	; 0
    2680:	4a e7       	ldi	r20, 0x7A	; 122
    2682:	55 e4       	ldi	r21, 0x45	; 69
    2684:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    2688:	dc 01       	movw	r26, r24
    268a:	cb 01       	movw	r24, r22
    268c:	88 a3       	std	Y+32, r24	; 0x20
    268e:	99 a3       	std	Y+33, r25	; 0x21
    2690:	aa a3       	std	Y+34, r26	; 0x22
    2692:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2694:	68 a1       	ldd	r22, Y+32	; 0x20
    2696:	79 a1       	ldd	r23, Y+33	; 0x21
    2698:	8a a1       	ldd	r24, Y+34	; 0x22
    269a:	9b a1       	ldd	r25, Y+35	; 0x23
    269c:	20 e0       	ldi	r18, 0x00	; 0
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	40 e8       	ldi	r20, 0x80	; 128
    26a2:	5f e3       	ldi	r21, 0x3F	; 63
    26a4:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    26a8:	88 23       	and	r24, r24
    26aa:	2c f4       	brge	.+10     	; 0x26b6 <LCD_moveCursor+0x312>
		__ticks = 1;
    26ac:	81 e0       	ldi	r24, 0x01	; 1
    26ae:	90 e0       	ldi	r25, 0x00	; 0
    26b0:	9f 8f       	std	Y+31, r25	; 0x1f
    26b2:	8e 8f       	std	Y+30, r24	; 0x1e
    26b4:	3f c0       	rjmp	.+126    	; 0x2734 <LCD_moveCursor+0x390>
	else if (__tmp > 65535)
    26b6:	68 a1       	ldd	r22, Y+32	; 0x20
    26b8:	79 a1       	ldd	r23, Y+33	; 0x21
    26ba:	8a a1       	ldd	r24, Y+34	; 0x22
    26bc:	9b a1       	ldd	r25, Y+35	; 0x23
    26be:	20 e0       	ldi	r18, 0x00	; 0
    26c0:	3f ef       	ldi	r19, 0xFF	; 255
    26c2:	4f e7       	ldi	r20, 0x7F	; 127
    26c4:	57 e4       	ldi	r21, 0x47	; 71
    26c6:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    26ca:	18 16       	cp	r1, r24
    26cc:	4c f5       	brge	.+82     	; 0x2720 <LCD_moveCursor+0x37c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26ce:	6c a1       	ldd	r22, Y+36	; 0x24
    26d0:	7d a1       	ldd	r23, Y+37	; 0x25
    26d2:	8e a1       	ldd	r24, Y+38	; 0x26
    26d4:	9f a1       	ldd	r25, Y+39	; 0x27
    26d6:	20 e0       	ldi	r18, 0x00	; 0
    26d8:	30 e0       	ldi	r19, 0x00	; 0
    26da:	40 e2       	ldi	r20, 0x20	; 32
    26dc:	51 e4       	ldi	r21, 0x41	; 65
    26de:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    26e2:	dc 01       	movw	r26, r24
    26e4:	cb 01       	movw	r24, r22
    26e6:	bc 01       	movw	r22, r24
    26e8:	cd 01       	movw	r24, r26
    26ea:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    26ee:	dc 01       	movw	r26, r24
    26f0:	cb 01       	movw	r24, r22
    26f2:	9f 8f       	std	Y+31, r25	; 0x1f
    26f4:	8e 8f       	std	Y+30, r24	; 0x1e
    26f6:	0f c0       	rjmp	.+30     	; 0x2716 <LCD_moveCursor+0x372>
    26f8:	80 e9       	ldi	r24, 0x90	; 144
    26fa:	91 e0       	ldi	r25, 0x01	; 1
    26fc:	9d 8f       	std	Y+29, r25	; 0x1d
    26fe:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2700:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2702:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2704:	01 97       	sbiw	r24, 0x01	; 1
    2706:	f1 f7       	brne	.-4      	; 0x2704 <LCD_moveCursor+0x360>
    2708:	9d 8f       	std	Y+29, r25	; 0x1d
    270a:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    270c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    270e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2710:	01 97       	sbiw	r24, 0x01	; 1
    2712:	9f 8f       	std	Y+31, r25	; 0x1f
    2714:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2716:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2718:	9f 8d       	ldd	r25, Y+31	; 0x1f
    271a:	00 97       	sbiw	r24, 0x00	; 0
    271c:	69 f7       	brne	.-38     	; 0x26f8 <LCD_moveCursor+0x354>
    271e:	24 c0       	rjmp	.+72     	; 0x2768 <LCD_moveCursor+0x3c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2720:	68 a1       	ldd	r22, Y+32	; 0x20
    2722:	79 a1       	ldd	r23, Y+33	; 0x21
    2724:	8a a1       	ldd	r24, Y+34	; 0x22
    2726:	9b a1       	ldd	r25, Y+35	; 0x23
    2728:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    272c:	dc 01       	movw	r26, r24
    272e:	cb 01       	movw	r24, r22
    2730:	9f 8f       	std	Y+31, r25	; 0x1f
    2732:	8e 8f       	std	Y+30, r24	; 0x1e
    2734:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2736:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2738:	9b 8f       	std	Y+27, r25	; 0x1b
    273a:	8a 8f       	std	Y+26, r24	; 0x1a
    273c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    273e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2740:	01 97       	sbiw	r24, 0x01	; 1
    2742:	f1 f7       	brne	.-4      	; 0x2740 <LCD_moveCursor+0x39c>
    2744:	9b 8f       	std	Y+27, r25	; 0x1b
    2746:	8a 8f       	std	Y+26, r24	; 0x1a
    2748:	0f c0       	rjmp	.+30     	; 0x2768 <LCD_moveCursor+0x3c4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    274a:	69 a5       	ldd	r22, Y+41	; 0x29
    274c:	7a a5       	ldd	r23, Y+42	; 0x2a
    274e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2750:	9c a5       	ldd	r25, Y+44	; 0x2c
    2752:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    2756:	dc 01       	movw	r26, r24
    2758:	cb 01       	movw	r24, r22
    275a:	88 a7       	std	Y+40, r24	; 0x28
    275c:	88 a5       	ldd	r24, Y+40	; 0x28
    275e:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2760:	89 8d       	ldd	r24, Y+25	; 0x19
    2762:	8a 95       	dec	r24
    2764:	f1 f7       	brne	.-4      	; 0x2762 <LCD_moveCursor+0x3be>
    2766:	89 8f       	std	Y+25, r24	; 0x19
		}

	}
if(line==2)
{
	for(u8 i=0;i<40;i++)
    2768:	de 01       	movw	r26, r28
    276a:	a6 5b       	subi	r26, 0xB6	; 182
    276c:	bf 4f       	sbci	r27, 0xFF	; 255
    276e:	fe 01       	movw	r30, r28
    2770:	e6 5b       	subi	r30, 0xB6	; 182
    2772:	ff 4f       	sbci	r31, 0xFF	; 255
    2774:	80 81       	ld	r24, Z
    2776:	8f 5f       	subi	r24, 0xFF	; 255
    2778:	8c 93       	st	X, r24
    277a:	fe 01       	movw	r30, r28
    277c:	e6 5b       	subi	r30, 0xB6	; 182
    277e:	ff 4f       	sbci	r31, 0xFF	; 255
    2780:	80 81       	ld	r24, Z
    2782:	88 32       	cpi	r24, 0x28	; 40
    2784:	08 f4       	brcc	.+2      	; 0x2788 <LCD_moveCursor+0x3e4>
    2786:	2f cf       	rjmp	.-418    	; 0x25e6 <LCD_moveCursor+0x242>
			{
				LCD_sendCmnd(0b00010100);
				_delay_us(39);
			}

	for(u8 i=0;i<position;i++)
    2788:	fe 01       	movw	r30, r28
    278a:	e7 5b       	subi	r30, 0xB7	; 183
    278c:	ff 4f       	sbci	r31, 0xFF	; 255
    278e:	10 82       	st	Z, r1
    2790:	ca c0       	rjmp	.+404    	; 0x2926 <LCD_moveCursor+0x582>
			{
				LCD_sendCmnd(0b00010100);
    2792:	84 e1       	ldi	r24, 0x14	; 20
    2794:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <LCD_sendCmnd>
    2798:	80 e0       	ldi	r24, 0x00	; 0
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	ac e1       	ldi	r26, 0x1C	; 28
    279e:	b2 e4       	ldi	r27, 0x42	; 66
    27a0:	8d 8b       	std	Y+21, r24	; 0x15
    27a2:	9e 8b       	std	Y+22, r25	; 0x16
    27a4:	af 8b       	std	Y+23, r26	; 0x17
    27a6:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    27a8:	6d 89       	ldd	r22, Y+21	; 0x15
    27aa:	7e 89       	ldd	r23, Y+22	; 0x16
    27ac:	8f 89       	ldd	r24, Y+23	; 0x17
    27ae:	98 8d       	ldd	r25, Y+24	; 0x18
    27b0:	2b ea       	ldi	r18, 0xAB	; 171
    27b2:	3a ea       	ldi	r19, 0xAA	; 170
    27b4:	4a ea       	ldi	r20, 0xAA	; 170
    27b6:	50 e4       	ldi	r21, 0x40	; 64
    27b8:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    27bc:	dc 01       	movw	r26, r24
    27be:	cb 01       	movw	r24, r22
    27c0:	89 8b       	std	Y+17, r24	; 0x11
    27c2:	9a 8b       	std	Y+18, r25	; 0x12
    27c4:	ab 8b       	std	Y+19, r26	; 0x13
    27c6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    27c8:	69 89       	ldd	r22, Y+17	; 0x11
    27ca:	7a 89       	ldd	r23, Y+18	; 0x12
    27cc:	8b 89       	ldd	r24, Y+19	; 0x13
    27ce:	9c 89       	ldd	r25, Y+20	; 0x14
    27d0:	20 e0       	ldi	r18, 0x00	; 0
    27d2:	30 e0       	ldi	r19, 0x00	; 0
    27d4:	40 e8       	ldi	r20, 0x80	; 128
    27d6:	5f e3       	ldi	r21, 0x3F	; 63
    27d8:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    27dc:	88 23       	and	r24, r24
    27de:	1c f4       	brge	.+6      	; 0x27e6 <LCD_moveCursor+0x442>
		__ticks = 1;
    27e0:	81 e0       	ldi	r24, 0x01	; 1
    27e2:	88 8b       	std	Y+16, r24	; 0x10
    27e4:	91 c0       	rjmp	.+290    	; 0x2908 <LCD_moveCursor+0x564>
	else if (__tmp > 255)
    27e6:	69 89       	ldd	r22, Y+17	; 0x11
    27e8:	7a 89       	ldd	r23, Y+18	; 0x12
    27ea:	8b 89       	ldd	r24, Y+19	; 0x13
    27ec:	9c 89       	ldd	r25, Y+20	; 0x14
    27ee:	20 e0       	ldi	r18, 0x00	; 0
    27f0:	30 e0       	ldi	r19, 0x00	; 0
    27f2:	4f e7       	ldi	r20, 0x7F	; 127
    27f4:	53 e4       	ldi	r21, 0x43	; 67
    27f6:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    27fa:	18 16       	cp	r1, r24
    27fc:	0c f0       	brlt	.+2      	; 0x2800 <LCD_moveCursor+0x45c>
    27fe:	7b c0       	rjmp	.+246    	; 0x28f6 <LCD_moveCursor+0x552>
	{
		_delay_ms(__us / 1000.0);
    2800:	6d 89       	ldd	r22, Y+21	; 0x15
    2802:	7e 89       	ldd	r23, Y+22	; 0x16
    2804:	8f 89       	ldd	r24, Y+23	; 0x17
    2806:	98 8d       	ldd	r25, Y+24	; 0x18
    2808:	20 e0       	ldi	r18, 0x00	; 0
    280a:	30 e0       	ldi	r19, 0x00	; 0
    280c:	4a e7       	ldi	r20, 0x7A	; 122
    280e:	54 e4       	ldi	r21, 0x44	; 68
    2810:	0e 94 23 03 	call	0x646	; 0x646 <__divsf3>
    2814:	dc 01       	movw	r26, r24
    2816:	cb 01       	movw	r24, r22
    2818:	8c 87       	std	Y+12, r24	; 0x0c
    281a:	9d 87       	std	Y+13, r25	; 0x0d
    281c:	ae 87       	std	Y+14, r26	; 0x0e
    281e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2820:	6c 85       	ldd	r22, Y+12	; 0x0c
    2822:	7d 85       	ldd	r23, Y+13	; 0x0d
    2824:	8e 85       	ldd	r24, Y+14	; 0x0e
    2826:	9f 85       	ldd	r25, Y+15	; 0x0f
    2828:	20 e0       	ldi	r18, 0x00	; 0
    282a:	30 e0       	ldi	r19, 0x00	; 0
    282c:	4a e7       	ldi	r20, 0x7A	; 122
    282e:	55 e4       	ldi	r21, 0x45	; 69
    2830:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    2834:	dc 01       	movw	r26, r24
    2836:	cb 01       	movw	r24, r22
    2838:	88 87       	std	Y+8, r24	; 0x08
    283a:	99 87       	std	Y+9, r25	; 0x09
    283c:	aa 87       	std	Y+10, r26	; 0x0a
    283e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2840:	68 85       	ldd	r22, Y+8	; 0x08
    2842:	79 85       	ldd	r23, Y+9	; 0x09
    2844:	8a 85       	ldd	r24, Y+10	; 0x0a
    2846:	9b 85       	ldd	r25, Y+11	; 0x0b
    2848:	20 e0       	ldi	r18, 0x00	; 0
    284a:	30 e0       	ldi	r19, 0x00	; 0
    284c:	40 e8       	ldi	r20, 0x80	; 128
    284e:	5f e3       	ldi	r21, 0x3F	; 63
    2850:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    2854:	88 23       	and	r24, r24
    2856:	2c f4       	brge	.+10     	; 0x2862 <LCD_moveCursor+0x4be>
		__ticks = 1;
    2858:	81 e0       	ldi	r24, 0x01	; 1
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	9f 83       	std	Y+7, r25	; 0x07
    285e:	8e 83       	std	Y+6, r24	; 0x06
    2860:	3f c0       	rjmp	.+126    	; 0x28e0 <LCD_moveCursor+0x53c>
	else if (__tmp > 65535)
    2862:	68 85       	ldd	r22, Y+8	; 0x08
    2864:	79 85       	ldd	r23, Y+9	; 0x09
    2866:	8a 85       	ldd	r24, Y+10	; 0x0a
    2868:	9b 85       	ldd	r25, Y+11	; 0x0b
    286a:	20 e0       	ldi	r18, 0x00	; 0
    286c:	3f ef       	ldi	r19, 0xFF	; 255
    286e:	4f e7       	ldi	r20, 0x7F	; 127
    2870:	57 e4       	ldi	r21, 0x47	; 71
    2872:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    2876:	18 16       	cp	r1, r24
    2878:	4c f5       	brge	.+82     	; 0x28cc <LCD_moveCursor+0x528>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    287a:	6c 85       	ldd	r22, Y+12	; 0x0c
    287c:	7d 85       	ldd	r23, Y+13	; 0x0d
    287e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2880:	9f 85       	ldd	r25, Y+15	; 0x0f
    2882:	20 e0       	ldi	r18, 0x00	; 0
    2884:	30 e0       	ldi	r19, 0x00	; 0
    2886:	40 e2       	ldi	r20, 0x20	; 32
    2888:	51 e4       	ldi	r21, 0x41	; 65
    288a:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    288e:	dc 01       	movw	r26, r24
    2890:	cb 01       	movw	r24, r22
    2892:	bc 01       	movw	r22, r24
    2894:	cd 01       	movw	r24, r26
    2896:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    289a:	dc 01       	movw	r26, r24
    289c:	cb 01       	movw	r24, r22
    289e:	9f 83       	std	Y+7, r25	; 0x07
    28a0:	8e 83       	std	Y+6, r24	; 0x06
    28a2:	0f c0       	rjmp	.+30     	; 0x28c2 <LCD_moveCursor+0x51e>
    28a4:	80 e9       	ldi	r24, 0x90	; 144
    28a6:	91 e0       	ldi	r25, 0x01	; 1
    28a8:	9d 83       	std	Y+5, r25	; 0x05
    28aa:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    28ac:	8c 81       	ldd	r24, Y+4	; 0x04
    28ae:	9d 81       	ldd	r25, Y+5	; 0x05
    28b0:	01 97       	sbiw	r24, 0x01	; 1
    28b2:	f1 f7       	brne	.-4      	; 0x28b0 <LCD_moveCursor+0x50c>
    28b4:	9d 83       	std	Y+5, r25	; 0x05
    28b6:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28b8:	8e 81       	ldd	r24, Y+6	; 0x06
    28ba:	9f 81       	ldd	r25, Y+7	; 0x07
    28bc:	01 97       	sbiw	r24, 0x01	; 1
    28be:	9f 83       	std	Y+7, r25	; 0x07
    28c0:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28c2:	8e 81       	ldd	r24, Y+6	; 0x06
    28c4:	9f 81       	ldd	r25, Y+7	; 0x07
    28c6:	00 97       	sbiw	r24, 0x00	; 0
    28c8:	69 f7       	brne	.-38     	; 0x28a4 <LCD_moveCursor+0x500>
    28ca:	24 c0       	rjmp	.+72     	; 0x2914 <LCD_moveCursor+0x570>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28cc:	68 85       	ldd	r22, Y+8	; 0x08
    28ce:	79 85       	ldd	r23, Y+9	; 0x09
    28d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    28d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    28d4:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    28d8:	dc 01       	movw	r26, r24
    28da:	cb 01       	movw	r24, r22
    28dc:	9f 83       	std	Y+7, r25	; 0x07
    28de:	8e 83       	std	Y+6, r24	; 0x06
    28e0:	8e 81       	ldd	r24, Y+6	; 0x06
    28e2:	9f 81       	ldd	r25, Y+7	; 0x07
    28e4:	9b 83       	std	Y+3, r25	; 0x03
    28e6:	8a 83       	std	Y+2, r24	; 0x02
    28e8:	8a 81       	ldd	r24, Y+2	; 0x02
    28ea:	9b 81       	ldd	r25, Y+3	; 0x03
    28ec:	01 97       	sbiw	r24, 0x01	; 1
    28ee:	f1 f7       	brne	.-4      	; 0x28ec <LCD_moveCursor+0x548>
    28f0:	9b 83       	std	Y+3, r25	; 0x03
    28f2:	8a 83       	std	Y+2, r24	; 0x02
    28f4:	0f c0       	rjmp	.+30     	; 0x2914 <LCD_moveCursor+0x570>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    28f6:	69 89       	ldd	r22, Y+17	; 0x11
    28f8:	7a 89       	ldd	r23, Y+18	; 0x12
    28fa:	8b 89       	ldd	r24, Y+19	; 0x13
    28fc:	9c 89       	ldd	r25, Y+20	; 0x14
    28fe:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    2902:	dc 01       	movw	r26, r24
    2904:	cb 01       	movw	r24, r22
    2906:	88 8b       	std	Y+16, r24	; 0x10
    2908:	88 89       	ldd	r24, Y+16	; 0x10
    290a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    290c:	89 81       	ldd	r24, Y+1	; 0x01
    290e:	8a 95       	dec	r24
    2910:	f1 f7       	brne	.-4      	; 0x290e <LCD_moveCursor+0x56a>
    2912:	89 83       	std	Y+1, r24	; 0x01
			{
				LCD_sendCmnd(0b00010100);
				_delay_us(39);
			}

	for(u8 i=0;i<position;i++)
    2914:	de 01       	movw	r26, r28
    2916:	a7 5b       	subi	r26, 0xB7	; 183
    2918:	bf 4f       	sbci	r27, 0xFF	; 255
    291a:	fe 01       	movw	r30, r28
    291c:	e7 5b       	subi	r30, 0xB7	; 183
    291e:	ff 4f       	sbci	r31, 0xFF	; 255
    2920:	80 81       	ld	r24, Z
    2922:	8f 5f       	subi	r24, 0xFF	; 255
    2924:	8c 93       	st	X, r24
    2926:	fe 01       	movw	r30, r28
    2928:	e7 5b       	subi	r30, 0xB7	; 183
    292a:	ff 4f       	sbci	r31, 0xFF	; 255
    292c:	de 01       	movw	r26, r28
    292e:	a3 5b       	subi	r26, 0xB3	; 179
    2930:	bf 4f       	sbci	r27, 0xFF	; 255
    2932:	90 81       	ld	r25, Z
    2934:	8c 91       	ld	r24, X
    2936:	98 17       	cp	r25, r24
    2938:	08 f4       	brcc	.+2      	; 0x293c <LCD_moveCursor+0x598>
    293a:	2b cf       	rjmp	.-426    	; 0x2792 <LCD_moveCursor+0x3ee>


}


}
    293c:	c3 5b       	subi	r28, 0xB3	; 179
    293e:	df 4f       	sbci	r29, 0xFF	; 255
    2940:	0f b6       	in	r0, 0x3f	; 63
    2942:	f8 94       	cli
    2944:	de bf       	out	0x3e, r29	; 62
    2946:	0f be       	out	0x3f, r0	; 63
    2948:	cd bf       	out	0x3d, r28	; 61
    294a:	cf 91       	pop	r28
    294c:	df 91       	pop	r29
    294e:	1f 91       	pop	r17
    2950:	0f 91       	pop	r16
    2952:	08 95       	ret

00002954 <LCD_shiftDisplay>:
//1 for right and 0 for left
void LCD_shiftDisplay(u8 direction)
{
    2954:	df 93       	push	r29
    2956:	cf 93       	push	r28
    2958:	cd b7       	in	r28, 0x3d	; 61
    295a:	de b7       	in	r29, 0x3e	; 62
    295c:	e1 97       	sbiw	r28, 0x31	; 49
    295e:	0f b6       	in	r0, 0x3f	; 63
    2960:	f8 94       	cli
    2962:	de bf       	out	0x3e, r29	; 62
    2964:	0f be       	out	0x3f, r0	; 63
    2966:	cd bf       	out	0x3d, r28	; 61
    2968:	89 ab       	std	Y+49, r24	; 0x31
	if(direction==1)
    296a:	89 a9       	ldd	r24, Y+49	; 0x31
    296c:	81 30       	cpi	r24, 0x01	; 1
    296e:	09 f0       	breq	.+2      	; 0x2972 <LCD_shiftDisplay+0x1e>
    2970:	c1 c0       	rjmp	.+386    	; 0x2af4 <LCD_shiftDisplay+0x1a0>
	{
		LCD_sendCmnd(0b00011100);
    2972:	8c e1       	ldi	r24, 0x1C	; 28
    2974:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <LCD_sendCmnd>
    2978:	80 e0       	ldi	r24, 0x00	; 0
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	a0 e2       	ldi	r26, 0x20	; 32
    297e:	b2 e4       	ldi	r27, 0x42	; 66
    2980:	8d a7       	std	Y+45, r24	; 0x2d
    2982:	9e a7       	std	Y+46, r25	; 0x2e
    2984:	af a7       	std	Y+47, r26	; 0x2f
    2986:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2988:	6d a5       	ldd	r22, Y+45	; 0x2d
    298a:	7e a5       	ldd	r23, Y+46	; 0x2e
    298c:	8f a5       	ldd	r24, Y+47	; 0x2f
    298e:	98 a9       	ldd	r25, Y+48	; 0x30
    2990:	2b ea       	ldi	r18, 0xAB	; 171
    2992:	3a ea       	ldi	r19, 0xAA	; 170
    2994:	4a ea       	ldi	r20, 0xAA	; 170
    2996:	50 e4       	ldi	r21, 0x40	; 64
    2998:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    299c:	dc 01       	movw	r26, r24
    299e:	cb 01       	movw	r24, r22
    29a0:	89 a7       	std	Y+41, r24	; 0x29
    29a2:	9a a7       	std	Y+42, r25	; 0x2a
    29a4:	ab a7       	std	Y+43, r26	; 0x2b
    29a6:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    29a8:	69 a5       	ldd	r22, Y+41	; 0x29
    29aa:	7a a5       	ldd	r23, Y+42	; 0x2a
    29ac:	8b a5       	ldd	r24, Y+43	; 0x2b
    29ae:	9c a5       	ldd	r25, Y+44	; 0x2c
    29b0:	20 e0       	ldi	r18, 0x00	; 0
    29b2:	30 e0       	ldi	r19, 0x00	; 0
    29b4:	40 e8       	ldi	r20, 0x80	; 128
    29b6:	5f e3       	ldi	r21, 0x3F	; 63
    29b8:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    29bc:	88 23       	and	r24, r24
    29be:	1c f4       	brge	.+6      	; 0x29c6 <LCD_shiftDisplay+0x72>
		__ticks = 1;
    29c0:	81 e0       	ldi	r24, 0x01	; 1
    29c2:	88 a7       	std	Y+40, r24	; 0x28
    29c4:	91 c0       	rjmp	.+290    	; 0x2ae8 <LCD_shiftDisplay+0x194>
	else if (__tmp > 255)
    29c6:	69 a5       	ldd	r22, Y+41	; 0x29
    29c8:	7a a5       	ldd	r23, Y+42	; 0x2a
    29ca:	8b a5       	ldd	r24, Y+43	; 0x2b
    29cc:	9c a5       	ldd	r25, Y+44	; 0x2c
    29ce:	20 e0       	ldi	r18, 0x00	; 0
    29d0:	30 e0       	ldi	r19, 0x00	; 0
    29d2:	4f e7       	ldi	r20, 0x7F	; 127
    29d4:	53 e4       	ldi	r21, 0x43	; 67
    29d6:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    29da:	18 16       	cp	r1, r24
    29dc:	0c f0       	brlt	.+2      	; 0x29e0 <LCD_shiftDisplay+0x8c>
    29de:	7b c0       	rjmp	.+246    	; 0x2ad6 <LCD_shiftDisplay+0x182>
	{
		_delay_ms(__us / 1000.0);
    29e0:	6d a5       	ldd	r22, Y+45	; 0x2d
    29e2:	7e a5       	ldd	r23, Y+46	; 0x2e
    29e4:	8f a5       	ldd	r24, Y+47	; 0x2f
    29e6:	98 a9       	ldd	r25, Y+48	; 0x30
    29e8:	20 e0       	ldi	r18, 0x00	; 0
    29ea:	30 e0       	ldi	r19, 0x00	; 0
    29ec:	4a e7       	ldi	r20, 0x7A	; 122
    29ee:	54 e4       	ldi	r21, 0x44	; 68
    29f0:	0e 94 23 03 	call	0x646	; 0x646 <__divsf3>
    29f4:	dc 01       	movw	r26, r24
    29f6:	cb 01       	movw	r24, r22
    29f8:	8c a3       	std	Y+36, r24	; 0x24
    29fa:	9d a3       	std	Y+37, r25	; 0x25
    29fc:	ae a3       	std	Y+38, r26	; 0x26
    29fe:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a00:	6c a1       	ldd	r22, Y+36	; 0x24
    2a02:	7d a1       	ldd	r23, Y+37	; 0x25
    2a04:	8e a1       	ldd	r24, Y+38	; 0x26
    2a06:	9f a1       	ldd	r25, Y+39	; 0x27
    2a08:	20 e0       	ldi	r18, 0x00	; 0
    2a0a:	30 e0       	ldi	r19, 0x00	; 0
    2a0c:	4a e7       	ldi	r20, 0x7A	; 122
    2a0e:	55 e4       	ldi	r21, 0x45	; 69
    2a10:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    2a14:	dc 01       	movw	r26, r24
    2a16:	cb 01       	movw	r24, r22
    2a18:	88 a3       	std	Y+32, r24	; 0x20
    2a1a:	99 a3       	std	Y+33, r25	; 0x21
    2a1c:	aa a3       	std	Y+34, r26	; 0x22
    2a1e:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2a20:	68 a1       	ldd	r22, Y+32	; 0x20
    2a22:	79 a1       	ldd	r23, Y+33	; 0x21
    2a24:	8a a1       	ldd	r24, Y+34	; 0x22
    2a26:	9b a1       	ldd	r25, Y+35	; 0x23
    2a28:	20 e0       	ldi	r18, 0x00	; 0
    2a2a:	30 e0       	ldi	r19, 0x00	; 0
    2a2c:	40 e8       	ldi	r20, 0x80	; 128
    2a2e:	5f e3       	ldi	r21, 0x3F	; 63
    2a30:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    2a34:	88 23       	and	r24, r24
    2a36:	2c f4       	brge	.+10     	; 0x2a42 <LCD_shiftDisplay+0xee>
		__ticks = 1;
    2a38:	81 e0       	ldi	r24, 0x01	; 1
    2a3a:	90 e0       	ldi	r25, 0x00	; 0
    2a3c:	9f 8f       	std	Y+31, r25	; 0x1f
    2a3e:	8e 8f       	std	Y+30, r24	; 0x1e
    2a40:	3f c0       	rjmp	.+126    	; 0x2ac0 <LCD_shiftDisplay+0x16c>
	else if (__tmp > 65535)
    2a42:	68 a1       	ldd	r22, Y+32	; 0x20
    2a44:	79 a1       	ldd	r23, Y+33	; 0x21
    2a46:	8a a1       	ldd	r24, Y+34	; 0x22
    2a48:	9b a1       	ldd	r25, Y+35	; 0x23
    2a4a:	20 e0       	ldi	r18, 0x00	; 0
    2a4c:	3f ef       	ldi	r19, 0xFF	; 255
    2a4e:	4f e7       	ldi	r20, 0x7F	; 127
    2a50:	57 e4       	ldi	r21, 0x47	; 71
    2a52:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    2a56:	18 16       	cp	r1, r24
    2a58:	4c f5       	brge	.+82     	; 0x2aac <LCD_shiftDisplay+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a5a:	6c a1       	ldd	r22, Y+36	; 0x24
    2a5c:	7d a1       	ldd	r23, Y+37	; 0x25
    2a5e:	8e a1       	ldd	r24, Y+38	; 0x26
    2a60:	9f a1       	ldd	r25, Y+39	; 0x27
    2a62:	20 e0       	ldi	r18, 0x00	; 0
    2a64:	30 e0       	ldi	r19, 0x00	; 0
    2a66:	40 e2       	ldi	r20, 0x20	; 32
    2a68:	51 e4       	ldi	r21, 0x41	; 65
    2a6a:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    2a6e:	dc 01       	movw	r26, r24
    2a70:	cb 01       	movw	r24, r22
    2a72:	bc 01       	movw	r22, r24
    2a74:	cd 01       	movw	r24, r26
    2a76:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    2a7a:	dc 01       	movw	r26, r24
    2a7c:	cb 01       	movw	r24, r22
    2a7e:	9f 8f       	std	Y+31, r25	; 0x1f
    2a80:	8e 8f       	std	Y+30, r24	; 0x1e
    2a82:	0f c0       	rjmp	.+30     	; 0x2aa2 <LCD_shiftDisplay+0x14e>
    2a84:	80 e9       	ldi	r24, 0x90	; 144
    2a86:	91 e0       	ldi	r25, 0x01	; 1
    2a88:	9d 8f       	std	Y+29, r25	; 0x1d
    2a8a:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a8c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2a8e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2a90:	01 97       	sbiw	r24, 0x01	; 1
    2a92:	f1 f7       	brne	.-4      	; 0x2a90 <LCD_shiftDisplay+0x13c>
    2a94:	9d 8f       	std	Y+29, r25	; 0x1d
    2a96:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a98:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a9a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2a9c:	01 97       	sbiw	r24, 0x01	; 1
    2a9e:	9f 8f       	std	Y+31, r25	; 0x1f
    2aa0:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aa2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2aa4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2aa6:	00 97       	sbiw	r24, 0x00	; 0
    2aa8:	69 f7       	brne	.-38     	; 0x2a84 <LCD_shiftDisplay+0x130>
    2aaa:	24 c0       	rjmp	.+72     	; 0x2af4 <LCD_shiftDisplay+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aac:	68 a1       	ldd	r22, Y+32	; 0x20
    2aae:	79 a1       	ldd	r23, Y+33	; 0x21
    2ab0:	8a a1       	ldd	r24, Y+34	; 0x22
    2ab2:	9b a1       	ldd	r25, Y+35	; 0x23
    2ab4:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    2ab8:	dc 01       	movw	r26, r24
    2aba:	cb 01       	movw	r24, r22
    2abc:	9f 8f       	std	Y+31, r25	; 0x1f
    2abe:	8e 8f       	std	Y+30, r24	; 0x1e
    2ac0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ac2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2ac4:	9b 8f       	std	Y+27, r25	; 0x1b
    2ac6:	8a 8f       	std	Y+26, r24	; 0x1a
    2ac8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2aca:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2acc:	01 97       	sbiw	r24, 0x01	; 1
    2ace:	f1 f7       	brne	.-4      	; 0x2acc <LCD_shiftDisplay+0x178>
    2ad0:	9b 8f       	std	Y+27, r25	; 0x1b
    2ad2:	8a 8f       	std	Y+26, r24	; 0x1a
    2ad4:	0f c0       	rjmp	.+30     	; 0x2af4 <LCD_shiftDisplay+0x1a0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2ad6:	69 a5       	ldd	r22, Y+41	; 0x29
    2ad8:	7a a5       	ldd	r23, Y+42	; 0x2a
    2ada:	8b a5       	ldd	r24, Y+43	; 0x2b
    2adc:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ade:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    2ae2:	dc 01       	movw	r26, r24
    2ae4:	cb 01       	movw	r24, r22
    2ae6:	88 a7       	std	Y+40, r24	; 0x28
    2ae8:	88 a5       	ldd	r24, Y+40	; 0x28
    2aea:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2aec:	89 8d       	ldd	r24, Y+25	; 0x19
    2aee:	8a 95       	dec	r24
    2af0:	f1 f7       	brne	.-4      	; 0x2aee <LCD_shiftDisplay+0x19a>
    2af2:	89 8f       	std	Y+25, r24	; 0x19
		_delay_us(40);

	}
	if(direction==0)
    2af4:	89 a9       	ldd	r24, Y+49	; 0x31
    2af6:	88 23       	and	r24, r24
    2af8:	09 f0       	breq	.+2      	; 0x2afc <LCD_shiftDisplay+0x1a8>
    2afa:	c1 c0       	rjmp	.+386    	; 0x2c7e <LCD_shiftDisplay+0x32a>
		{
			LCD_sendCmnd(0b00011000);
    2afc:	88 e1       	ldi	r24, 0x18	; 24
    2afe:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <LCD_sendCmnd>
    2b02:	80 e0       	ldi	r24, 0x00	; 0
    2b04:	90 e0       	ldi	r25, 0x00	; 0
    2b06:	a0 e2       	ldi	r26, 0x20	; 32
    2b08:	b2 e4       	ldi	r27, 0x42	; 66
    2b0a:	8d 8b       	std	Y+21, r24	; 0x15
    2b0c:	9e 8b       	std	Y+22, r25	; 0x16
    2b0e:	af 8b       	std	Y+23, r26	; 0x17
    2b10:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2b12:	6d 89       	ldd	r22, Y+21	; 0x15
    2b14:	7e 89       	ldd	r23, Y+22	; 0x16
    2b16:	8f 89       	ldd	r24, Y+23	; 0x17
    2b18:	98 8d       	ldd	r25, Y+24	; 0x18
    2b1a:	2b ea       	ldi	r18, 0xAB	; 171
    2b1c:	3a ea       	ldi	r19, 0xAA	; 170
    2b1e:	4a ea       	ldi	r20, 0xAA	; 170
    2b20:	50 e4       	ldi	r21, 0x40	; 64
    2b22:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    2b26:	dc 01       	movw	r26, r24
    2b28:	cb 01       	movw	r24, r22
    2b2a:	89 8b       	std	Y+17, r24	; 0x11
    2b2c:	9a 8b       	std	Y+18, r25	; 0x12
    2b2e:	ab 8b       	std	Y+19, r26	; 0x13
    2b30:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2b32:	69 89       	ldd	r22, Y+17	; 0x11
    2b34:	7a 89       	ldd	r23, Y+18	; 0x12
    2b36:	8b 89       	ldd	r24, Y+19	; 0x13
    2b38:	9c 89       	ldd	r25, Y+20	; 0x14
    2b3a:	20 e0       	ldi	r18, 0x00	; 0
    2b3c:	30 e0       	ldi	r19, 0x00	; 0
    2b3e:	40 e8       	ldi	r20, 0x80	; 128
    2b40:	5f e3       	ldi	r21, 0x3F	; 63
    2b42:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    2b46:	88 23       	and	r24, r24
    2b48:	1c f4       	brge	.+6      	; 0x2b50 <LCD_shiftDisplay+0x1fc>
		__ticks = 1;
    2b4a:	81 e0       	ldi	r24, 0x01	; 1
    2b4c:	88 8b       	std	Y+16, r24	; 0x10
    2b4e:	91 c0       	rjmp	.+290    	; 0x2c72 <LCD_shiftDisplay+0x31e>
	else if (__tmp > 255)
    2b50:	69 89       	ldd	r22, Y+17	; 0x11
    2b52:	7a 89       	ldd	r23, Y+18	; 0x12
    2b54:	8b 89       	ldd	r24, Y+19	; 0x13
    2b56:	9c 89       	ldd	r25, Y+20	; 0x14
    2b58:	20 e0       	ldi	r18, 0x00	; 0
    2b5a:	30 e0       	ldi	r19, 0x00	; 0
    2b5c:	4f e7       	ldi	r20, 0x7F	; 127
    2b5e:	53 e4       	ldi	r21, 0x43	; 67
    2b60:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    2b64:	18 16       	cp	r1, r24
    2b66:	0c f0       	brlt	.+2      	; 0x2b6a <LCD_shiftDisplay+0x216>
    2b68:	7b c0       	rjmp	.+246    	; 0x2c60 <LCD_shiftDisplay+0x30c>
	{
		_delay_ms(__us / 1000.0);
    2b6a:	6d 89       	ldd	r22, Y+21	; 0x15
    2b6c:	7e 89       	ldd	r23, Y+22	; 0x16
    2b6e:	8f 89       	ldd	r24, Y+23	; 0x17
    2b70:	98 8d       	ldd	r25, Y+24	; 0x18
    2b72:	20 e0       	ldi	r18, 0x00	; 0
    2b74:	30 e0       	ldi	r19, 0x00	; 0
    2b76:	4a e7       	ldi	r20, 0x7A	; 122
    2b78:	54 e4       	ldi	r21, 0x44	; 68
    2b7a:	0e 94 23 03 	call	0x646	; 0x646 <__divsf3>
    2b7e:	dc 01       	movw	r26, r24
    2b80:	cb 01       	movw	r24, r22
    2b82:	8c 87       	std	Y+12, r24	; 0x0c
    2b84:	9d 87       	std	Y+13, r25	; 0x0d
    2b86:	ae 87       	std	Y+14, r26	; 0x0e
    2b88:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b8a:	6c 85       	ldd	r22, Y+12	; 0x0c
    2b8c:	7d 85       	ldd	r23, Y+13	; 0x0d
    2b8e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b90:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b92:	20 e0       	ldi	r18, 0x00	; 0
    2b94:	30 e0       	ldi	r19, 0x00	; 0
    2b96:	4a e7       	ldi	r20, 0x7A	; 122
    2b98:	55 e4       	ldi	r21, 0x45	; 69
    2b9a:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    2b9e:	dc 01       	movw	r26, r24
    2ba0:	cb 01       	movw	r24, r22
    2ba2:	88 87       	std	Y+8, r24	; 0x08
    2ba4:	99 87       	std	Y+9, r25	; 0x09
    2ba6:	aa 87       	std	Y+10, r26	; 0x0a
    2ba8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2baa:	68 85       	ldd	r22, Y+8	; 0x08
    2bac:	79 85       	ldd	r23, Y+9	; 0x09
    2bae:	8a 85       	ldd	r24, Y+10	; 0x0a
    2bb0:	9b 85       	ldd	r25, Y+11	; 0x0b
    2bb2:	20 e0       	ldi	r18, 0x00	; 0
    2bb4:	30 e0       	ldi	r19, 0x00	; 0
    2bb6:	40 e8       	ldi	r20, 0x80	; 128
    2bb8:	5f e3       	ldi	r21, 0x3F	; 63
    2bba:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    2bbe:	88 23       	and	r24, r24
    2bc0:	2c f4       	brge	.+10     	; 0x2bcc <LCD_shiftDisplay+0x278>
		__ticks = 1;
    2bc2:	81 e0       	ldi	r24, 0x01	; 1
    2bc4:	90 e0       	ldi	r25, 0x00	; 0
    2bc6:	9f 83       	std	Y+7, r25	; 0x07
    2bc8:	8e 83       	std	Y+6, r24	; 0x06
    2bca:	3f c0       	rjmp	.+126    	; 0x2c4a <LCD_shiftDisplay+0x2f6>
	else if (__tmp > 65535)
    2bcc:	68 85       	ldd	r22, Y+8	; 0x08
    2bce:	79 85       	ldd	r23, Y+9	; 0x09
    2bd0:	8a 85       	ldd	r24, Y+10	; 0x0a
    2bd2:	9b 85       	ldd	r25, Y+11	; 0x0b
    2bd4:	20 e0       	ldi	r18, 0x00	; 0
    2bd6:	3f ef       	ldi	r19, 0xFF	; 255
    2bd8:	4f e7       	ldi	r20, 0x7F	; 127
    2bda:	57 e4       	ldi	r21, 0x47	; 71
    2bdc:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    2be0:	18 16       	cp	r1, r24
    2be2:	4c f5       	brge	.+82     	; 0x2c36 <LCD_shiftDisplay+0x2e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2be4:	6c 85       	ldd	r22, Y+12	; 0x0c
    2be6:	7d 85       	ldd	r23, Y+13	; 0x0d
    2be8:	8e 85       	ldd	r24, Y+14	; 0x0e
    2bea:	9f 85       	ldd	r25, Y+15	; 0x0f
    2bec:	20 e0       	ldi	r18, 0x00	; 0
    2bee:	30 e0       	ldi	r19, 0x00	; 0
    2bf0:	40 e2       	ldi	r20, 0x20	; 32
    2bf2:	51 e4       	ldi	r21, 0x41	; 65
    2bf4:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    2bf8:	dc 01       	movw	r26, r24
    2bfa:	cb 01       	movw	r24, r22
    2bfc:	bc 01       	movw	r22, r24
    2bfe:	cd 01       	movw	r24, r26
    2c00:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    2c04:	dc 01       	movw	r26, r24
    2c06:	cb 01       	movw	r24, r22
    2c08:	9f 83       	std	Y+7, r25	; 0x07
    2c0a:	8e 83       	std	Y+6, r24	; 0x06
    2c0c:	0f c0       	rjmp	.+30     	; 0x2c2c <LCD_shiftDisplay+0x2d8>
    2c0e:	80 e9       	ldi	r24, 0x90	; 144
    2c10:	91 e0       	ldi	r25, 0x01	; 1
    2c12:	9d 83       	std	Y+5, r25	; 0x05
    2c14:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c16:	8c 81       	ldd	r24, Y+4	; 0x04
    2c18:	9d 81       	ldd	r25, Y+5	; 0x05
    2c1a:	01 97       	sbiw	r24, 0x01	; 1
    2c1c:	f1 f7       	brne	.-4      	; 0x2c1a <LCD_shiftDisplay+0x2c6>
    2c1e:	9d 83       	std	Y+5, r25	; 0x05
    2c20:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c22:	8e 81       	ldd	r24, Y+6	; 0x06
    2c24:	9f 81       	ldd	r25, Y+7	; 0x07
    2c26:	01 97       	sbiw	r24, 0x01	; 1
    2c28:	9f 83       	std	Y+7, r25	; 0x07
    2c2a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c2c:	8e 81       	ldd	r24, Y+6	; 0x06
    2c2e:	9f 81       	ldd	r25, Y+7	; 0x07
    2c30:	00 97       	sbiw	r24, 0x00	; 0
    2c32:	69 f7       	brne	.-38     	; 0x2c0e <LCD_shiftDisplay+0x2ba>
    2c34:	24 c0       	rjmp	.+72     	; 0x2c7e <LCD_shiftDisplay+0x32a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c36:	68 85       	ldd	r22, Y+8	; 0x08
    2c38:	79 85       	ldd	r23, Y+9	; 0x09
    2c3a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c3c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c3e:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    2c42:	dc 01       	movw	r26, r24
    2c44:	cb 01       	movw	r24, r22
    2c46:	9f 83       	std	Y+7, r25	; 0x07
    2c48:	8e 83       	std	Y+6, r24	; 0x06
    2c4a:	8e 81       	ldd	r24, Y+6	; 0x06
    2c4c:	9f 81       	ldd	r25, Y+7	; 0x07
    2c4e:	9b 83       	std	Y+3, r25	; 0x03
    2c50:	8a 83       	std	Y+2, r24	; 0x02
    2c52:	8a 81       	ldd	r24, Y+2	; 0x02
    2c54:	9b 81       	ldd	r25, Y+3	; 0x03
    2c56:	01 97       	sbiw	r24, 0x01	; 1
    2c58:	f1 f7       	brne	.-4      	; 0x2c56 <LCD_shiftDisplay+0x302>
    2c5a:	9b 83       	std	Y+3, r25	; 0x03
    2c5c:	8a 83       	std	Y+2, r24	; 0x02
    2c5e:	0f c0       	rjmp	.+30     	; 0x2c7e <LCD_shiftDisplay+0x32a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2c60:	69 89       	ldd	r22, Y+17	; 0x11
    2c62:	7a 89       	ldd	r23, Y+18	; 0x12
    2c64:	8b 89       	ldd	r24, Y+19	; 0x13
    2c66:	9c 89       	ldd	r25, Y+20	; 0x14
    2c68:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    2c6c:	dc 01       	movw	r26, r24
    2c6e:	cb 01       	movw	r24, r22
    2c70:	88 8b       	std	Y+16, r24	; 0x10
    2c72:	88 89       	ldd	r24, Y+16	; 0x10
    2c74:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2c76:	89 81       	ldd	r24, Y+1	; 0x01
    2c78:	8a 95       	dec	r24
    2c7a:	f1 f7       	brne	.-4      	; 0x2c78 <LCD_shiftDisplay+0x324>
    2c7c:	89 83       	std	Y+1, r24	; 0x01
			_delay_us(40);

		}

}
    2c7e:	e1 96       	adiw	r28, 0x31	; 49
    2c80:	0f b6       	in	r0, 0x3f	; 63
    2c82:	f8 94       	cli
    2c84:	de bf       	out	0x3e, r29	; 62
    2c86:	0f be       	out	0x3f, r0	; 63
    2c88:	cd bf       	out	0x3d, r28	; 61
    2c8a:	cf 91       	pop	r28
    2c8c:	df 91       	pop	r29
    2c8e:	08 95       	ret

00002c90 <LCD_writeNumber>:




void LCD_writeNumber(u32 num)
{
    2c90:	0f 93       	push	r16
    2c92:	1f 93       	push	r17
    2c94:	df 93       	push	r29
    2c96:	cf 93       	push	r28
    2c98:	cd b7       	in	r28, 0x3d	; 61
    2c9a:	de b7       	in	r29, 0x3e	; 62
    2c9c:	c2 5d       	subi	r28, 0xD2	; 210
    2c9e:	d0 40       	sbci	r29, 0x00	; 0
    2ca0:	0f b6       	in	r0, 0x3f	; 63
    2ca2:	f8 94       	cli
    2ca4:	de bf       	out	0x3e, r29	; 62
    2ca6:	0f be       	out	0x3f, r0	; 63
    2ca8:	cd bf       	out	0x3d, r28	; 61
    2caa:	fe 01       	movw	r30, r28
    2cac:	e1 53       	subi	r30, 0x31	; 49
    2cae:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb0:	60 83       	st	Z, r22
    2cb2:	71 83       	std	Z+1, r23	; 0x01
    2cb4:	82 83       	std	Z+2, r24	; 0x02
    2cb6:	93 83       	std	Z+3, r25	; 0x03
s=0;

}*/

	s16 arr[100];
	s16 i=0;
    2cb8:	1e 82       	std	Y+6, r1	; 0x06
    2cba:	1d 82       	std	Y+5, r1	; 0x05
	s16 j,r;

	//separating the number to be able to send it as a char to the LCD
	if(num==0)
    2cbc:	fe 01       	movw	r30, r28
    2cbe:	e1 53       	subi	r30, 0x31	; 49
    2cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc2:	80 81       	ld	r24, Z
    2cc4:	91 81       	ldd	r25, Z+1	; 0x01
    2cc6:	a2 81       	ldd	r26, Z+2	; 0x02
    2cc8:	b3 81       	ldd	r27, Z+3	; 0x03
    2cca:	00 97       	sbiw	r24, 0x00	; 0
    2ccc:	a1 05       	cpc	r26, r1
    2cce:	b1 05       	cpc	r27, r1
    2cd0:	09 f0       	breq	.+2      	; 0x2cd4 <LCD_writeNumber+0x44>
    2cd2:	48 c0       	rjmp	.+144    	; 0x2d64 <LCD_writeNumber+0xd4>
	 	{
	 		LCD_sendChar(num+48);
    2cd4:	fe 01       	movw	r30, r28
    2cd6:	e1 53       	subi	r30, 0x31	; 49
    2cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cda:	80 81       	ld	r24, Z
    2cdc:	80 5d       	subi	r24, 0xD0	; 208
    2cde:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <LCD_sendChar>
    2ce2:	40 c0       	rjmp	.+128    	; 0x2d64 <LCD_writeNumber+0xd4>
	 	}
	while(num!=0)
	{
		r=num%10;
    2ce4:	fe 01       	movw	r30, r28
    2ce6:	e1 53       	subi	r30, 0x31	; 49
    2ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cea:	80 81       	ld	r24, Z
    2cec:	91 81       	ldd	r25, Z+1	; 0x01
    2cee:	a2 81       	ldd	r26, Z+2	; 0x02
    2cf0:	b3 81       	ldd	r27, Z+3	; 0x03
    2cf2:	2a e0       	ldi	r18, 0x0A	; 10
    2cf4:	30 e0       	ldi	r19, 0x00	; 0
    2cf6:	40 e0       	ldi	r20, 0x00	; 0
    2cf8:	50 e0       	ldi	r21, 0x00	; 0
    2cfa:	bc 01       	movw	r22, r24
    2cfc:	cd 01       	movw	r24, r26
    2cfe:	0e 94 11 1a 	call	0x3422	; 0x3422 <__udivmodsi4>
    2d02:	dc 01       	movw	r26, r24
    2d04:	cb 01       	movw	r24, r22
    2d06:	9a 83       	std	Y+2, r25	; 0x02
    2d08:	89 83       	std	Y+1, r24	; 0x01
		arr[i]=r;
    2d0a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d0c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d0e:	9c 01       	movw	r18, r24
    2d10:	22 0f       	add	r18, r18
    2d12:	33 1f       	adc	r19, r19
    2d14:	ce 01       	movw	r24, r28
    2d16:	01 96       	adiw	r24, 0x01	; 1
    2d18:	82 0f       	add	r24, r18
    2d1a:	93 1f       	adc	r25, r19
    2d1c:	fc 01       	movw	r30, r24
    2d1e:	36 96       	adiw	r30, 0x06	; 6
    2d20:	89 81       	ldd	r24, Y+1	; 0x01
    2d22:	9a 81       	ldd	r25, Y+2	; 0x02
    2d24:	91 83       	std	Z+1, r25	; 0x01
    2d26:	80 83       	st	Z, r24
		i++;
    2d28:	8d 81       	ldd	r24, Y+5	; 0x05
    2d2a:	9e 81       	ldd	r25, Y+6	; 0x06
    2d2c:	01 96       	adiw	r24, 0x01	; 1
    2d2e:	9e 83       	std	Y+6, r25	; 0x06
    2d30:	8d 83       	std	Y+5, r24	; 0x05
		num=num/10;
    2d32:	8e 01       	movw	r16, r28
    2d34:	01 53       	subi	r16, 0x31	; 49
    2d36:	1f 4f       	sbci	r17, 0xFF	; 255
    2d38:	fe 01       	movw	r30, r28
    2d3a:	e1 53       	subi	r30, 0x31	; 49
    2d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d3e:	80 81       	ld	r24, Z
    2d40:	91 81       	ldd	r25, Z+1	; 0x01
    2d42:	a2 81       	ldd	r26, Z+2	; 0x02
    2d44:	b3 81       	ldd	r27, Z+3	; 0x03
    2d46:	2a e0       	ldi	r18, 0x0A	; 10
    2d48:	30 e0       	ldi	r19, 0x00	; 0
    2d4a:	40 e0       	ldi	r20, 0x00	; 0
    2d4c:	50 e0       	ldi	r21, 0x00	; 0
    2d4e:	bc 01       	movw	r22, r24
    2d50:	cd 01       	movw	r24, r26
    2d52:	0e 94 11 1a 	call	0x3422	; 0x3422 <__udivmodsi4>
    2d56:	da 01       	movw	r26, r20
    2d58:	c9 01       	movw	r24, r18
    2d5a:	f8 01       	movw	r30, r16
    2d5c:	80 83       	st	Z, r24
    2d5e:	91 83       	std	Z+1, r25	; 0x01
    2d60:	a2 83       	std	Z+2, r26	; 0x02
    2d62:	b3 83       	std	Z+3, r27	; 0x03
	//separating the number to be able to send it as a char to the LCD
	if(num==0)
	 	{
	 		LCD_sendChar(num+48);
	 	}
	while(num!=0)
    2d64:	fe 01       	movw	r30, r28
    2d66:	e1 53       	subi	r30, 0x31	; 49
    2d68:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6a:	80 81       	ld	r24, Z
    2d6c:	91 81       	ldd	r25, Z+1	; 0x01
    2d6e:	a2 81       	ldd	r26, Z+2	; 0x02
    2d70:	b3 81       	ldd	r27, Z+3	; 0x03
    2d72:	00 97       	sbiw	r24, 0x00	; 0
    2d74:	a1 05       	cpc	r26, r1
    2d76:	b1 05       	cpc	r27, r1
    2d78:	09 f0       	breq	.+2      	; 0x2d7c <LCD_writeNumber+0xec>
    2d7a:	b4 cf       	rjmp	.-152    	; 0x2ce4 <LCD_writeNumber+0x54>
		arr[i]=r;
		i++;
		num=num/10;
	 }
	// to be able to send the number we have to reverse the array as digits are stored in the array backwards
	for(j=i-1;j>-1;j--)
    2d7c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d7e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d80:	01 97       	sbiw	r24, 0x01	; 1
    2d82:	9c 83       	std	Y+4, r25	; 0x04
    2d84:	8b 83       	std	Y+3, r24	; 0x03
    2d86:	15 c0       	rjmp	.+42     	; 0x2db2 <LCD_writeNumber+0x122>
	{
	LCD_sendChar(arr[j]+48);
    2d88:	8b 81       	ldd	r24, Y+3	; 0x03
    2d8a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d8c:	9c 01       	movw	r18, r24
    2d8e:	22 0f       	add	r18, r18
    2d90:	33 1f       	adc	r19, r19
    2d92:	ce 01       	movw	r24, r28
    2d94:	01 96       	adiw	r24, 0x01	; 1
    2d96:	82 0f       	add	r24, r18
    2d98:	93 1f       	adc	r25, r19
    2d9a:	fc 01       	movw	r30, r24
    2d9c:	36 96       	adiw	r30, 0x06	; 6
    2d9e:	80 81       	ld	r24, Z
    2da0:	91 81       	ldd	r25, Z+1	; 0x01
    2da2:	80 5d       	subi	r24, 0xD0	; 208
    2da4:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <LCD_sendChar>
		arr[i]=r;
		i++;
		num=num/10;
	 }
	// to be able to send the number we have to reverse the array as digits are stored in the array backwards
	for(j=i-1;j>-1;j--)
    2da8:	8b 81       	ldd	r24, Y+3	; 0x03
    2daa:	9c 81       	ldd	r25, Y+4	; 0x04
    2dac:	01 97       	sbiw	r24, 0x01	; 1
    2dae:	9c 83       	std	Y+4, r25	; 0x04
    2db0:	8b 83       	std	Y+3, r24	; 0x03
    2db2:	8b 81       	ldd	r24, Y+3	; 0x03
    2db4:	9c 81       	ldd	r25, Y+4	; 0x04
    2db6:	99 23       	and	r25, r25
    2db8:	3c f7       	brge	.-50     	; 0x2d88 <LCD_writeNumber+0xf8>
	{
	LCD_sendChar(arr[j]+48);
	}
}
    2dba:	ce 52       	subi	r28, 0x2E	; 46
    2dbc:	df 4f       	sbci	r29, 0xFF	; 255
    2dbe:	0f b6       	in	r0, 0x3f	; 63
    2dc0:	f8 94       	cli
    2dc2:	de bf       	out	0x3e, r29	; 62
    2dc4:	0f be       	out	0x3f, r0	; 63
    2dc6:	cd bf       	out	0x3d, r28	; 61
    2dc8:	cf 91       	pop	r28
    2dca:	df 91       	pop	r29
    2dcc:	1f 91       	pop	r17
    2dce:	0f 91       	pop	r16
    2dd0:	08 95       	ret

00002dd2 <L293D_DCMOTOR_start>:




void L293D_DCMOTOR_start(u8 direction,u8 motor)
{
    2dd2:	df 93       	push	r29
    2dd4:	cf 93       	push	r28
    2dd6:	cd b7       	in	r28, 0x3d	; 61
    2dd8:	de b7       	in	r29, 0x3e	; 62
    2dda:	28 97       	sbiw	r28, 0x08	; 8
    2ddc:	0f b6       	in	r0, 0x3f	; 63
    2dde:	f8 94       	cli
    2de0:	de bf       	out	0x3e, r29	; 62
    2de2:	0f be       	out	0x3f, r0	; 63
    2de4:	cd bf       	out	0x3d, r28	; 61
    2de6:	89 83       	std	Y+1, r24	; 0x01
    2de8:	6a 83       	std	Y+2, r22	; 0x02
switch(motor)
    2dea:	8a 81       	ldd	r24, Y+2	; 0x02
    2dec:	28 2f       	mov	r18, r24
    2dee:	30 e0       	ldi	r19, 0x00	; 0
    2df0:	38 87       	std	Y+8, r19	; 0x08
    2df2:	2f 83       	std	Y+7, r18	; 0x07
    2df4:	8f 81       	ldd	r24, Y+7	; 0x07
    2df6:	98 85       	ldd	r25, Y+8	; 0x08
    2df8:	81 34       	cpi	r24, 0x41	; 65
    2dfa:	91 05       	cpc	r25, r1
    2dfc:	31 f0       	breq	.+12     	; 0x2e0a <L293D_DCMOTOR_start+0x38>
    2dfe:	2f 81       	ldd	r18, Y+7	; 0x07
    2e00:	38 85       	ldd	r19, Y+8	; 0x08
    2e02:	22 34       	cpi	r18, 0x42	; 66
    2e04:	31 05       	cpc	r19, r1
    2e06:	d9 f1       	breq	.+118    	; 0x2e7e <L293D_DCMOTOR_start+0xac>
    2e08:	73 c0       	rjmp	.+230    	; 0x2ef0 <L293D_DCMOTOR_start+0x11e>
{
case 'A':
{
	//motorA
	DIO_setPinDirection(H_EN1_PORT,H_EN1_PIN,DIO_PIN_OUTPUT);
    2e0a:	80 e0       	ldi	r24, 0x00	; 0
    2e0c:	60 e0       	ldi	r22, 0x00	; 0
    2e0e:	41 e0       	ldi	r20, 0x01	; 1
    2e10:	0e 94 e7 06 	call	0xdce	; 0xdce <DIO_setPinDirection>
	DIO_setPinValue(H_EN1_PORT,H_EN1_PIN,DIO_PIN_HIGH);
    2e14:	80 e0       	ldi	r24, 0x00	; 0
    2e16:	60 e0       	ldi	r22, 0x00	; 0
    2e18:	41 e0       	ldi	r20, 0x01	; 1
    2e1a:	0e 94 c9 07 	call	0xf92	; 0xf92 <DIO_setPinValue>
	DIO_setPinDirection(H_A1_PORT,H_A1_PIN,DIO_PIN_OUTPUT);
    2e1e:	80 e0       	ldi	r24, 0x00	; 0
    2e20:	61 e0       	ldi	r22, 0x01	; 1
    2e22:	41 e0       	ldi	r20, 0x01	; 1
    2e24:	0e 94 e7 06 	call	0xdce	; 0xdce <DIO_setPinDirection>
	DIO_setPinDirection(H_A2_PORT,H_A2_PIN,DIO_PIN_OUTPUT);
    2e28:	80 e0       	ldi	r24, 0x00	; 0
    2e2a:	64 e0       	ldi	r22, 0x04	; 4
    2e2c:	41 e0       	ldi	r20, 0x01	; 1
    2e2e:	0e 94 e7 06 	call	0xdce	; 0xdce <DIO_setPinDirection>
	switch(direction)
    2e32:	89 81       	ldd	r24, Y+1	; 0x01
    2e34:	28 2f       	mov	r18, r24
    2e36:	30 e0       	ldi	r19, 0x00	; 0
    2e38:	3e 83       	std	Y+6, r19	; 0x06
    2e3a:	2d 83       	std	Y+5, r18	; 0x05
    2e3c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e3e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e40:	81 30       	cpi	r24, 0x01	; 1
    2e42:	91 05       	cpc	r25, r1
    2e44:	31 f0       	breq	.+12     	; 0x2e52 <L293D_DCMOTOR_start+0x80>
    2e46:	2d 81       	ldd	r18, Y+5	; 0x05
    2e48:	3e 81       	ldd	r19, Y+6	; 0x06
    2e4a:	22 30       	cpi	r18, 0x02	; 2
    2e4c:	31 05       	cpc	r19, r1
    2e4e:	61 f0       	breq	.+24     	; 0x2e68 <L293D_DCMOTOR_start+0x96>
    2e50:	4f c0       	rjmp	.+158    	; 0x2ef0 <L293D_DCMOTOR_start+0x11e>
	{
	case 1:
	{
	//CLCWISE
	DIO_setPinValue(H_A1_PORT,H_A1_PIN,DIO_PIN_HIGH);
    2e52:	80 e0       	ldi	r24, 0x00	; 0
    2e54:	61 e0       	ldi	r22, 0x01	; 1
    2e56:	41 e0       	ldi	r20, 0x01	; 1
    2e58:	0e 94 c9 07 	call	0xf92	; 0xf92 <DIO_setPinValue>
	DIO_setPinValue(H_A2_PORT,H_A2_PIN,DIO_PIN_LOW);
    2e5c:	80 e0       	ldi	r24, 0x00	; 0
    2e5e:	64 e0       	ldi	r22, 0x04	; 4
    2e60:	40 e0       	ldi	r20, 0x00	; 0
    2e62:	0e 94 c9 07 	call	0xf92	; 0xf92 <DIO_setPinValue>
    2e66:	44 c0       	rjmp	.+136    	; 0x2ef0 <L293D_DCMOTOR_start+0x11e>
	break;
	}
	case 2:
	{
	//ANTI CLCWISE
	DIO_setPinValue(H_A1_PORT,H_A1_PIN,DIO_PIN_LOW);
    2e68:	80 e0       	ldi	r24, 0x00	; 0
    2e6a:	61 e0       	ldi	r22, 0x01	; 1
    2e6c:	40 e0       	ldi	r20, 0x00	; 0
    2e6e:	0e 94 c9 07 	call	0xf92	; 0xf92 <DIO_setPinValue>
	DIO_setPinValue(H_A2_PORT,H_A2_PIN,DIO_PIN_HIGH);
    2e72:	80 e0       	ldi	r24, 0x00	; 0
    2e74:	64 e0       	ldi	r22, 0x04	; 4
    2e76:	41 e0       	ldi	r20, 0x01	; 1
    2e78:	0e 94 c9 07 	call	0xf92	; 0xf92 <DIO_setPinValue>
    2e7c:	39 c0       	rjmp	.+114    	; 0x2ef0 <L293D_DCMOTOR_start+0x11e>
	break;
}
case 'B':
{
	//motorB
	DIO_setPinDirection(H_EN2_PORT,H_EN2_PIN,DIO_PIN_OUTPUT);
    2e7e:	82 e0       	ldi	r24, 0x02	; 2
    2e80:	67 e0       	ldi	r22, 0x07	; 7
    2e82:	41 e0       	ldi	r20, 0x01	; 1
    2e84:	0e 94 e7 06 	call	0xdce	; 0xdce <DIO_setPinDirection>
	DIO_setPinValue(H_EN2_PORT,H_EN2_PIN,DIO_PIN_HIGH);
    2e88:	82 e0       	ldi	r24, 0x02	; 2
    2e8a:	67 e0       	ldi	r22, 0x07	; 7
    2e8c:	41 e0       	ldi	r20, 0x01	; 1
    2e8e:	0e 94 c9 07 	call	0xf92	; 0xf92 <DIO_setPinValue>
    DIO_setPinDirection(H_A3_PORT,H_A3_PIN,DIO_PIN_OUTPUT);
    2e92:	81 e0       	ldi	r24, 0x01	; 1
    2e94:	65 e0       	ldi	r22, 0x05	; 5
    2e96:	41 e0       	ldi	r20, 0x01	; 1
    2e98:	0e 94 e7 06 	call	0xdce	; 0xdce <DIO_setPinDirection>
	DIO_setPinDirection(H_A4_PORT,H_A4_PIN,DIO_PIN_OUTPUT);
    2e9c:	81 e0       	ldi	r24, 0x01	; 1
    2e9e:	66 e0       	ldi	r22, 0x06	; 6
    2ea0:	41 e0       	ldi	r20, 0x01	; 1
    2ea2:	0e 94 e7 06 	call	0xdce	; 0xdce <DIO_setPinDirection>
	switch(direction)
    2ea6:	89 81       	ldd	r24, Y+1	; 0x01
    2ea8:	28 2f       	mov	r18, r24
    2eaa:	30 e0       	ldi	r19, 0x00	; 0
    2eac:	3c 83       	std	Y+4, r19	; 0x04
    2eae:	2b 83       	std	Y+3, r18	; 0x03
    2eb0:	8b 81       	ldd	r24, Y+3	; 0x03
    2eb2:	9c 81       	ldd	r25, Y+4	; 0x04
    2eb4:	81 30       	cpi	r24, 0x01	; 1
    2eb6:	91 05       	cpc	r25, r1
    2eb8:	31 f0       	breq	.+12     	; 0x2ec6 <L293D_DCMOTOR_start+0xf4>
    2eba:	2b 81       	ldd	r18, Y+3	; 0x03
    2ebc:	3c 81       	ldd	r19, Y+4	; 0x04
    2ebe:	22 30       	cpi	r18, 0x02	; 2
    2ec0:	31 05       	cpc	r19, r1
    2ec2:	61 f0       	breq	.+24     	; 0x2edc <L293D_DCMOTOR_start+0x10a>
    2ec4:	15 c0       	rjmp	.+42     	; 0x2ef0 <L293D_DCMOTOR_start+0x11e>
	{
	case 1:
	{
	//CLCWISE
	DIO_setPinValue(H_A3_PORT,H_A3_PIN,DIO_PIN_HIGH);
    2ec6:	81 e0       	ldi	r24, 0x01	; 1
    2ec8:	65 e0       	ldi	r22, 0x05	; 5
    2eca:	41 e0       	ldi	r20, 0x01	; 1
    2ecc:	0e 94 c9 07 	call	0xf92	; 0xf92 <DIO_setPinValue>
	DIO_setPinValue(H_A4_PORT,H_A4_PIN,DIO_PIN_LOW);
    2ed0:	81 e0       	ldi	r24, 0x01	; 1
    2ed2:	66 e0       	ldi	r22, 0x06	; 6
    2ed4:	40 e0       	ldi	r20, 0x00	; 0
    2ed6:	0e 94 c9 07 	call	0xf92	; 0xf92 <DIO_setPinValue>
    2eda:	0a c0       	rjmp	.+20     	; 0x2ef0 <L293D_DCMOTOR_start+0x11e>
    break;
	}
	case 2:
	{
	//ANTI CLCWISE
	DIO_setPinValue(H_A3_PORT,H_A3_PIN,DIO_PIN_LOW);
    2edc:	81 e0       	ldi	r24, 0x01	; 1
    2ede:	65 e0       	ldi	r22, 0x05	; 5
    2ee0:	40 e0       	ldi	r20, 0x00	; 0
    2ee2:	0e 94 c9 07 	call	0xf92	; 0xf92 <DIO_setPinValue>
	DIO_setPinValue(H_A4_PORT,H_A4_PIN,DIO_PIN_HIGH);
    2ee6:	81 e0       	ldi	r24, 0x01	; 1
    2ee8:	66 e0       	ldi	r22, 0x06	; 6
    2eea:	41 e0       	ldi	r20, 0x01	; 1
    2eec:	0e 94 c9 07 	call	0xf92	; 0xf92 <DIO_setPinValue>
break;

}

}
}
    2ef0:	28 96       	adiw	r28, 0x08	; 8
    2ef2:	0f b6       	in	r0, 0x3f	; 63
    2ef4:	f8 94       	cli
    2ef6:	de bf       	out	0x3e, r29	; 62
    2ef8:	0f be       	out	0x3f, r0	; 63
    2efa:	cd bf       	out	0x3d, r28	; 61
    2efc:	cf 91       	pop	r28
    2efe:	df 91       	pop	r29
    2f00:	08 95       	ret

00002f02 <L293D_DCMOTOR_stop>:
void L293D_DCMOTOR_stop(u8 motor)
{
    2f02:	df 93       	push	r29
    2f04:	cf 93       	push	r28
    2f06:	00 d0       	rcall	.+0      	; 0x2f08 <L293D_DCMOTOR_stop+0x6>
    2f08:	0f 92       	push	r0
    2f0a:	cd b7       	in	r28, 0x3d	; 61
    2f0c:	de b7       	in	r29, 0x3e	; 62
    2f0e:	89 83       	std	Y+1, r24	; 0x01
switch(motor)
    2f10:	89 81       	ldd	r24, Y+1	; 0x01
    2f12:	28 2f       	mov	r18, r24
    2f14:	30 e0       	ldi	r19, 0x00	; 0
    2f16:	3b 83       	std	Y+3, r19	; 0x03
    2f18:	2a 83       	std	Y+2, r18	; 0x02
    2f1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f1c:	9b 81       	ldd	r25, Y+3	; 0x03
    2f1e:	81 34       	cpi	r24, 0x41	; 65
    2f20:	91 05       	cpc	r25, r1
    2f22:	41 f0       	breq	.+16     	; 0x2f34 <L293D_DCMOTOR_stop+0x32>
    2f24:	2a 81       	ldd	r18, Y+2	; 0x02
    2f26:	3b 81       	ldd	r19, Y+3	; 0x03
    2f28:	22 34       	cpi	r18, 0x42	; 66
    2f2a:	31 05       	cpc	r19, r1
    2f2c:	91 f4       	brne	.+36     	; 0x2f52 <L293D_DCMOTOR_stop+0x50>
{
case 'B':
{
	TMR1_stop();
    2f2e:	0e 94 a6 06 	call	0xd4c	; 0xd4c <TMR1_stop>
    2f32:	0f c0       	rjmp	.+30     	; 0x2f52 <L293D_DCMOTOR_stop+0x50>
}
case 'A':
{


	DIO_setPinValue(H_A1_PORT,H_A1_PIN,DIO_PIN_LOW);
    2f34:	80 e0       	ldi	r24, 0x00	; 0
    2f36:	61 e0       	ldi	r22, 0x01	; 1
    2f38:	40 e0       	ldi	r20, 0x00	; 0
    2f3a:	0e 94 c9 07 	call	0xf92	; 0xf92 <DIO_setPinValue>
	DIO_setPinValue(H_A2_PORT,H_A2_PIN,DIO_PIN_LOW);
    2f3e:	80 e0       	ldi	r24, 0x00	; 0
    2f40:	64 e0       	ldi	r22, 0x04	; 4
    2f42:	40 e0       	ldi	r20, 0x00	; 0
    2f44:	0e 94 c9 07 	call	0xf92	; 0xf92 <DIO_setPinValue>
	DIO_setPinValue(H_EN1_PORT,H_EN1_PIN,DIO_PIN_LOW);
    2f48:	80 e0       	ldi	r24, 0x00	; 0
    2f4a:	60 e0       	ldi	r22, 0x00	; 0
    2f4c:	40 e0       	ldi	r20, 0x00	; 0
    2f4e:	0e 94 c9 07 	call	0xf92	; 0xf92 <DIO_setPinValue>
break;
}


}
}
    2f52:	0f 90       	pop	r0
    2f54:	0f 90       	pop	r0
    2f56:	0f 90       	pop	r0
    2f58:	cf 91       	pop	r28
    2f5a:	df 91       	pop	r29
    2f5c:	08 95       	ret

00002f5e <L293D_DCMOTOR_speed>:
void L293D_DCMOTOR_speed(u8 motor,u8 num,u8 direction)
{
    2f5e:	df 93       	push	r29
    2f60:	cf 93       	push	r28
    2f62:	cd b7       	in	r28, 0x3d	; 61
    2f64:	de b7       	in	r29, 0x3e	; 62
    2f66:	29 97       	sbiw	r28, 0x09	; 9
    2f68:	0f b6       	in	r0, 0x3f	; 63
    2f6a:	f8 94       	cli
    2f6c:	de bf       	out	0x3e, r29	; 62
    2f6e:	0f be       	out	0x3f, r0	; 63
    2f70:	cd bf       	out	0x3d, r28	; 61
    2f72:	89 83       	std	Y+1, r24	; 0x01
    2f74:	6a 83       	std	Y+2, r22	; 0x02
    2f76:	4b 83       	std	Y+3, r20	; 0x03
	TMR1_init();
    2f78:	0e 94 59 06 	call	0xcb2	; 0xcb2 <TMR1_init>
		TMR1_start();
    2f7c:	0e 94 8a 06 	call	0xd14	; 0xd14 <TMR1_start>
		DIO_setPinDirection(DIO_PORTB,DIO_PIN1,DIO_PIN_OUTPUT);
    2f80:	80 e0       	ldi	r24, 0x00	; 0
    2f82:	61 e0       	ldi	r22, 0x01	; 1
    2f84:	41 e0       	ldi	r20, 0x01	; 1
    2f86:	0e 94 e7 06 	call	0xdce	; 0xdce <DIO_setPinDirection>

switch(motor)
    2f8a:	89 81       	ldd	r24, Y+1	; 0x01
    2f8c:	28 2f       	mov	r18, r24
    2f8e:	30 e0       	ldi	r19, 0x00	; 0
    2f90:	39 87       	std	Y+9, r19	; 0x09
    2f92:	28 87       	std	Y+8, r18	; 0x08
    2f94:	88 85       	ldd	r24, Y+8	; 0x08
    2f96:	99 85       	ldd	r25, Y+9	; 0x09
    2f98:	81 34       	cpi	r24, 0x41	; 65
    2f9a:	91 05       	cpc	r25, r1
    2f9c:	31 f0       	breq	.+12     	; 0x2faa <L293D_DCMOTOR_speed+0x4c>
    2f9e:	28 85       	ldd	r18, Y+8	; 0x08
    2fa0:	39 85       	ldd	r19, Y+9	; 0x09
    2fa2:	22 34       	cpi	r18, 0x42	; 66
    2fa4:	31 05       	cpc	r19, r1
    2fa6:	69 f1       	breq	.+90     	; 0x3002 <L293D_DCMOTOR_speed+0xa4>
    2fa8:	57 c0       	rjmp	.+174    	; 0x3058 <L293D_DCMOTOR_speed+0xfa>
{

case 'A':
{

	switch(direction)
    2faa:	8b 81       	ldd	r24, Y+3	; 0x03
    2fac:	28 2f       	mov	r18, r24
    2fae:	30 e0       	ldi	r19, 0x00	; 0
    2fb0:	3f 83       	std	Y+7, r19	; 0x07
    2fb2:	2e 83       	std	Y+6, r18	; 0x06
    2fb4:	8e 81       	ldd	r24, Y+6	; 0x06
    2fb6:	9f 81       	ldd	r25, Y+7	; 0x07
    2fb8:	81 30       	cpi	r24, 0x01	; 1
    2fba:	91 05       	cpc	r25, r1
    2fbc:	31 f0       	breq	.+12     	; 0x2fca <L293D_DCMOTOR_speed+0x6c>
    2fbe:	2e 81       	ldd	r18, Y+6	; 0x06
    2fc0:	3f 81       	ldd	r19, Y+7	; 0x07
    2fc2:	22 30       	cpi	r18, 0x02	; 2
    2fc4:	31 05       	cpc	r19, r1
    2fc6:	79 f0       	breq	.+30     	; 0x2fe6 <L293D_DCMOTOR_speed+0x88>
    2fc8:	47 c0       	rjmp	.+142    	; 0x3058 <L293D_DCMOTOR_speed+0xfa>
	{
	case 1:
	{
	//CLCWISE

	DIO_setPinDirection(H_A2_PORT,H_A2_PIN,DIO_PIN_OUTPUT);
    2fca:	80 e0       	ldi	r24, 0x00	; 0
    2fcc:	64 e0       	ldi	r22, 0x04	; 4
    2fce:	41 e0       	ldi	r20, 0x01	; 1
    2fd0:	0e 94 e7 06 	call	0xdce	; 0xdce <DIO_setPinDirection>

	DIO_setPinValue(H_A2_PORT,H_A2_PIN,DIO_PIN_LOW);
    2fd4:	80 e0       	ldi	r24, 0x00	; 0
    2fd6:	64 e0       	ldi	r22, 0x04	; 4
    2fd8:	40 e0       	ldi	r20, 0x00	; 0
    2fda:	0e 94 c9 07 	call	0xf92	; 0xf92 <DIO_setPinValue>
	TMR1_setDutyCycle(num);
    2fde:	8a 81       	ldd	r24, Y+2	; 0x02
    2fe0:	0e 94 c2 06 	call	0xd84	; 0xd84 <TMR1_setDutyCycle>
    2fe4:	39 c0       	rjmp	.+114    	; 0x3058 <L293D_DCMOTOR_speed+0xfa>
	}
	case 2:
	{
	//ANTI CLCWISE

		DIO_setPinDirection(H_A1_PORT,H_A1_PIN,DIO_PIN_OUTPUT);
    2fe6:	80 e0       	ldi	r24, 0x00	; 0
    2fe8:	61 e0       	ldi	r22, 0x01	; 1
    2fea:	41 e0       	ldi	r20, 0x01	; 1
    2fec:	0e 94 e7 06 	call	0xdce	; 0xdce <DIO_setPinDirection>
	DIO_setPinValue(H_A1_PORT,H_A1_PIN,DIO_PIN_LOW);
    2ff0:	80 e0       	ldi	r24, 0x00	; 0
    2ff2:	61 e0       	ldi	r22, 0x01	; 1
    2ff4:	40 e0       	ldi	r20, 0x00	; 0
    2ff6:	0e 94 c9 07 	call	0xf92	; 0xf92 <DIO_setPinValue>
	TMR1_setDutyCycle(num);
    2ffa:	8a 81       	ldd	r24, Y+2	; 0x02
    2ffc:	0e 94 c2 06 	call	0xd84	; 0xd84 <TMR1_setDutyCycle>
    3000:	2b c0       	rjmp	.+86     	; 0x3058 <L293D_DCMOTOR_speed+0xfa>
case 'B':
{
	//motorB


	switch(direction)
    3002:	8b 81       	ldd	r24, Y+3	; 0x03
    3004:	28 2f       	mov	r18, r24
    3006:	30 e0       	ldi	r19, 0x00	; 0
    3008:	3d 83       	std	Y+5, r19	; 0x05
    300a:	2c 83       	std	Y+4, r18	; 0x04
    300c:	8c 81       	ldd	r24, Y+4	; 0x04
    300e:	9d 81       	ldd	r25, Y+5	; 0x05
    3010:	81 30       	cpi	r24, 0x01	; 1
    3012:	91 05       	cpc	r25, r1
    3014:	31 f0       	breq	.+12     	; 0x3022 <L293D_DCMOTOR_speed+0xc4>
    3016:	2c 81       	ldd	r18, Y+4	; 0x04
    3018:	3d 81       	ldd	r19, Y+5	; 0x05
    301a:	22 30       	cpi	r18, 0x02	; 2
    301c:	31 05       	cpc	r19, r1
    301e:	79 f0       	breq	.+30     	; 0x303e <L293D_DCMOTOR_speed+0xe0>
    3020:	1b c0       	rjmp	.+54     	; 0x3058 <L293D_DCMOTOR_speed+0xfa>
	case 1:
	{
	//CLCWISE


		DIO_setPinDirection(H_A4_PORT,H_A4_PIN,DIO_PIN_OUTPUT);
    3022:	81 e0       	ldi	r24, 0x01	; 1
    3024:	66 e0       	ldi	r22, 0x06	; 6
    3026:	41 e0       	ldi	r20, 0x01	; 1
    3028:	0e 94 e7 06 	call	0xdce	; 0xdce <DIO_setPinDirection>
	DIO_setPinValue(H_A4_PORT,H_A4_PIN,DIO_PIN_LOW);
    302c:	81 e0       	ldi	r24, 0x01	; 1
    302e:	66 e0       	ldi	r22, 0x06	; 6
    3030:	40 e0       	ldi	r20, 0x00	; 0
    3032:	0e 94 c9 07 	call	0xf92	; 0xf92 <DIO_setPinValue>
	TMR1_setDutyCycle(num);
    3036:	8a 81       	ldd	r24, Y+2	; 0x02
    3038:	0e 94 c2 06 	call	0xd84	; 0xd84 <TMR1_setDutyCycle>
    303c:	0d c0       	rjmp	.+26     	; 0x3058 <L293D_DCMOTOR_speed+0xfa>
	case 2:
	{
	//ANTI CLCWISE


		 DIO_setPinDirection(H_A3_PORT,H_A3_PIN,DIO_PIN_OUTPUT);
    303e:	81 e0       	ldi	r24, 0x01	; 1
    3040:	65 e0       	ldi	r22, 0x05	; 5
    3042:	41 e0       	ldi	r20, 0x01	; 1
    3044:	0e 94 e7 06 	call	0xdce	; 0xdce <DIO_setPinDirection>
	DIO_setPinValue(H_A3_PORT,H_A3_PIN,DIO_PIN_LOW);
    3048:	81 e0       	ldi	r24, 0x01	; 1
    304a:	65 e0       	ldi	r22, 0x05	; 5
    304c:	40 e0       	ldi	r20, 0x00	; 0
    304e:	0e 94 c9 07 	call	0xf92	; 0xf92 <DIO_setPinValue>
	TMR1_setDutyCycle(num);
    3052:	8a 81       	ldd	r24, Y+2	; 0x02
    3054:	0e 94 c2 06 	call	0xd84	; 0xd84 <TMR1_setDutyCycle>
	}
	}
break;
}
}
}
    3058:	29 96       	adiw	r28, 0x09	; 9
    305a:	0f b6       	in	r0, 0x3f	; 63
    305c:	f8 94       	cli
    305e:	de bf       	out	0x3e, r29	; 62
    3060:	0f be       	out	0x3f, r0	; 63
    3062:	cd bf       	out	0x3d, r28	; 61
    3064:	cf 91       	pop	r28
    3066:	df 91       	pop	r29
    3068:	08 95       	ret

0000306a <main>:
#define LOW  20
#define MEDIUM  50
#define HIGH  90

int main(void)
{
    306a:	df 93       	push	r29
    306c:	cf 93       	push	r28
    306e:	cd b7       	in	r28, 0x3d	; 61
    3070:	de b7       	in	r29, 0x3e	; 62
    3072:	ab 97       	sbiw	r28, 0x2b	; 43
    3074:	0f b6       	in	r0, 0x3f	; 63
    3076:	f8 94       	cli
    3078:	de bf       	out	0x3e, r29	; 62
    307a:	0f be       	out	0x3f, r0	; 63
    307c:	cd bf       	out	0x3d, r28	; 61
u8 x=0;
    307e:	1b a6       	std	Y+43, r1	; 0x2b

	LM35_init();
    3080:	0e 94 a9 0a 	call	0x1552	; 0x1552 <LM35_init>
	LCD_init();
    3084:	0e 94 05 0b 	call	0x160a	; 0x160a <LCD_init>



	while(1)
	{
		LM35_sendTemp(&x);
    3088:	ce 01       	movw	r24, r28
    308a:	8b 96       	adiw	r24, 0x2b	; 43
    308c:	0e 94 b8 0a 	call	0x1570	; 0x1570 <LM35_sendTemp>

		if((x>=30)&&(x<35))
    3090:	8b a5       	ldd	r24, Y+43	; 0x2b
    3092:	8e 31       	cpi	r24, 0x1E	; 30
    3094:	48 f0       	brcs	.+18     	; 0x30a8 <main+0x3e>
    3096:	8b a5       	ldd	r24, Y+43	; 0x2b
    3098:	83 32       	cpi	r24, 0x23	; 35
    309a:	30 f4       	brcc	.+12     	; 0x30a8 <main+0x3e>
		{
			L293D_DCMOTOR_speed('A',LOW,1);
    309c:	81 e4       	ldi	r24, 0x41	; 65
    309e:	64 e1       	ldi	r22, 0x14	; 20
    30a0:	41 e0       	ldi	r20, 0x01	; 1
    30a2:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <L293D_DCMOTOR_speed>
    30a6:	1b c0       	rjmp	.+54     	; 0x30de <main+0x74>

		}
		else if((x>=35)&&(x<40))
    30a8:	8b a5       	ldd	r24, Y+43	; 0x2b
    30aa:	83 32       	cpi	r24, 0x23	; 35
    30ac:	48 f0       	brcs	.+18     	; 0x30c0 <main+0x56>
    30ae:	8b a5       	ldd	r24, Y+43	; 0x2b
    30b0:	88 32       	cpi	r24, 0x28	; 40
    30b2:	30 f4       	brcc	.+12     	; 0x30c0 <main+0x56>
		{
			L293D_DCMOTOR_speed('A',MEDIUM,1);
    30b4:	81 e4       	ldi	r24, 0x41	; 65
    30b6:	62 e3       	ldi	r22, 0x32	; 50
    30b8:	41 e0       	ldi	r20, 0x01	; 1
    30ba:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <L293D_DCMOTOR_speed>
    30be:	0f c0       	rjmp	.+30     	; 0x30de <main+0x74>
		}
		else if(x>=40)
    30c0:	8b a5       	ldd	r24, Y+43	; 0x2b
    30c2:	88 32       	cpi	r24, 0x28	; 40
    30c4:	30 f0       	brcs	.+12     	; 0x30d2 <main+0x68>
		{
			L293D_DCMOTOR_speed('A',HIGH,1);
    30c6:	81 e4       	ldi	r24, 0x41	; 65
    30c8:	6a e5       	ldi	r22, 0x5A	; 90
    30ca:	41 e0       	ldi	r20, 0x01	; 1
    30cc:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <L293D_DCMOTOR_speed>
    30d0:	06 c0       	rjmp	.+12     	; 0x30de <main+0x74>
		}
		else if(x<30)
    30d2:	8b a5       	ldd	r24, Y+43	; 0x2b
    30d4:	8e 31       	cpi	r24, 0x1E	; 30
    30d6:	18 f4       	brcc	.+6      	; 0x30de <main+0x74>
		{
			L293D_DCMOTOR_stop('A');
    30d8:	81 e4       	ldi	r24, 0x41	; 65
    30da:	0e 94 81 17 	call	0x2f02	; 0x2f02 <L293D_DCMOTOR_stop>
		}


		 LCD_writeNumber(x);
    30de:	8b a5       	ldd	r24, Y+43	; 0x2b
    30e0:	88 2f       	mov	r24, r24
    30e2:	90 e0       	ldi	r25, 0x00	; 0
    30e4:	a0 e0       	ldi	r26, 0x00	; 0
    30e6:	b0 e0       	ldi	r27, 0x00	; 0
    30e8:	bc 01       	movw	r22, r24
    30ea:	cd 01       	movw	r24, r26
    30ec:	0e 94 48 16 	call	0x2c90	; 0x2c90 <LCD_writeNumber>

				       LCD_sendChar('c');
    30f0:	83 e6       	ldi	r24, 0x63	; 99
    30f2:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <LCD_sendChar>
    30f6:	80 e0       	ldi	r24, 0x00	; 0
    30f8:	90 e0       	ldi	r25, 0x00	; 0
    30fa:	a6 e9       	ldi	r26, 0x96	; 150
    30fc:	b3 e4       	ldi	r27, 0x43	; 67
    30fe:	8f a3       	std	Y+39, r24	; 0x27
    3100:	98 a7       	std	Y+40, r25	; 0x28
    3102:	a9 a7       	std	Y+41, r26	; 0x29
    3104:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3106:	6f a1       	ldd	r22, Y+39	; 0x27
    3108:	78 a5       	ldd	r23, Y+40	; 0x28
    310a:	89 a5       	ldd	r24, Y+41	; 0x29
    310c:	9a a5       	ldd	r25, Y+42	; 0x2a
    310e:	20 e0       	ldi	r18, 0x00	; 0
    3110:	30 e0       	ldi	r19, 0x00	; 0
    3112:	4a e7       	ldi	r20, 0x7A	; 122
    3114:	55 e4       	ldi	r21, 0x45	; 69
    3116:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    311a:	dc 01       	movw	r26, r24
    311c:	cb 01       	movw	r24, r22
    311e:	8b a3       	std	Y+35, r24	; 0x23
    3120:	9c a3       	std	Y+36, r25	; 0x24
    3122:	ad a3       	std	Y+37, r26	; 0x25
    3124:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3126:	6b a1       	ldd	r22, Y+35	; 0x23
    3128:	7c a1       	ldd	r23, Y+36	; 0x24
    312a:	8d a1       	ldd	r24, Y+37	; 0x25
    312c:	9e a1       	ldd	r25, Y+38	; 0x26
    312e:	20 e0       	ldi	r18, 0x00	; 0
    3130:	30 e0       	ldi	r19, 0x00	; 0
    3132:	40 e8       	ldi	r20, 0x80	; 128
    3134:	5f e3       	ldi	r21, 0x3F	; 63
    3136:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    313a:	88 23       	and	r24, r24
    313c:	2c f4       	brge	.+10     	; 0x3148 <main+0xde>
		__ticks = 1;
    313e:	81 e0       	ldi	r24, 0x01	; 1
    3140:	90 e0       	ldi	r25, 0x00	; 0
    3142:	9a a3       	std	Y+34, r25	; 0x22
    3144:	89 a3       	std	Y+33, r24	; 0x21
    3146:	3f c0       	rjmp	.+126    	; 0x31c6 <main+0x15c>
	else if (__tmp > 65535)
    3148:	6b a1       	ldd	r22, Y+35	; 0x23
    314a:	7c a1       	ldd	r23, Y+36	; 0x24
    314c:	8d a1       	ldd	r24, Y+37	; 0x25
    314e:	9e a1       	ldd	r25, Y+38	; 0x26
    3150:	20 e0       	ldi	r18, 0x00	; 0
    3152:	3f ef       	ldi	r19, 0xFF	; 255
    3154:	4f e7       	ldi	r20, 0x7F	; 127
    3156:	57 e4       	ldi	r21, 0x47	; 71
    3158:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    315c:	18 16       	cp	r1, r24
    315e:	4c f5       	brge	.+82     	; 0x31b2 <main+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3160:	6f a1       	ldd	r22, Y+39	; 0x27
    3162:	78 a5       	ldd	r23, Y+40	; 0x28
    3164:	89 a5       	ldd	r24, Y+41	; 0x29
    3166:	9a a5       	ldd	r25, Y+42	; 0x2a
    3168:	20 e0       	ldi	r18, 0x00	; 0
    316a:	30 e0       	ldi	r19, 0x00	; 0
    316c:	40 e2       	ldi	r20, 0x20	; 32
    316e:	51 e4       	ldi	r21, 0x41	; 65
    3170:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    3174:	dc 01       	movw	r26, r24
    3176:	cb 01       	movw	r24, r22
    3178:	bc 01       	movw	r22, r24
    317a:	cd 01       	movw	r24, r26
    317c:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    3180:	dc 01       	movw	r26, r24
    3182:	cb 01       	movw	r24, r22
    3184:	9a a3       	std	Y+34, r25	; 0x22
    3186:	89 a3       	std	Y+33, r24	; 0x21
    3188:	0f c0       	rjmp	.+30     	; 0x31a8 <main+0x13e>
    318a:	80 e9       	ldi	r24, 0x90	; 144
    318c:	91 e0       	ldi	r25, 0x01	; 1
    318e:	98 a3       	std	Y+32, r25	; 0x20
    3190:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3192:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3194:	98 a1       	ldd	r25, Y+32	; 0x20
    3196:	01 97       	sbiw	r24, 0x01	; 1
    3198:	f1 f7       	brne	.-4      	; 0x3196 <main+0x12c>
    319a:	98 a3       	std	Y+32, r25	; 0x20
    319c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    319e:	89 a1       	ldd	r24, Y+33	; 0x21
    31a0:	9a a1       	ldd	r25, Y+34	; 0x22
    31a2:	01 97       	sbiw	r24, 0x01	; 1
    31a4:	9a a3       	std	Y+34, r25	; 0x22
    31a6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31a8:	89 a1       	ldd	r24, Y+33	; 0x21
    31aa:	9a a1       	ldd	r25, Y+34	; 0x22
    31ac:	00 97       	sbiw	r24, 0x00	; 0
    31ae:	69 f7       	brne	.-38     	; 0x318a <main+0x120>
    31b0:	14 c0       	rjmp	.+40     	; 0x31da <main+0x170>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31b2:	6b a1       	ldd	r22, Y+35	; 0x23
    31b4:	7c a1       	ldd	r23, Y+36	; 0x24
    31b6:	8d a1       	ldd	r24, Y+37	; 0x25
    31b8:	9e a1       	ldd	r25, Y+38	; 0x26
    31ba:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    31be:	dc 01       	movw	r26, r24
    31c0:	cb 01       	movw	r24, r22
    31c2:	9a a3       	std	Y+34, r25	; 0x22
    31c4:	89 a3       	std	Y+33, r24	; 0x21
    31c6:	89 a1       	ldd	r24, Y+33	; 0x21
    31c8:	9a a1       	ldd	r25, Y+34	; 0x22
    31ca:	9e 8f       	std	Y+30, r25	; 0x1e
    31cc:	8d 8f       	std	Y+29, r24	; 0x1d
    31ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31d0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    31d2:	01 97       	sbiw	r24, 0x01	; 1
    31d4:	f1 f7       	brne	.-4      	; 0x31d2 <main+0x168>
    31d6:	9e 8f       	std	Y+30, r25	; 0x1e
    31d8:	8d 8f       	std	Y+29, r24	; 0x1d

				         _delay_ms(300);
				         LCD_clear();
    31da:	0e 94 4a 11 	call	0x2294	; 0x2294 <LCD_clear>

				         if(x>=30)
    31de:	8b a5       	ldd	r24, Y+43	; 0x2b
    31e0:	8e 31       	cpi	r24, 0x1E	; 30
    31e2:	08 f4       	brcc	.+2      	; 0x31e6 <main+0x17c>
    31e4:	e9 c0       	rjmp	.+466    	; 0x33b8 <main+0x34e>
    31e6:	80 e0       	ldi	r24, 0x00	; 0
    31e8:	90 e0       	ldi	r25, 0x00	; 0
    31ea:	a6 e9       	ldi	r26, 0x96	; 150
    31ec:	b3 e4       	ldi	r27, 0x43	; 67
    31ee:	89 8f       	std	Y+25, r24	; 0x19
    31f0:	9a 8f       	std	Y+26, r25	; 0x1a
    31f2:	ab 8f       	std	Y+27, r26	; 0x1b
    31f4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31f6:	69 8d       	ldd	r22, Y+25	; 0x19
    31f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31fe:	20 e0       	ldi	r18, 0x00	; 0
    3200:	30 e0       	ldi	r19, 0x00	; 0
    3202:	4a e7       	ldi	r20, 0x7A	; 122
    3204:	55 e4       	ldi	r21, 0x45	; 69
    3206:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    320a:	dc 01       	movw	r26, r24
    320c:	cb 01       	movw	r24, r22
    320e:	8d 8b       	std	Y+21, r24	; 0x15
    3210:	9e 8b       	std	Y+22, r25	; 0x16
    3212:	af 8b       	std	Y+23, r26	; 0x17
    3214:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3216:	6d 89       	ldd	r22, Y+21	; 0x15
    3218:	7e 89       	ldd	r23, Y+22	; 0x16
    321a:	8f 89       	ldd	r24, Y+23	; 0x17
    321c:	98 8d       	ldd	r25, Y+24	; 0x18
    321e:	20 e0       	ldi	r18, 0x00	; 0
    3220:	30 e0       	ldi	r19, 0x00	; 0
    3222:	40 e8       	ldi	r20, 0x80	; 128
    3224:	5f e3       	ldi	r21, 0x3F	; 63
    3226:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    322a:	88 23       	and	r24, r24
    322c:	2c f4       	brge	.+10     	; 0x3238 <main+0x1ce>
		__ticks = 1;
    322e:	81 e0       	ldi	r24, 0x01	; 1
    3230:	90 e0       	ldi	r25, 0x00	; 0
    3232:	9c 8b       	std	Y+20, r25	; 0x14
    3234:	8b 8b       	std	Y+19, r24	; 0x13
    3236:	3f c0       	rjmp	.+126    	; 0x32b6 <main+0x24c>
	else if (__tmp > 65535)
    3238:	6d 89       	ldd	r22, Y+21	; 0x15
    323a:	7e 89       	ldd	r23, Y+22	; 0x16
    323c:	8f 89       	ldd	r24, Y+23	; 0x17
    323e:	98 8d       	ldd	r25, Y+24	; 0x18
    3240:	20 e0       	ldi	r18, 0x00	; 0
    3242:	3f ef       	ldi	r19, 0xFF	; 255
    3244:	4f e7       	ldi	r20, 0x7F	; 127
    3246:	57 e4       	ldi	r21, 0x47	; 71
    3248:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    324c:	18 16       	cp	r1, r24
    324e:	4c f5       	brge	.+82     	; 0x32a2 <main+0x238>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3250:	69 8d       	ldd	r22, Y+25	; 0x19
    3252:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3254:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3256:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3258:	20 e0       	ldi	r18, 0x00	; 0
    325a:	30 e0       	ldi	r19, 0x00	; 0
    325c:	40 e2       	ldi	r20, 0x20	; 32
    325e:	51 e4       	ldi	r21, 0x41	; 65
    3260:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    3264:	dc 01       	movw	r26, r24
    3266:	cb 01       	movw	r24, r22
    3268:	bc 01       	movw	r22, r24
    326a:	cd 01       	movw	r24, r26
    326c:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    3270:	dc 01       	movw	r26, r24
    3272:	cb 01       	movw	r24, r22
    3274:	9c 8b       	std	Y+20, r25	; 0x14
    3276:	8b 8b       	std	Y+19, r24	; 0x13
    3278:	0f c0       	rjmp	.+30     	; 0x3298 <main+0x22e>
    327a:	80 e9       	ldi	r24, 0x90	; 144
    327c:	91 e0       	ldi	r25, 0x01	; 1
    327e:	9a 8b       	std	Y+18, r25	; 0x12
    3280:	89 8b       	std	Y+17, r24	; 0x11
    3282:	89 89       	ldd	r24, Y+17	; 0x11
    3284:	9a 89       	ldd	r25, Y+18	; 0x12
    3286:	01 97       	sbiw	r24, 0x01	; 1
    3288:	f1 f7       	brne	.-4      	; 0x3286 <main+0x21c>
    328a:	9a 8b       	std	Y+18, r25	; 0x12
    328c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    328e:	8b 89       	ldd	r24, Y+19	; 0x13
    3290:	9c 89       	ldd	r25, Y+20	; 0x14
    3292:	01 97       	sbiw	r24, 0x01	; 1
    3294:	9c 8b       	std	Y+20, r25	; 0x14
    3296:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3298:	8b 89       	ldd	r24, Y+19	; 0x13
    329a:	9c 89       	ldd	r25, Y+20	; 0x14
    329c:	00 97       	sbiw	r24, 0x00	; 0
    329e:	69 f7       	brne	.-38     	; 0x327a <main+0x210>
    32a0:	14 c0       	rjmp	.+40     	; 0x32ca <main+0x260>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32a2:	6d 89       	ldd	r22, Y+21	; 0x15
    32a4:	7e 89       	ldd	r23, Y+22	; 0x16
    32a6:	8f 89       	ldd	r24, Y+23	; 0x17
    32a8:	98 8d       	ldd	r25, Y+24	; 0x18
    32aa:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    32ae:	dc 01       	movw	r26, r24
    32b0:	cb 01       	movw	r24, r22
    32b2:	9c 8b       	std	Y+20, r25	; 0x14
    32b4:	8b 8b       	std	Y+19, r24	; 0x13
    32b6:	8b 89       	ldd	r24, Y+19	; 0x13
    32b8:	9c 89       	ldd	r25, Y+20	; 0x14
    32ba:	98 8b       	std	Y+16, r25	; 0x10
    32bc:	8f 87       	std	Y+15, r24	; 0x0f
    32be:	8f 85       	ldd	r24, Y+15	; 0x0f
    32c0:	98 89       	ldd	r25, Y+16	; 0x10
    32c2:	01 97       	sbiw	r24, 0x01	; 1
    32c4:	f1 f7       	brne	.-4      	; 0x32c2 <main+0x258>
    32c6:	98 8b       	std	Y+16, r25	; 0x10
    32c8:	8f 87       	std	Y+15, r24	; 0x0f
				         		{

				       _delay_ms(300);
				       L293D_DCMOTOR_speed('A',1,1);
    32ca:	81 e4       	ldi	r24, 0x41	; 65
    32cc:	61 e0       	ldi	r22, 0x01	; 1
    32ce:	41 e0       	ldi	r20, 0x01	; 1
    32d0:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <L293D_DCMOTOR_speed>
    32d4:	80 e0       	ldi	r24, 0x00	; 0
    32d6:	90 e0       	ldi	r25, 0x00	; 0
    32d8:	a6 e9       	ldi	r26, 0x96	; 150
    32da:	b3 e4       	ldi	r27, 0x43	; 67
    32dc:	8b 87       	std	Y+11, r24	; 0x0b
    32de:	9c 87       	std	Y+12, r25	; 0x0c
    32e0:	ad 87       	std	Y+13, r26	; 0x0d
    32e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    32e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    32e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    32ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    32ec:	20 e0       	ldi	r18, 0x00	; 0
    32ee:	30 e0       	ldi	r19, 0x00	; 0
    32f0:	4a e7       	ldi	r20, 0x7A	; 122
    32f2:	55 e4       	ldi	r21, 0x45	; 69
    32f4:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    32f8:	dc 01       	movw	r26, r24
    32fa:	cb 01       	movw	r24, r22
    32fc:	8f 83       	std	Y+7, r24	; 0x07
    32fe:	98 87       	std	Y+8, r25	; 0x08
    3300:	a9 87       	std	Y+9, r26	; 0x09
    3302:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3304:	6f 81       	ldd	r22, Y+7	; 0x07
    3306:	78 85       	ldd	r23, Y+8	; 0x08
    3308:	89 85       	ldd	r24, Y+9	; 0x09
    330a:	9a 85       	ldd	r25, Y+10	; 0x0a
    330c:	20 e0       	ldi	r18, 0x00	; 0
    330e:	30 e0       	ldi	r19, 0x00	; 0
    3310:	40 e8       	ldi	r20, 0x80	; 128
    3312:	5f e3       	ldi	r21, 0x3F	; 63
    3314:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    3318:	88 23       	and	r24, r24
    331a:	2c f4       	brge	.+10     	; 0x3326 <main+0x2bc>
		__ticks = 1;
    331c:	81 e0       	ldi	r24, 0x01	; 1
    331e:	90 e0       	ldi	r25, 0x00	; 0
    3320:	9e 83       	std	Y+6, r25	; 0x06
    3322:	8d 83       	std	Y+5, r24	; 0x05
    3324:	3f c0       	rjmp	.+126    	; 0x33a4 <main+0x33a>
	else if (__tmp > 65535)
    3326:	6f 81       	ldd	r22, Y+7	; 0x07
    3328:	78 85       	ldd	r23, Y+8	; 0x08
    332a:	89 85       	ldd	r24, Y+9	; 0x09
    332c:	9a 85       	ldd	r25, Y+10	; 0x0a
    332e:	20 e0       	ldi	r18, 0x00	; 0
    3330:	3f ef       	ldi	r19, 0xFF	; 255
    3332:	4f e7       	ldi	r20, 0x7F	; 127
    3334:	57 e4       	ldi	r21, 0x47	; 71
    3336:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    333a:	18 16       	cp	r1, r24
    333c:	4c f5       	brge	.+82     	; 0x3390 <main+0x326>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    333e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3340:	7c 85       	ldd	r23, Y+12	; 0x0c
    3342:	8d 85       	ldd	r24, Y+13	; 0x0d
    3344:	9e 85       	ldd	r25, Y+14	; 0x0e
    3346:	20 e0       	ldi	r18, 0x00	; 0
    3348:	30 e0       	ldi	r19, 0x00	; 0
    334a:	40 e2       	ldi	r20, 0x20	; 32
    334c:	51 e4       	ldi	r21, 0x41	; 65
    334e:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    3352:	dc 01       	movw	r26, r24
    3354:	cb 01       	movw	r24, r22
    3356:	bc 01       	movw	r22, r24
    3358:	cd 01       	movw	r24, r26
    335a:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    335e:	dc 01       	movw	r26, r24
    3360:	cb 01       	movw	r24, r22
    3362:	9e 83       	std	Y+6, r25	; 0x06
    3364:	8d 83       	std	Y+5, r24	; 0x05
    3366:	0f c0       	rjmp	.+30     	; 0x3386 <main+0x31c>
    3368:	80 e9       	ldi	r24, 0x90	; 144
    336a:	91 e0       	ldi	r25, 0x01	; 1
    336c:	9c 83       	std	Y+4, r25	; 0x04
    336e:	8b 83       	std	Y+3, r24	; 0x03
    3370:	8b 81       	ldd	r24, Y+3	; 0x03
    3372:	9c 81       	ldd	r25, Y+4	; 0x04
    3374:	01 97       	sbiw	r24, 0x01	; 1
    3376:	f1 f7       	brne	.-4      	; 0x3374 <main+0x30a>
    3378:	9c 83       	std	Y+4, r25	; 0x04
    337a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    337c:	8d 81       	ldd	r24, Y+5	; 0x05
    337e:	9e 81       	ldd	r25, Y+6	; 0x06
    3380:	01 97       	sbiw	r24, 0x01	; 1
    3382:	9e 83       	std	Y+6, r25	; 0x06
    3384:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3386:	8d 81       	ldd	r24, Y+5	; 0x05
    3388:	9e 81       	ldd	r25, Y+6	; 0x06
    338a:	00 97       	sbiw	r24, 0x00	; 0
    338c:	69 f7       	brne	.-38     	; 0x3368 <main+0x2fe>
    338e:	14 c0       	rjmp	.+40     	; 0x33b8 <main+0x34e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3390:	6f 81       	ldd	r22, Y+7	; 0x07
    3392:	78 85       	ldd	r23, Y+8	; 0x08
    3394:	89 85       	ldd	r24, Y+9	; 0x09
    3396:	9a 85       	ldd	r25, Y+10	; 0x0a
    3398:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    339c:	dc 01       	movw	r26, r24
    339e:	cb 01       	movw	r24, r22
    33a0:	9e 83       	std	Y+6, r25	; 0x06
    33a2:	8d 83       	std	Y+5, r24	; 0x05
    33a4:	8d 81       	ldd	r24, Y+5	; 0x05
    33a6:	9e 81       	ldd	r25, Y+6	; 0x06
    33a8:	9a 83       	std	Y+2, r25	; 0x02
    33aa:	89 83       	std	Y+1, r24	; 0x01
    33ac:	89 81       	ldd	r24, Y+1	; 0x01
    33ae:	9a 81       	ldd	r25, Y+2	; 0x02
    33b0:	01 97       	sbiw	r24, 0x01	; 1
    33b2:	f1 f7       	brne	.-4      	; 0x33b0 <main+0x346>
    33b4:	9a 83       	std	Y+2, r25	; 0x02
    33b6:	89 83       	std	Y+1, r24	; 0x01

				        	 _delay_ms(300);
				         		}
				         x=0;
    33b8:	1b a6       	std	Y+43, r1	; 0x2b
    33ba:	66 ce       	rjmp	.-820    	; 0x3088 <main+0x1e>

000033bc <__mulsi3>:
    33bc:	62 9f       	mul	r22, r18
    33be:	d0 01       	movw	r26, r0
    33c0:	73 9f       	mul	r23, r19
    33c2:	f0 01       	movw	r30, r0
    33c4:	82 9f       	mul	r24, r18
    33c6:	e0 0d       	add	r30, r0
    33c8:	f1 1d       	adc	r31, r1
    33ca:	64 9f       	mul	r22, r20
    33cc:	e0 0d       	add	r30, r0
    33ce:	f1 1d       	adc	r31, r1
    33d0:	92 9f       	mul	r25, r18
    33d2:	f0 0d       	add	r31, r0
    33d4:	83 9f       	mul	r24, r19
    33d6:	f0 0d       	add	r31, r0
    33d8:	74 9f       	mul	r23, r20
    33da:	f0 0d       	add	r31, r0
    33dc:	65 9f       	mul	r22, r21
    33de:	f0 0d       	add	r31, r0
    33e0:	99 27       	eor	r25, r25
    33e2:	72 9f       	mul	r23, r18
    33e4:	b0 0d       	add	r27, r0
    33e6:	e1 1d       	adc	r30, r1
    33e8:	f9 1f       	adc	r31, r25
    33ea:	63 9f       	mul	r22, r19
    33ec:	b0 0d       	add	r27, r0
    33ee:	e1 1d       	adc	r30, r1
    33f0:	f9 1f       	adc	r31, r25
    33f2:	bd 01       	movw	r22, r26
    33f4:	cf 01       	movw	r24, r30
    33f6:	11 24       	eor	r1, r1
    33f8:	08 95       	ret

000033fa <__udivmodhi4>:
    33fa:	aa 1b       	sub	r26, r26
    33fc:	bb 1b       	sub	r27, r27
    33fe:	51 e1       	ldi	r21, 0x11	; 17
    3400:	07 c0       	rjmp	.+14     	; 0x3410 <__udivmodhi4_ep>

00003402 <__udivmodhi4_loop>:
    3402:	aa 1f       	adc	r26, r26
    3404:	bb 1f       	adc	r27, r27
    3406:	a6 17       	cp	r26, r22
    3408:	b7 07       	cpc	r27, r23
    340a:	10 f0       	brcs	.+4      	; 0x3410 <__udivmodhi4_ep>
    340c:	a6 1b       	sub	r26, r22
    340e:	b7 0b       	sbc	r27, r23

00003410 <__udivmodhi4_ep>:
    3410:	88 1f       	adc	r24, r24
    3412:	99 1f       	adc	r25, r25
    3414:	5a 95       	dec	r21
    3416:	a9 f7       	brne	.-22     	; 0x3402 <__udivmodhi4_loop>
    3418:	80 95       	com	r24
    341a:	90 95       	com	r25
    341c:	bc 01       	movw	r22, r24
    341e:	cd 01       	movw	r24, r26
    3420:	08 95       	ret

00003422 <__udivmodsi4>:
    3422:	a1 e2       	ldi	r26, 0x21	; 33
    3424:	1a 2e       	mov	r1, r26
    3426:	aa 1b       	sub	r26, r26
    3428:	bb 1b       	sub	r27, r27
    342a:	fd 01       	movw	r30, r26
    342c:	0d c0       	rjmp	.+26     	; 0x3448 <__udivmodsi4_ep>

0000342e <__udivmodsi4_loop>:
    342e:	aa 1f       	adc	r26, r26
    3430:	bb 1f       	adc	r27, r27
    3432:	ee 1f       	adc	r30, r30
    3434:	ff 1f       	adc	r31, r31
    3436:	a2 17       	cp	r26, r18
    3438:	b3 07       	cpc	r27, r19
    343a:	e4 07       	cpc	r30, r20
    343c:	f5 07       	cpc	r31, r21
    343e:	20 f0       	brcs	.+8      	; 0x3448 <__udivmodsi4_ep>
    3440:	a2 1b       	sub	r26, r18
    3442:	b3 0b       	sbc	r27, r19
    3444:	e4 0b       	sbc	r30, r20
    3446:	f5 0b       	sbc	r31, r21

00003448 <__udivmodsi4_ep>:
    3448:	66 1f       	adc	r22, r22
    344a:	77 1f       	adc	r23, r23
    344c:	88 1f       	adc	r24, r24
    344e:	99 1f       	adc	r25, r25
    3450:	1a 94       	dec	r1
    3452:	69 f7       	brne	.-38     	; 0x342e <__udivmodsi4_loop>
    3454:	60 95       	com	r22
    3456:	70 95       	com	r23
    3458:	80 95       	com	r24
    345a:	90 95       	com	r25
    345c:	9b 01       	movw	r18, r22
    345e:	ac 01       	movw	r20, r24
    3460:	bd 01       	movw	r22, r26
    3462:	cf 01       	movw	r24, r30
    3464:	08 95       	ret

00003466 <__prologue_saves__>:
    3466:	2f 92       	push	r2
    3468:	3f 92       	push	r3
    346a:	4f 92       	push	r4
    346c:	5f 92       	push	r5
    346e:	6f 92       	push	r6
    3470:	7f 92       	push	r7
    3472:	8f 92       	push	r8
    3474:	9f 92       	push	r9
    3476:	af 92       	push	r10
    3478:	bf 92       	push	r11
    347a:	cf 92       	push	r12
    347c:	df 92       	push	r13
    347e:	ef 92       	push	r14
    3480:	ff 92       	push	r15
    3482:	0f 93       	push	r16
    3484:	1f 93       	push	r17
    3486:	cf 93       	push	r28
    3488:	df 93       	push	r29
    348a:	cd b7       	in	r28, 0x3d	; 61
    348c:	de b7       	in	r29, 0x3e	; 62
    348e:	ca 1b       	sub	r28, r26
    3490:	db 0b       	sbc	r29, r27
    3492:	0f b6       	in	r0, 0x3f	; 63
    3494:	f8 94       	cli
    3496:	de bf       	out	0x3e, r29	; 62
    3498:	0f be       	out	0x3f, r0	; 63
    349a:	cd bf       	out	0x3d, r28	; 61
    349c:	09 94       	ijmp

0000349e <__epilogue_restores__>:
    349e:	2a 88       	ldd	r2, Y+18	; 0x12
    34a0:	39 88       	ldd	r3, Y+17	; 0x11
    34a2:	48 88       	ldd	r4, Y+16	; 0x10
    34a4:	5f 84       	ldd	r5, Y+15	; 0x0f
    34a6:	6e 84       	ldd	r6, Y+14	; 0x0e
    34a8:	7d 84       	ldd	r7, Y+13	; 0x0d
    34aa:	8c 84       	ldd	r8, Y+12	; 0x0c
    34ac:	9b 84       	ldd	r9, Y+11	; 0x0b
    34ae:	aa 84       	ldd	r10, Y+10	; 0x0a
    34b0:	b9 84       	ldd	r11, Y+9	; 0x09
    34b2:	c8 84       	ldd	r12, Y+8	; 0x08
    34b4:	df 80       	ldd	r13, Y+7	; 0x07
    34b6:	ee 80       	ldd	r14, Y+6	; 0x06
    34b8:	fd 80       	ldd	r15, Y+5	; 0x05
    34ba:	0c 81       	ldd	r16, Y+4	; 0x04
    34bc:	1b 81       	ldd	r17, Y+3	; 0x03
    34be:	aa 81       	ldd	r26, Y+2	; 0x02
    34c0:	b9 81       	ldd	r27, Y+1	; 0x01
    34c2:	ce 0f       	add	r28, r30
    34c4:	d1 1d       	adc	r29, r1
    34c6:	0f b6       	in	r0, 0x3f	; 63
    34c8:	f8 94       	cli
    34ca:	de bf       	out	0x3e, r29	; 62
    34cc:	0f be       	out	0x3f, r0	; 63
    34ce:	cd bf       	out	0x3d, r28	; 61
    34d0:	ed 01       	movw	r28, r26
    34d2:	08 95       	ret

000034d4 <_exit>:
    34d4:	f8 94       	cli

000034d6 <__stop_program>:
    34d6:	ff cf       	rjmp	.-2      	; 0x34d6 <__stop_program>
